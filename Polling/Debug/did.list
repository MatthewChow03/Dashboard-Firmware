
did.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026bc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a4c  08002a4c  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08002a4c  08002a4c  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a4c  08002a4c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a50  08002a50  00012a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08002a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000184  08002bd8  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08002bd8  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006769  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180d  00000000  00000000  00026916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  00028128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000540  00000000  00000000  00028730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018457  00000000  00000000  00028c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000707f  00000000  00000000  000410c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c82f  00000000  00000000  00048146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4975  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001658  00000000  00000000  000d49c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000184 	.word	0x20000184
 8000200:	00000000 	.word	0x00000000
 8000204:	08002888 	.word	0x08002888

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000188 	.word	0x20000188
 8000220:	08002888 	.word	0x08002888

08000224 <Delay>:
 * A Delay with a value of ~1ms
 * @Param counts: Number of milliseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void Delay(uint32_t counts) {
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint16_t j;
	for (i = 0; i < counts; i++) {
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	e00c      	b.n	800024c <Delay+0x28>
		for (j = 0; j < 16000; j++) {
 8000232:	2300      	movs	r3, #0
 8000234:	817b      	strh	r3, [r7, #10]
 8000236:	e002      	b.n	800023e <Delay+0x1a>
 8000238:	897b      	ldrh	r3, [r7, #10]
 800023a:	3301      	adds	r3, #1
 800023c:	817b      	strh	r3, [r7, #10]
 800023e:	897b      	ldrh	r3, [r7, #10]
 8000240:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000244:	d3f8      	bcc.n	8000238 <Delay+0x14>
	for (i = 0; i < counts; i++) {
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	3301      	adds	r3, #1
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	68fa      	ldr	r2, [r7, #12]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	429a      	cmp	r2, r3
 8000252:	d3ee      	bcc.n	8000232 <Delay+0xe>
		}
	}

}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	3714      	adds	r7, #20
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <MicrosecondDelay>:
 * A Delay with a value of ~1us
 * @Param counts: Number of microseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void MicrosecondDelay(uint32_t counts) {
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint8_t j;

	for (i = 0; i < counts; i++) {
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	e00b      	b.n	8000286 <MicrosecondDelay+0x26>
		for (j = 0; j < 16; j++) {
 800026e:	2300      	movs	r3, #0
 8000270:	72fb      	strb	r3, [r7, #11]
 8000272:	e002      	b.n	800027a <MicrosecondDelay+0x1a>
 8000274:	7afb      	ldrb	r3, [r7, #11]
 8000276:	3301      	adds	r3, #1
 8000278:	72fb      	strb	r3, [r7, #11]
 800027a:	7afb      	ldrb	r3, [r7, #11]
 800027c:	2b0f      	cmp	r3, #15
 800027e:	d9f9      	bls.n	8000274 <MicrosecondDelay+0x14>
	for (i = 0; i < counts; i++) {
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	3301      	adds	r3, #1
 8000284:	60fb      	str	r3, [r7, #12]
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	429a      	cmp	r2, r3
 800028c:	d3ef      	bcc.n	800026e <MicrosecondDelay+0xe>
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr

0800029a <MoveCursor>:
/**
 * Moves cursor to the position on the screen determined by XY Coordinates
 * @Param x: x-coordinate
 * @Param y: y-coordinate
 */
void MoveCursor(uint8_t x, uint8_t y) {
 800029a:	b580      	push	{r7, lr}
 800029c:	b084      	sub	sp, #16
 800029e:	af00      	add	r7, sp, #0
 80002a0:	4603      	mov	r3, r0
 80002a2:	460a      	mov	r2, r1
 80002a4:	71fb      	strb	r3, [r7, #7]
 80002a6:	4613      	mov	r3, r2
 80002a8:	71bb      	strb	r3, [r7, #6]
	 * Row major:
	 * 0 1 2 3 4
	 * 5 6 7 8 9
	 *
	 */
	uint16_t offset = 40 * y + x;
 80002aa:	79bb      	ldrb	r3, [r7, #6]
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	461a      	mov	r2, r3
 80002b0:	0092      	lsls	r2, r2, #2
 80002b2:	4413      	add	r3, r2
 80002b4:	00db      	lsls	r3, r3, #3
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	4413      	add	r3, r2
 80002be:	81fb      	strh	r3, [r7, #14]

	TransmitCommand(0x46);
 80002c0:	2046      	movs	r0, #70	; 0x46
 80002c2:	f000 fafd 	bl	80008c0 <TransmitCommand>
	// The CSRW register is 2 bytes long, so the first parameter
	// is the first byte and the second parameter is the second
	// byte
	TransmitCommandParameter(offset & 0xFF);
 80002c6:	89fb      	ldrh	r3, [r7, #14]
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fb16 	bl	80008fc <TransmitCommandParameter>
	TransmitCommandParameter(offset >> 8);
 80002d0:	89fb      	ldrh	r3, [r7, #14]
 80002d2:	0a1b      	lsrs	r3, r3, #8
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fb0f 	bl	80008fc <TransmitCommandParameter>
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <ClearScreen>:

/**
 * Purpose: Prints 1200 " " characters to clear the screen
 */
void ClearScreen() {
 80002e6:	b580      	push	{r7, lr}
 80002e8:	b082      	sub	sp, #8
 80002ea:	af00      	add	r7, sp, #0
	//Set cursor to start position
	MoveCursor(0, 0);
 80002ec:	2100      	movs	r1, #0
 80002ee:	2000      	movs	r0, #0
 80002f0:	f7ff ffd3 	bl	800029a <MoveCursor>

	//replace all characters with spaces
	TransmitCommand(0x42);
 80002f4:	2042      	movs	r0, #66	; 0x42
 80002f6:	f000 fae3 	bl	80008c0 <TransmitCommand>
	for (uint16_t i = 0; i < 1200; i++) {
 80002fa:	2300      	movs	r3, #0
 80002fc:	80fb      	strh	r3, [r7, #6]
 80002fe:	e005      	b.n	800030c <ClearScreen+0x26>
		TransmitCommandParameter(0x20);
 8000300:	2020      	movs	r0, #32
 8000302:	f000 fafb 	bl	80008fc <TransmitCommandParameter>
	for (uint16_t i = 0; i < 1200; i++) {
 8000306:	88fb      	ldrh	r3, [r7, #6]
 8000308:	3301      	adds	r3, #1
 800030a:	80fb      	strh	r3, [r7, #6]
 800030c:	88fb      	ldrh	r3, [r7, #6]
 800030e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000312:	d3f5      	bcc.n	8000300 <ClearScreen+0x1a>
	}
	MoveCursor(0, 0);
 8000314:	2100      	movs	r1, #0
 8000316:	2000      	movs	r0, #0
 8000318:	f7ff ffbf 	bl	800029a <MoveCursor>
}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <SaveCharacterToRAM>:
 * Saves each subcharacter to the SG RAM 1, in locations 0x80 to 0x8F
 * @Param bitmap: An array of the bitmap of that particular subcharacter
 * @Param offset: Some offset number
 * Returns: nothing
 */
void SaveCharacterToRAM(uint8_t *bitmap, uint8_t offset) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
	TransmitCommand(0x46);
 8000330:	2046      	movs	r0, #70	; 0x46
 8000332:	f000 fac5 	bl	80008c0 <TransmitCommand>
	TransmitCommandParameter(offset);
 8000336:	78fb      	ldrb	r3, [r7, #3]
 8000338:	4618      	mov	r0, r3
 800033a:	f000 fadf 	bl	80008fc <TransmitCommandParameter>
	TransmitCommandParameter(0x48);
 800033e:	2048      	movs	r0, #72	; 0x48
 8000340:	f000 fadc 	bl	80008fc <TransmitCommandParameter>
	TransmitCommand(0x42);
 8000344:	2042      	movs	r0, #66	; 0x42
 8000346:	f000 fabb 	bl	80008c0 <TransmitCommand>

	for (int i = 0; i < BYTEPERBITMAP; i++) {
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e009      	b.n	8000364 <SaveCharacterToRAM+0x40>
		TransmitCommandParameter(bitmap[i]);
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	4413      	add	r3, r2
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f000 facf 	bl	80008fc <TransmitCommandParameter>
	for (int i = 0; i < BYTEPERBITMAP; i++) {
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	3301      	adds	r3, #1
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	2b0f      	cmp	r3, #15
 8000368:	ddf2      	ble.n	8000350 <SaveCharacterToRAM+0x2c>
	}
}
 800036a:	bf00      	nop
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <CharacterBitMaps>:

/**
 * Writes custom bitmaps to the LCD screen RAM
 */
void CharacterBitMaps(void) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b0c2      	sub	sp, #264	; 0x108
 8000378:	af00      	add	r7, sp, #0
	uint8_t bitmap[16][BYTEPERBITMAP] = { { 0x7E, 0x7E, 0x60, 0x60, 0x60, 0x60,
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4a19      	ldr	r2, [pc, #100]	; (80003e4 <CharacterBitMaps+0x70>)
 800037e:	4618      	mov	r0, r3
 8000380:	4611      	mov	r1, r2
 8000382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000386:	461a      	mov	r2, r3
 8000388:	f002 fa68 	bl	800285c <memcpy>
			{ 0x00, 0x46, 0x46, 0x46, 0x66, 0x66, 0x66, 0x36, 0x36, 0x36, 0x0E,
					0x0E, 0x0E, 0x06, 0x06, 0x00 }, { 0xC0, 0xE0, 0x60, 0x30,
					0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x04, 0x06, 0x06, 0x06,
					0x07, 0x03 }, { 0x03, 0x07, 0x06, 0x06, 0x0C, 0x0C, 0x18,
					0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x60, 0xE0, 0xC0 } };
	TransmitCommand(0x5C);
 800038c:	205c      	movs	r0, #92	; 0x5c
 800038e:	f000 fa97 	bl	80008c0 <TransmitCommand>
	TransmitCommandParameter(0x00);
 8000392:	2000      	movs	r0, #0
 8000394:	f000 fab2 	bl	80008fc <TransmitCommandParameter>
	TransmitCommandParameter(0x40);
 8000398:	2040      	movs	r0, #64	; 0x40
 800039a:	f000 faaf 	bl	80008fc <TransmitCommandParameter>
	TransmitCommand(0x4C);
 800039e:	204c      	movs	r0, #76	; 0x4c
 80003a0:	f000 fa8e 	bl	80008c0 <TransmitCommand>

	for (uint8_t i = 0; i < 16; i++) {
 80003a4:	2300      	movs	r3, #0
 80003a6:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80003aa:	e011      	b.n	80003d0 <CharacterBitMaps+0x5c>
		SaveCharacterToRAM(bitmap[i], i * BYTEPERBITMAP);
 80003ac:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003b0:	1d3a      	adds	r2, r7, #4
 80003b2:	011b      	lsls	r3, r3, #4
 80003b4:	441a      	add	r2, r3
 80003b6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003ba:	011b      	lsls	r3, r3, #4
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	4619      	mov	r1, r3
 80003c0:	4610      	mov	r0, r2
 80003c2:	f7ff ffaf 	bl	8000324 <SaveCharacterToRAM>
	for (uint8_t i = 0; i < 16; i++) {
 80003c6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003ca:	3301      	adds	r3, #1
 80003cc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80003d0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003d4:	2b0f      	cmp	r3, #15
 80003d6:	d9e9      	bls.n	80003ac <CharacterBitMaps+0x38>
	}
}
 80003d8:	bf00      	nop
 80003da:	bf00      	nop
 80003dc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	0800290c 	.word	0x0800290c

080003e8 <OutputString>:
 * @Param Str[]: A string, "array of characters", whatever
 * @Param starting_x: x-coordinate to write the string to
 * @Param starting_y: y-coordinate to write the string to
 * Returns: nothing
 */
void OutputString(char Str[], uint8_t starting_x, uint8_t starting_y) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	460b      	mov	r3, r1
 80003f2:	70fb      	strb	r3, [r7, #3]
 80003f4:	4613      	mov	r3, r2
 80003f6:	70bb      	strb	r3, [r7, #2]
					{ 0x20, 0x20, 0x20, 0x20 }, { 0x20, 0x20, 0x2E, 0x20 }, {
							0x2E, 0x20, 0x2E, 0x20 }, { 0x87, 0x87, 0x86, 0x86 }, //SPACE, ., :, -
			};

	uint8_t temp;
	uint8_t x = starting_x;
 80003f8:	78fb      	ldrb	r3, [r7, #3]
 80003fa:	73bb      	strb	r3, [r7, #14]

	TransmitCommand(0x4C);                 //Set the cursor direction to "Right"
 80003fc:	204c      	movs	r0, #76	; 0x4c
 80003fe:	f000 fa5f 	bl	80008c0 <TransmitCommand>

	for (uint8_t c = 0; Str[c] != '\0'; c++)
 8000402:	2300      	movs	r3, #0
 8000404:	737b      	strb	r3, [r7, #13]
 8000406:	e069      	b.n	80004dc <OutputString+0xf4>
	// used to be for (uint8_t c = 0; c < Str[c] != '\0'; c++)
			{
		MoveCursor(x, starting_y);
 8000408:	78ba      	ldrb	r2, [r7, #2]
 800040a:	7bbb      	ldrb	r3, [r7, #14]
 800040c:	4611      	mov	r1, r2
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ff43 	bl	800029a <MoveCursor>
		temp = (uint8_t) Str[c];
 8000414:	7b7b      	ldrb	r3, [r7, #13]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	4413      	add	r3, r2
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	73fb      	strb	r3, [r7, #15]
		if (temp == 32) {
 800041e:	7bfb      	ldrb	r3, [r7, #15]
 8000420:	2b20      	cmp	r3, #32
 8000422:	d102      	bne.n	800042a <OutputString+0x42>
			temp = 36;                  //if character is " "
 8000424:	2324      	movs	r3, #36	; 0x24
 8000426:	73fb      	strb	r3, [r7, #15]
 8000428:	e025      	b.n	8000476 <OutputString+0x8e>
		} else if (temp == 58) {
 800042a:	7bfb      	ldrb	r3, [r7, #15]
 800042c:	2b3a      	cmp	r3, #58	; 0x3a
 800042e:	d102      	bne.n	8000436 <OutputString+0x4e>
			temp = 38;                  //if character is ":"
 8000430:	2326      	movs	r3, #38	; 0x26
 8000432:	73fb      	strb	r3, [r7, #15]
 8000434:	e01f      	b.n	8000476 <OutputString+0x8e>
		} else if (temp == 46) {
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	2b2e      	cmp	r3, #46	; 0x2e
 800043a:	d102      	bne.n	8000442 <OutputString+0x5a>
			temp = 37;                  //if character is "."
 800043c:	2325      	movs	r3, #37	; 0x25
 800043e:	73fb      	strb	r3, [r7, #15]
 8000440:	e019      	b.n	8000476 <OutputString+0x8e>
		} else if (temp == 45) {
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	2b2d      	cmp	r3, #45	; 0x2d
 8000446:	d102      	bne.n	800044e <OutputString+0x66>
			temp = 39;                  //if character is "-"
 8000448:	2327      	movs	r3, #39	; 0x27
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e013      	b.n	8000476 <OutputString+0x8e>
		} else if (temp <= 57) {
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	2b39      	cmp	r3, #57	; 0x39
 8000452:	d803      	bhi.n	800045c <OutputString+0x74>
			temp -= OFFSET_NUMERIC;     //if character is between "0" and "9"
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	3b16      	subs	r3, #22
 8000458:	73fb      	strb	r3, [r7, #15]
 800045a:	e00c      	b.n	8000476 <OutputString+0x8e>
		} else if (temp <= 90) {
 800045c:	7bfb      	ldrb	r3, [r7, #15]
 800045e:	2b5a      	cmp	r3, #90	; 0x5a
 8000460:	d803      	bhi.n	800046a <OutputString+0x82>
			temp -= OFFSET_CAPITAL;     //if character is between "A" and "Z"
 8000462:	7bfb      	ldrb	r3, [r7, #15]
 8000464:	3b41      	subs	r3, #65	; 0x41
 8000466:	73fb      	strb	r3, [r7, #15]
 8000468:	e005      	b.n	8000476 <OutputString+0x8e>
		} else if (temp <= 122) {
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	2b7a      	cmp	r3, #122	; 0x7a
 800046e:	d802      	bhi.n	8000476 <OutputString+0x8e>
			temp -= OFFSET_LOWCASE;     //if character is between "a" and "z"
 8000470:	7bfb      	ldrb	r3, [r7, #15]
 8000472:	3b61      	subs	r3, #97	; 0x61
 8000474:	73fb      	strb	r3, [r7, #15]
		 * |C D|
		 *  - -
		 * (4 subcharacters, in that order)     *
		 ***********************************/

		TransmitCommand(0x42);                      //print subcharacers A and B
 8000476:	2042      	movs	r0, #66	; 0x42
 8000478:	f000 fa22 	bl	80008c0 <TransmitCommand>
		TransmitCommandParameter(LOOKUPTABLE[temp][0]);
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	4a1d      	ldr	r2, [pc, #116]	; (80004f4 <OutputString+0x10c>)
 8000480:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fa39 	bl	80008fc <TransmitCommandParameter>
		TransmitCommandParameter(LOOKUPTABLE[temp][1]);
 800048a:	7bfb      	ldrb	r3, [r7, #15]
 800048c:	4a19      	ldr	r2, [pc, #100]	; (80004f4 <OutputString+0x10c>)
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	4413      	add	r3, r2
 8000492:	785b      	ldrb	r3, [r3, #1]
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fa31 	bl	80008fc <TransmitCommandParameter>

		MoveCursor(x, starting_y + 1);
 800049a:	78bb      	ldrb	r3, [r7, #2]
 800049c:	3301      	adds	r3, #1
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	7bbb      	ldrb	r3, [r7, #14]
 80004a2:	4611      	mov	r1, r2
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff fef8 	bl	800029a <MoveCursor>

		TransmitCommand(0x42);                 //print the subcharacters C and D
 80004aa:	2042      	movs	r0, #66	; 0x42
 80004ac:	f000 fa08 	bl	80008c0 <TransmitCommand>
		TransmitCommandParameter(LOOKUPTABLE[temp][2]);
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
 80004b2:	4a10      	ldr	r2, [pc, #64]	; (80004f4 <OutputString+0x10c>)
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	4413      	add	r3, r2
 80004b8:	789b      	ldrb	r3, [r3, #2]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fa1e 	bl	80008fc <TransmitCommandParameter>
		TransmitCommandParameter(LOOKUPTABLE[temp][3]);
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
 80004c2:	4a0c      	ldr	r2, [pc, #48]	; (80004f4 <OutputString+0x10c>)
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	4413      	add	r3, r2
 80004c8:	78db      	ldrb	r3, [r3, #3]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fa16 	bl	80008fc <TransmitCommandParameter>

		x += 3;
 80004d0:	7bbb      	ldrb	r3, [r7, #14]
 80004d2:	3303      	adds	r3, #3
 80004d4:	73bb      	strb	r3, [r7, #14]
	for (uint8_t c = 0; Str[c] != '\0'; c++)
 80004d6:	7b7b      	ldrb	r3, [r7, #13]
 80004d8:	3301      	adds	r3, #1
 80004da:	737b      	strb	r3, [r7, #13]
 80004dc:	7b7b      	ldrb	r3, [r7, #13]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d18f      	bne.n	8000408 <OutputString+0x20>
	}
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000d4 	.word	0x200000d4

080004f8 <OutputPaddedInteger>:
 *                    otherwise, the decimal will be on
 * @Param x: x-coordinate to write the character
 * @Param y: y-coordinate to write the character
 * Returns: nothing
 */
void OutputPaddedInteger(int32_t num, uint8_t dec, uint8_t x, uint8_t y) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	4608      	mov	r0, r1
 8000502:	4611      	mov	r1, r2
 8000504:	461a      	mov	r2, r3
 8000506:	4603      	mov	r3, r0
 8000508:	70fb      	strb	r3, [r7, #3]
 800050a:	460b      	mov	r3, r1
 800050c:	70bb      	strb	r3, [r7, #2]
 800050e:	4613      	mov	r3, r2
 8000510:	707b      	strb	r3, [r7, #1]
	uint8_t i;
	char str[5] = { ' ', ' ', ' ', ' ', '\0' };
 8000512:	4a37      	ldr	r2, [pc, #220]	; (80005f0 <OutputPaddedInteger+0xf8>)
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800051c:	6018      	str	r0, [r3, #0]
 800051e:	3304      	adds	r3, #4
 8000520:	7019      	strb	r1, [r3, #0]
	char decplace[2] = { ' ', '\0' };
 8000522:	2320      	movs	r3, #32
 8000524:	81bb      	strh	r3, [r7, #12]

	if (num < 0) {
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b00      	cmp	r3, #0
 800052a:	da05      	bge.n	8000538 <OutputPaddedInteger+0x40>
		str[0] = '-';
 800052c:	232d      	movs	r3, #45	; 0x2d
 800052e:	743b      	strb	r3, [r7, #16]
		num = -1 * num;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	425b      	negs	r3, r3
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	e004      	b.n	8000542 <OutputPaddedInteger+0x4a>
	} else if (num == 0) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d101      	bne.n	8000542 <OutputPaddedInteger+0x4a>
		str[3] = '0';
 800053e:	2330      	movs	r3, #48	; 0x30
 8000540:	74fb      	strb	r3, [r7, #19]
	}

	if (num > 999) {
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000548:	db02      	blt.n	8000550 <OutputPaddedInteger+0x58>
		num = 999;
 800054a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800054e:	607b      	str	r3, [r7, #4]
	}

	// Convert the integer digits into chars, one by one
	for (i = 3; num != 0; i--) {
 8000550:	2303      	movs	r3, #3
 8000552:	75fb      	strb	r3, [r7, #23]
 8000554:	e01e      	b.n	8000594 <OutputPaddedInteger+0x9c>
		str[i] = "0123456789"[num % 10];
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <OutputPaddedInteger+0xfc>)
 800055a:	fb83 2301 	smull	r2, r3, r3, r1
 800055e:	109a      	asrs	r2, r3, #2
 8000560:	17cb      	asrs	r3, r1, #31
 8000562:	1ad2      	subs	r2, r2, r3
 8000564:	4613      	mov	r3, r2
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	4413      	add	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	7dfb      	ldrb	r3, [r7, #23]
 8000570:	4921      	ldr	r1, [pc, #132]	; (80005f8 <OutputPaddedInteger+0x100>)
 8000572:	5c8a      	ldrb	r2, [r1, r2]
 8000574:	f107 0118 	add.w	r1, r7, #24
 8000578:	440b      	add	r3, r1
 800057a:	f803 2c08 	strb.w	r2, [r3, #-8]
		num = num / 10;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <OutputPaddedInteger+0xfc>)
 8000582:	fb82 1203 	smull	r1, r2, r2, r3
 8000586:	1092      	asrs	r2, r2, #2
 8000588:	17db      	asrs	r3, r3, #31
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	607b      	str	r3, [r7, #4]
	for (i = 3; num != 0; i--) {
 800058e:	7dfb      	ldrb	r3, [r7, #23]
 8000590:	3b01      	subs	r3, #1
 8000592:	75fb      	strb	r3, [r7, #23]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1dd      	bne.n	8000556 <OutputPaddedInteger+0x5e>
	}

	OutputString(str, x, y);
 800059a:	787a      	ldrb	r2, [r7, #1]
 800059c:	78b9      	ldrb	r1, [r7, #2]
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff ff20 	bl	80003e8 <OutputString>

	if (dec != -1) {
		//Output 1 decimal place
		OutputString(".", x + 12, y);
 80005a8:	78bb      	ldrb	r3, [r7, #2]
 80005aa:	330c      	adds	r3, #12
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	787a      	ldrb	r2, [r7, #1]
 80005b0:	4619      	mov	r1, r3
 80005b2:	4812      	ldr	r0, [pc, #72]	; (80005fc <OutputPaddedInteger+0x104>)
 80005b4:	f7ff ff18 	bl	80003e8 <OutputString>

		dec = dec % 10;
 80005b8:	78fa      	ldrb	r2, [r7, #3]
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <OutputPaddedInteger+0x108>)
 80005bc:	fba3 1302 	umull	r1, r3, r3, r2
 80005c0:	08d9      	lsrs	r1, r3, #3
 80005c2:	460b      	mov	r3, r1
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	440b      	add	r3, r1
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	70fb      	strb	r3, [r7, #3]

		decplace[0] = "0123456789"[dec];
 80005ce:	78fb      	ldrb	r3, [r7, #3]
 80005d0:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <OutputPaddedInteger+0x100>)
 80005d2:	5cd3      	ldrb	r3, [r2, r3]
 80005d4:	733b      	strb	r3, [r7, #12]
		OutputString(decplace, x + 15, y);
 80005d6:	78bb      	ldrb	r3, [r7, #2]
 80005d8:	330f      	adds	r3, #15
 80005da:	b2d9      	uxtb	r1, r3
 80005dc:	787a      	ldrb	r2, [r7, #1]
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff00 	bl	80003e8 <OutputString>
	}
}
 80005e8:	bf00      	nop
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	08002a10 	.word	0x08002a10
 80005f4:	66666667 	.word	0x66666667
 80005f8:	08002a18 	.word	0x08002a18
 80005fc:	08002a0c 	.word	0x08002a0c
 8000600:	cccccccd 	.word	0xcccccccd

08000604 <DisplayScreen>:
}

/**
 * Displays all information in a single screen
 */
void DisplayScreen(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
	ClearScreen();
 800060a:	f7ff fe6c 	bl	80002e6 <ClearScreen>

		// **TEMPORARY: DATA IS DISPLAYED 1 BY 1


	// Different code for each page allows for different designs
	switch (current_page) {
 800060e:	4b9d      	ldr	r3, [pc, #628]	; (8000884 <DisplayScreen+0x280>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d003      	beq.n	800061e <DisplayScreen+0x1a>
 8000616:	2b02      	cmp	r3, #2
 8000618:	f000 8095 	beq.w	8000746 <DisplayScreen+0x142>
			}
			break;

	}

}
 800061c:	e12d      	b.n	800087a <DisplayScreen+0x276>
			for (uint8_t i = 0; i < NUM_ROWS_PAGE1; i++) {
 800061e:	2300      	movs	r3, #0
 8000620:	75fb      	strb	r3, [r7, #23]
 8000622:	e08b      	b.n	800073c <DisplayScreen+0x138>
				int32_t output = 0;			// Used to store the output data which will be displayed after the switch statement
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]
				switch(i)
 8000628:	7dfb      	ldrb	r3, [r7, #23]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d84f      	bhi.n	80006ce <DisplayScreen+0xca>
 800062e:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <DisplayScreen+0x30>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	08000645 	.word	0x08000645
 8000638:	08000663 	.word	0x08000663
 800063c:	0800068f 	.word	0x0800068f
 8000640:	080006c3 	.word	0x080006c3
						convert.bytes[0] = DisplayDataArray[5].raw_data[0];
 8000644:	4b90      	ldr	r3, [pc, #576]	; (8000888 <DisplayScreen+0x284>)
 8000646:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800064a:	b25b      	sxtb	r3, r3
 800064c:	b2db      	uxtb	r3, r3
 800064e:	713b      	strb	r3, [r7, #4]
						convert.bytes[1] = DisplayDataArray[5].raw_data[1];
 8000650:	4b8d      	ldr	r3, [pc, #564]	; (8000888 <DisplayScreen+0x284>)
 8000652:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000656:	b25b      	sxtb	r3, r3
 8000658:	b2db      	uxtb	r3, r3
 800065a:	717b      	strb	r3, [r7, #5]
						output = convert.float_value;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	613b      	str	r3, [r7, #16]
						break;
 8000660:	e035      	b.n	80006ce <DisplayScreen+0xca>
						if (DisplayDataArray[6].raw_data[0] & 0B10000000)
 8000662:	4b89      	ldr	r3, [pc, #548]	; (8000888 <DisplayScreen+0x284>)
 8000664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000668:	b25b      	sxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	da09      	bge.n	8000682 <DisplayScreen+0x7e>
							output = (~(DisplayDataArray[6].raw_data[0]) & 0B01111111) - 127;
 800066e:	4b86      	ldr	r3, [pc, #536]	; (8000888 <DisplayScreen+0x284>)
 8000670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000674:	b25b      	sxtb	r3, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800067c:	3b7f      	subs	r3, #127	; 0x7f
 800067e:	613b      	str	r3, [r7, #16]
						break;
 8000680:	e025      	b.n	80006ce <DisplayScreen+0xca>
							output = DisplayDataArray[6].raw_data[0];
 8000682:	4b81      	ldr	r3, [pc, #516]	; (8000888 <DisplayScreen+0x284>)
 8000684:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000688:	b25b      	sxtb	r3, r3
 800068a:	613b      	str	r3, [r7, #16]
						break;
 800068c:	e01f      	b.n	80006ce <DisplayScreen+0xca>
						convert.bytes[0] = DisplayDataArray[2].raw_data[4];
 800068e:	4b7e      	ldr	r3, [pc, #504]	; (8000888 <DisplayScreen+0x284>)
 8000690:	7e9b      	ldrb	r3, [r3, #26]
 8000692:	b25b      	sxtb	r3, r3
 8000694:	b2db      	uxtb	r3, r3
 8000696:	713b      	strb	r3, [r7, #4]
						convert.bytes[1] = DisplayDataArray[2].raw_data[5];
 8000698:	4b7b      	ldr	r3, [pc, #492]	; (8000888 <DisplayScreen+0x284>)
 800069a:	7edb      	ldrb	r3, [r3, #27]
 800069c:	b25b      	sxtb	r3, r3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	717b      	strb	r3, [r7, #5]
						convert.bytes[2] = DisplayDataArray[2].raw_data[6];
 80006a2:	4b79      	ldr	r3, [pc, #484]	; (8000888 <DisplayScreen+0x284>)
 80006a4:	7f1b      	ldrb	r3, [r3, #28]
 80006a6:	b25b      	sxtb	r3, r3
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	71bb      	strb	r3, [r7, #6]
						convert.bytes[3] = DisplayDataArray[2].raw_data[7];
 80006ac:	4b76      	ldr	r3, [pc, #472]	; (8000888 <DisplayScreen+0x284>)
 80006ae:	7f5b      	ldrb	r3, [r3, #29]
 80006b0:	b25b      	sxtb	r3, r3
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	71fb      	strb	r3, [r7, #7]
						output = convert.float_value * ((int8_t)18/5);
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	4613      	mov	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	613b      	str	r3, [r7, #16]
						break;
 80006c0:	e005      	b.n	80006ce <DisplayScreen+0xca>
						output = DisplayDataArray[6].raw_data[0];
 80006c2:	4b71      	ldr	r3, [pc, #452]	; (8000888 <DisplayScreen+0x284>)
 80006c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	613b      	str	r3, [r7, #16]
						break;
 80006cc:	bf00      	nop
				OutputString(DisplayLayoutPage1[i].name, 0,	DisplayLayoutPage1[i].ypos);
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	4a6e      	ldr	r2, [pc, #440]	; (800088c <DisplayScreen+0x288>)
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	4413      	add	r3, r2
 80006d6:	6818      	ldr	r0, [r3, #0]
 80006d8:	7dfb      	ldrb	r3, [r7, #23]
 80006da:	4a6c      	ldr	r2, [pc, #432]	; (800088c <DisplayScreen+0x288>)
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	4413      	add	r3, r2
 80006e0:	330c      	adds	r3, #12
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f7ff fe7e 	bl	80003e8 <OutputString>
				OutputPaddedInteger(output, -1, DisplayLayoutPage1[i].data_xpos, DisplayLayoutPage1[i].ypos);
 80006ec:	7dfb      	ldrb	r3, [r7, #23]
 80006ee:	4a67      	ldr	r2, [pc, #412]	; (800088c <DisplayScreen+0x288>)
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	4413      	add	r3, r2
 80006f4:	330a      	adds	r3, #10
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	7dfb      	ldrb	r3, [r7, #23]
 80006fa:	4964      	ldr	r1, [pc, #400]	; (800088c <DisplayScreen+0x288>)
 80006fc:	011b      	lsls	r3, r3, #4
 80006fe:	440b      	add	r3, r1
 8000700:	330c      	adds	r3, #12
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	21ff      	movs	r1, #255	; 0xff
 8000706:	6938      	ldr	r0, [r7, #16]
 8000708:	f7ff fef6 	bl	80004f8 <OutputPaddedInteger>
				OutputString(DisplayLayoutPage1[i].unit, DisplayLayoutPage1[i].unit_xpos, DisplayLayoutPage1[i].ypos);
 800070c:	7dfb      	ldrb	r3, [r7, #23]
 800070e:	4a5f      	ldr	r2, [pc, #380]	; (800088c <DisplayScreen+0x288>)
 8000710:	011b      	lsls	r3, r3, #4
 8000712:	4413      	add	r3, r2
 8000714:	3304      	adds	r3, #4
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	4a5c      	ldr	r2, [pc, #368]	; (800088c <DisplayScreen+0x288>)
 800071c:	011b      	lsls	r3, r3, #4
 800071e:	4413      	add	r3, r2
 8000720:	330b      	adds	r3, #11
 8000722:	7819      	ldrb	r1, [r3, #0]
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	4a59      	ldr	r2, [pc, #356]	; (800088c <DisplayScreen+0x288>)
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	4413      	add	r3, r2
 800072c:	330c      	adds	r3, #12
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	f7ff fe59 	bl	80003e8 <OutputString>
			for (uint8_t i = 0; i < NUM_ROWS_PAGE1; i++) {
 8000736:	7dfb      	ldrb	r3, [r7, #23]
 8000738:	3301      	adds	r3, #1
 800073a:	75fb      	strb	r3, [r7, #23]
 800073c:	7dfb      	ldrb	r3, [r7, #23]
 800073e:	2b03      	cmp	r3, #3
 8000740:	f67f af70 	bls.w	8000624 <DisplayScreen+0x20>
			break;
 8000744:	e099      	b.n	800087a <DisplayScreen+0x276>
			for (uint8_t i = 0; i < NUM_ROWS_PAGE2; i++) {
 8000746:	2300      	movs	r3, #0
 8000748:	73fb      	strb	r3, [r7, #15]
 800074a:	e091      	b.n	8000870 <DisplayScreen+0x26c>
				int32_t output = 0;			// Used to store the output data which will be displayed after the switch statement
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
				switch(i)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2b03      	cmp	r3, #3
 8000754:	d855      	bhi.n	8000802 <DisplayScreen+0x1fe>
 8000756:	a201      	add	r2, pc, #4	; (adr r2, 800075c <DisplayScreen+0x158>)
 8000758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075c:	0800076d 	.word	0x0800076d
 8000760:	0800079b 	.word	0x0800079b
 8000764:	080007c9 	.word	0x080007c9
 8000768:	080007e7 	.word	0x080007e7
						convert.bytes[0] = DisplayDataArray[2].raw_data[0];
 800076c:	4b46      	ldr	r3, [pc, #280]	; (8000888 <DisplayScreen+0x284>)
 800076e:	7d9b      	ldrb	r3, [r3, #22]
 8000770:	b25b      	sxtb	r3, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	703b      	strb	r3, [r7, #0]
						convert.bytes[1] = DisplayDataArray[2].raw_data[1];
 8000776:	4b44      	ldr	r3, [pc, #272]	; (8000888 <DisplayScreen+0x284>)
 8000778:	7ddb      	ldrb	r3, [r3, #23]
 800077a:	b25b      	sxtb	r3, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	707b      	strb	r3, [r7, #1]
						convert.bytes[2] = DisplayDataArray[2].raw_data[2];
 8000780:	4b41      	ldr	r3, [pc, #260]	; (8000888 <DisplayScreen+0x284>)
 8000782:	7e1b      	ldrb	r3, [r3, #24]
 8000784:	b25b      	sxtb	r3, r3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	70bb      	strb	r3, [r7, #2]
						convert.bytes[3] = DisplayDataArray[2].raw_data[3];
 800078a:	4b3f      	ldr	r3, [pc, #252]	; (8000888 <DisplayScreen+0x284>)
 800078c:	7e5b      	ldrb	r3, [r3, #25]
 800078e:	b25b      	sxtb	r3, r3
 8000790:	b2db      	uxtb	r3, r3
 8000792:	70fb      	strb	r3, [r7, #3]
						output = convert.float_value;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	60bb      	str	r3, [r7, #8]
						break;
 8000798:	e033      	b.n	8000802 <DisplayScreen+0x1fe>
						convert.bytes[0] = DisplayDataArray[2].raw_data[0];
 800079a:	4b3b      	ldr	r3, [pc, #236]	; (8000888 <DisplayScreen+0x284>)
 800079c:	7d9b      	ldrb	r3, [r3, #22]
 800079e:	b25b      	sxtb	r3, r3
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	703b      	strb	r3, [r7, #0]
						convert.bytes[1] = DisplayDataArray[2].raw_data[1];
 80007a4:	4b38      	ldr	r3, [pc, #224]	; (8000888 <DisplayScreen+0x284>)
 80007a6:	7ddb      	ldrb	r3, [r3, #23]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	707b      	strb	r3, [r7, #1]
						convert.bytes[2] = DisplayDataArray[2].raw_data[2];
 80007ae:	4b36      	ldr	r3, [pc, #216]	; (8000888 <DisplayScreen+0x284>)
 80007b0:	7e1b      	ldrb	r3, [r3, #24]
 80007b2:	b25b      	sxtb	r3, r3
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	70bb      	strb	r3, [r7, #2]
						convert.bytes[3] = DisplayDataArray[2].raw_data[3];
 80007b8:	4b33      	ldr	r3, [pc, #204]	; (8000888 <DisplayScreen+0x284>)
 80007ba:	7e5b      	ldrb	r3, [r3, #25]
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	70fb      	strb	r3, [r7, #3]
						output = convert.float_value;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	60bb      	str	r3, [r7, #8]
						break;
 80007c6:	e01c      	b.n	8000802 <DisplayScreen+0x1fe>
						if (DisplayDataArray[4].raw_data[0] & 0B00000001)
 80007c8:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <DisplayScreen+0x284>)
 80007ca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d002      	beq.n	80007e0 <DisplayScreen+0x1dc>
							output = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	60bb      	str	r3, [r7, #8]
						break;
 80007de:	e010      	b.n	8000802 <DisplayScreen+0x1fe>
							output = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
						break;
 80007e4:	e00d      	b.n	8000802 <DisplayScreen+0x1fe>
						if (DisplayDataArray[0].raw_data[0] & 0B0000010)
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <DisplayScreen+0x284>)
 80007e8:	789b      	ldrb	r3, [r3, #2]
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <DisplayScreen+0x1f8>
							output = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	60bb      	str	r3, [r7, #8]
						break;
 80007fa:	e001      	b.n	8000800 <DisplayScreen+0x1fc>
							output = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
						break;
 8000800:	bf00      	nop
				OutputString(DisplayLayoutPage2[i].name, 0,	DisplayLayoutPage2[i].ypos);
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	4a22      	ldr	r2, [pc, #136]	; (8000890 <DisplayScreen+0x28c>)
 8000806:	011b      	lsls	r3, r3, #4
 8000808:	4413      	add	r3, r2
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	4a20      	ldr	r2, [pc, #128]	; (8000890 <DisplayScreen+0x28c>)
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	4413      	add	r3, r2
 8000814:	330c      	adds	r3, #12
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f7ff fde4 	bl	80003e8 <OutputString>
				OutputPaddedInteger(output, -1, DisplayLayoutPage2[i].data_xpos, DisplayLayoutPage2[i].ypos);
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <DisplayScreen+0x28c>)
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	4413      	add	r3, r2
 8000828:	330a      	adds	r3, #10
 800082a:	781a      	ldrb	r2, [r3, #0]
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	4918      	ldr	r1, [pc, #96]	; (8000890 <DisplayScreen+0x28c>)
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	440b      	add	r3, r1
 8000834:	330c      	adds	r3, #12
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	21ff      	movs	r1, #255	; 0xff
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f7ff fe5c 	bl	80004f8 <OutputPaddedInteger>
				OutputString(DisplayLayoutPage2[i].unit, DisplayLayoutPage2[i].unit_xpos, DisplayLayoutPage2[i].ypos);
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	4a13      	ldr	r2, [pc, #76]	; (8000890 <DisplayScreen+0x28c>)
 8000844:	011b      	lsls	r3, r3, #4
 8000846:	4413      	add	r3, r2
 8000848:	3304      	adds	r3, #4
 800084a:	6818      	ldr	r0, [r3, #0]
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <DisplayScreen+0x28c>)
 8000850:	011b      	lsls	r3, r3, #4
 8000852:	4413      	add	r3, r2
 8000854:	330b      	adds	r3, #11
 8000856:	7819      	ldrb	r1, [r3, #0]
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <DisplayScreen+0x28c>)
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	4413      	add	r3, r2
 8000860:	330c      	adds	r3, #12
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	f7ff fdbf 	bl	80003e8 <OutputString>
			for (uint8_t i = 0; i < NUM_ROWS_PAGE2; i++) {
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	3301      	adds	r3, #1
 800086e:	73fb      	strb	r3, [r7, #15]
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	2b03      	cmp	r3, #3
 8000874:	f67f af6a 	bls.w	800074c <DisplayScreen+0x148>
			break;
 8000878:	bf00      	nop
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000000 	.word	0x20000000
 8000888:	20000084 	.word	0x20000084
 800088c:	20000004 	.word	0x20000004
 8000890:	20000044 	.word	0x20000044

08000894 <WriteByteToDataBus>:
/**
 * Write a byte of data through C3 to C10(Data Buses)
 * @Param byte: 1 byte code
 * Returns: nothing
 */
void WriteByteToDataBus(uint8_t byte) {
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = byte << 3;
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	00da      	lsls	r2, r3, #3
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <WriteByteToDataBus+0x28>)
 80008a4:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = ((uint8_t) (~byte)) << 3;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	43db      	mvns	r3, r3
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	00da      	lsls	r2, r3, #3
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <WriteByteToDataBus+0x28>)
 80008b0:	615a      	str	r2, [r3, #20]
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	40011000 	.word	0x40011000

080008c0 <TransmitCommand>:
/**
 * Writes a byte of command code through ports C3 to C10(Data Buses)
 * @Param command_code: 1 byte command code
 * returns: nothing
 */
void TransmitCommand(uint8_t command_code) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = 0x1UL << 0;                   //SET C0 to HIGH
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <TransmitCommand+0x38>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = 0x1UL << 1;                    //SET C1 to LOW
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <TransmitCommand+0x38>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(command_code);
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ffdb 	bl	8000894 <WriteByteToDataBus>
	MicrosecondDelay(1);
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff fcbe 	bl	8000260 <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;                   //SET C1 to HIGH
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <TransmitCommand+0x38>)
 80008e6:	2202      	movs	r2, #2
 80008e8:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f7ff fcb8 	bl	8000260 <MicrosecondDelay>
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40011000 	.word	0x40011000

080008fc <TransmitCommandParameter>:
/**
 * Writes a byte of parameter code through ports C3 to C10(Data Buses)
 * @Param parameter_code: 1 byte parameter code
 * returns: nothing
 */
void TransmitCommandParameter(uint8_t parameter_code) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	GPIOC->BRR = 0x1UL << 0;                    //SET C0 to LOW
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <TransmitCommandParameter+0x38>)
 8000908:	2201      	movs	r2, #1
 800090a:	615a      	str	r2, [r3, #20]
	GPIOC->BRR = 0x1UL << 1;                    //SET C1 to LOW
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <TransmitCommandParameter+0x38>)
 800090e:	2202      	movs	r2, #2
 8000910:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(parameter_code);
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ffbd 	bl	8000894 <WriteByteToDataBus>
	MicrosecondDelay(1);
 800091a:	2001      	movs	r0, #1
 800091c:	f7ff fca0 	bl	8000260 <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;                   //SET C1 to HIGH
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <TransmitCommandParameter+0x38>)
 8000922:	2202      	movs	r2, #2
 8000924:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff fc9a 	bl	8000260 <MicrosecondDelay>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40011000 	.word	0x40011000

08000938 <ScreenSetup>:
}

/**
 * Initialise screen settings and character bit maps
 */
void ScreenSetup(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	// system setup (section 6-2-1 on raio datasheet)
	TransmitCommand(0x40);
 800093c:	2040      	movs	r0, #64	; 0x40
 800093e:	f7ff ffbf 	bl	80008c0 <TransmitCommand>
	Delay(5);
 8000942:	2005      	movs	r0, #5
 8000944:	f7ff fc6e 	bl	8000224 <Delay>
	// 0 0 IV 1 W/S M2 M1 M0
	TransmitCommandParameter(0x34);
 8000948:	2034      	movs	r0, #52	; 0x34
 800094a:	f7ff ffd7 	bl	80008fc <TransmitCommandParameter>
	// WF 0 0 0 0 FX FX FX
	TransmitCommandParameter(0x87);
 800094e:	2087      	movs	r0, #135	; 0x87
 8000950:	f7ff ffd4 	bl	80008fc <TransmitCommandParameter>
	// 0 0 0 0 FY FY FY FY
	TransmitCommandParameter(0xF);
 8000954:	200f      	movs	r0, #15
 8000956:	f7ff ffd1 	bl	80008fc <TransmitCommandParameter>
	// C/R (horizontal bytes per line)
	TransmitCommandParameter(39);
 800095a:	2027      	movs	r0, #39	; 0x27
 800095c:	f7ff ffce 	bl	80008fc <TransmitCommandParameter>
	// TC/R (horizontal bytes per line, incl blanking)
	TransmitCommandParameter(47);
 8000960:	202f      	movs	r0, #47	; 0x2f
 8000962:	f7ff ffcb 	bl	80008fc <TransmitCommandParameter>
	// L/F (lines per frame)
	TransmitCommandParameter(239);
 8000966:	20ef      	movs	r0, #239	; 0xef
 8000968:	f7ff ffc8 	bl	80008fc <TransmitCommandParameter>
	// APL (horizontal address range, LSB)
	TransmitCommandParameter(40);
 800096c:	2028      	movs	r0, #40	; 0x28
 800096e:	f7ff ffc5 	bl	80008fc <TransmitCommandParameter>
	// APH (horizontal address range, MSB)
	TransmitCommandParameter(0);
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff ffc2 	bl	80008fc <TransmitCommandParameter>

	// scroll parameters
	TransmitCommand(0x44);
 8000978:	2044      	movs	r0, #68	; 0x44
 800097a:	f7ff ffa1 	bl	80008c0 <TransmitCommand>
	TransmitCommandParameter(0); // SAD 1L
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ffbc 	bl	80008fc <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 1H
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff ffb9 	bl	80008fc <TransmitCommandParameter>
	TransmitCommandParameter(240); // SL1
 800098a:	20f0      	movs	r0, #240	; 0xf0
 800098c:	f7ff ffb6 	bl	80008fc <TransmitCommandParameter>
	TransmitCommandParameter(176); // SAD 2L
 8000990:	20b0      	movs	r0, #176	; 0xb0
 8000992:	f7ff ffb3 	bl	80008fc <TransmitCommandParameter>
	TransmitCommandParameter(4); // SAD 2H
 8000996:	2004      	movs	r0, #4
 8000998:	f7ff ffb0 	bl	80008fc <TransmitCommandParameter>
	TransmitCommandParameter(240); // SL2
 800099c:	20f0      	movs	r0, #240	; 0xf0
 800099e:	f7ff ffad 	bl	80008fc <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 3L
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff ffaa 	bl	80008fc <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 3H
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff ffa7 	bl	80008fc <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 4
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff ffa4 	bl	80008fc <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 4
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff ffa1 	bl	80008fc <TransmitCommandParameter>

	TransmitCommand(0x5B);
 80009ba:	205b      	movs	r0, #91	; 0x5b
 80009bc:	f7ff ff80 	bl	80008c0 <TransmitCommand>
	TransmitCommandParameter(0);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff ff9b 	bl	80008fc <TransmitCommandParameter>

	// set horizontal scroll position
	TransmitCommand(0x5A);
 80009c6:	205a      	movs	r0, #90	; 0x5a
 80009c8:	f7ff ff7a 	bl	80008c0 <TransmitCommand>
	TransmitCommandParameter(0);
 80009cc:	2000      	movs	r0, #0
 80009ce:	f7ff ff95 	bl	80008fc <TransmitCommandParameter>

	// set display overlay format
	TransmitCommand(0x5B);
 80009d2:	205b      	movs	r0, #91	; 0x5b
 80009d4:	f7ff ff74 	bl	80008c0 <TransmitCommand>
	TransmitCommandParameter(0);
 80009d8:	2000      	movs	r0, #0
 80009da:	f7ff ff8f 	bl	80008fc <TransmitCommandParameter>

	// turn off the display and configure cursor
	TransmitCommand(0x58);
 80009de:	2058      	movs	r0, #88	; 0x58
 80009e0:	f7ff ff6e 	bl	80008c0 <TransmitCommand>
	TransmitCommandParameter(0x57);
 80009e4:	2057      	movs	r0, #87	; 0x57
 80009e6:	f7ff ff89 	bl	80008fc <TransmitCommandParameter>

	// set cursor size & type
	TransmitCommand(0x5D);
 80009ea:	205d      	movs	r0, #93	; 0x5d
 80009ec:	f7ff ff68 	bl	80008c0 <TransmitCommand>
	TransmitCommandParameter(4);
 80009f0:	2004      	movs	r0, #4
 80009f2:	f7ff ff83 	bl	80008fc <TransmitCommandParameter>
	TransmitCommandParameter(0x84);
 80009f6:	2084      	movs	r0, #132	; 0x84
 80009f8:	f7ff ff80 	bl	80008fc <TransmitCommandParameter>

	// set cursor direction
	TransmitCommand(0x4C);
 80009fc:	204c      	movs	r0, #76	; 0x4c
 80009fe:	f7ff ff5f 	bl	80008c0 <TransmitCommand>

	// turn on the display and configure cursor
	TransmitCommand(0x59);
 8000a02:	2059      	movs	r0, #89	; 0x59
 8000a04:	f7ff ff5c 	bl	80008c0 <TransmitCommand>
	TransmitCommandParameter(0x7);
 8000a08:	2007      	movs	r0, #7
 8000a0a:	f7ff ff77 	bl	80008fc <TransmitCommandParameter>

	CharacterBitMaps();
 8000a0e:	f7ff fcb1 	bl	8000374 <CharacterBitMaps>

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <CanFilterSetup>:
 * @brief Initialize CAN node for sending and receiving
 * @param: CAN filter structure
 * @retval: nothing
 */
void CanFilterSetup()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	// Use mask and list mode to filter IDs from the CAN ID BOM

	// Filter for 0x500 and 0x600 IDs
    CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 8000a1c:	4b23      	ldr	r3, [pc, #140]	; (8000aac <CanFilterSetup+0x94>)
 8000a1e:	f24a 0220 	movw	r2, #40992	; 0xa020
 8000a22:	601a      	str	r2, [r3, #0]
    CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <CanFilterSetup+0x94>)
 8000a26:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 8000a2a:	609a      	str	r2, [r3, #8]

    CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <CanFilterSetup+0x94>)
 8000a2e:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 8000a32:	605a      	str	r2, [r3, #4]
    CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <CanFilterSetup+0x94>)
 8000a36:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000a3a:	60da      	str	r2, [r3, #12]

    CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <CanFilterSetup+0x94>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
    CAN_filter0.FilterBank = (uint32_t) 0;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <CanFilterSetup+0x94>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
    CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <CanFilterSetup+0x94>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
    CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <CanFilterSetup+0x94>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	61da      	str	r2, [r3, #28]
    CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <CanFilterSetup+0x94>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	621a      	str	r2, [r3, #32]

    // Remaining IDs filtered with list mode
    CAN_filter1.FilterIdHigh = (uint16_t) (0x401 << 5);
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <CanFilterSetup+0x98>)
 8000a5c:	f248 0220 	movw	r2, #32800	; 0x8020
 8000a60:	601a      	str	r2, [r3, #0]
    CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <CanFilterSetup+0x98>)
 8000a64:	f248 0220 	movw	r2, #32800	; 0x8020
 8000a68:	609a      	str	r2, [r3, #8]

    CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <CanFilterSetup+0x98>)
 8000a6c:	f248 0220 	movw	r2, #32800	; 0x8020
 8000a70:	605a      	str	r2, [r3, #4]
    CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <CanFilterSetup+0x98>)
 8000a74:	f248 0220 	movw	r2, #32800	; 0x8020
 8000a78:	60da      	str	r2, [r3, #12]

    CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <CanFilterSetup+0x98>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
    CAN_filter1.FilterBank = (uint32_t) 1;
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <CanFilterSetup+0x98>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	615a      	str	r2, [r3, #20]
    CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <CanFilterSetup+0x98>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	619a      	str	r2, [r3, #24]
    CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <CanFilterSetup+0x98>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
    CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <CanFilterSetup+0x98>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	621a      	str	r2, [r3, #32]

	// Configure reception filters
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 8000a98:	4904      	ldr	r1, [pc, #16]	; (8000aac <CanFilterSetup+0x94>)
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <CanFilterSetup+0x9c>)
 8000a9c:	f000 fbaf 	bl	80011fe <HAL_CAN_ConfigFilter>
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 8000aa0:	4903      	ldr	r1, [pc, #12]	; (8000ab0 <CanFilterSetup+0x98>)
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <CanFilterSetup+0x9c>)
 8000aa4:	f000 fbab 	bl	80011fe <HAL_CAN_ConfigFilter>

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200001fc 	.word	0x200001fc
 8000ab0:	200001d4 	.word	0x200001d4
 8000ab4:	200001a4 	.word	0x200001a4

08000ab8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_CAN_Init+0x64>)
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <MX_CAN_Init+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_CAN_Init+0x64>)
 8000ac4:	220c      	movs	r2, #12
 8000ac6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_CAN_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_CAN_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_CAN_Init+0x64>)
 8000ad6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000ada:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_CAN_Init+0x64>)
 8000ade:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ae2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <MX_CAN_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_CAN_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_CAN_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_CAN_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_CAN_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_CAN_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_CAN_Init+0x64>)
 8000b0a:	f000 fa7d 	bl	8001008 <HAL_CAN_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000b14:	f000 f981 	bl	8000e1a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200001a4 	.word	0x200001a4
 8000b20:	40006400 	.word	0x40006400

08000b24 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a29      	ldr	r2, [pc, #164]	; (8000be4 <HAL_CAN_MspInit+0xc0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d14b      	bne.n	8000bdc <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <HAL_CAN_MspInit+0xc4>)
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	4a27      	ldr	r2, [pc, #156]	; (8000be8 <HAL_CAN_MspInit+0xc4>)
 8000b4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b4e:	61d3      	str	r3, [r2, #28]
 8000b50:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <HAL_CAN_MspInit+0xc4>)
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <HAL_CAN_MspInit+0xc4>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <HAL_CAN_MspInit+0xc4>)
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <HAL_CAN_MspInit+0xc4>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4818      	ldr	r0, [pc, #96]	; (8000bec <HAL_CAN_MspInit+0xc8>)
 8000b8a:	f001 f8af 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4812      	ldr	r0, [pc, #72]	; (8000bec <HAL_CAN_MspInit+0xc8>)
 8000ba4:	f001 f8a2 	bl	8001cec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_CAN_MspInit+0xcc>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_CAN_MspInit+0xcc>)
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2014      	movs	r0, #20
 8000bd2:	f001 f854 	bl	8001c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000bd6:	2014      	movs	r0, #20
 8000bd8:	f001 f86d 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40006400 	.word	0x40006400
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010c00 	.word	0x40010c00
 8000bf0:	40010000 	.word	0x40010000

08000bf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <MX_GPIO_Init+0xb4>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a26      	ldr	r2, [pc, #152]	; (8000ca8 <MX_GPIO_Init+0xb4>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <MX_GPIO_Init+0xb4>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_GPIO_Init+0xb4>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a20      	ldr	r2, [pc, #128]	; (8000ca8 <MX_GPIO_Init+0xb4>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_GPIO_Init+0xb4>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_GPIO_Init+0xb4>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <MX_GPIO_Init+0xb4>)
 8000c3e:	f043 0308 	orr.w	r3, r3, #8
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_GPIO_Init+0xb4>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 8000c50:	2200      	movs	r2, #0
 8000c52:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000c56:	4815      	ldr	r0, [pc, #84]	; (8000cac <MX_GPIO_Init+0xb8>)
 8000c58:	f001 f9dc 	bl	8002014 <HAL_GPIO_WritePin>
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A6_GPIO_Port, A6_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <MX_GPIO_Init+0xbc>)
 8000c62:	f001 f9d7 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 8000c66:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c6a:	613b      	str	r3, [r7, #16]
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480b      	ldr	r0, [pc, #44]	; (8000cac <MX_GPIO_Init+0xb8>)
 8000c80:	f001 f834 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A6_Pin;
 8000c84:	2340      	movs	r3, #64	; 0x40
 8000c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A6_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_GPIO_Init+0xbc>)
 8000c9c:	f001 f826 	bl	8001cec <HAL_GPIO_Init>

}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40011000 	.word	0x40011000
 8000cb0:	40010800 	.word	0x40010800

08000cb4 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	// Set message flag to 1 so that the update display task can execute
	receive_flag = 0x01;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	200001a0 	.word	0x200001a0

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000cd6:	f000 f935 	bl	8000f44 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000cda:	f000 f85d 	bl	8000d98 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000cde:	f7ff ff89 	bl	8000bf4 <MX_GPIO_Init>
    MX_CAN_Init();
 8000ce2:	f7ff fee9 	bl	8000ab8 <MX_CAN_Init>
    /* USER CODE BEGIN 2 */

    // CAN initialization
    CanFilterSetup();
 8000ce6:	f7ff fe97 	bl	8000a18 <CanFilterSetup>
    HAL_CAN_Start(&hcan);
 8000cea:	4826      	ldr	r0, [pc, #152]	; (8000d84 <main+0xb4>)
 8000cec:	f000 fb50 	bl	8001390 <HAL_CAN_Start>

    // LCD initialization
    ScreenSetup();
 8000cf0:	f7ff fe22 	bl	8000938 <ScreenSetup>
    ClearScreen();
 8000cf4:	f7ff faf7 	bl	80002e6 <ClearScreen>
    DisplayScreen();
 8000cf8:	f7ff fc84 	bl	8000604 <DisplayScreen>
            DisplayScreen(); // template page display logic moved temporarily into this function
        }
        */

        // Check if message is available
        if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4821      	ldr	r0, [pc, #132]	; (8000d84 <main+0xb4>)
 8000d00:	f000 fc9b 	bl	800163a <HAL_CAN_GetRxFifoFillLevel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d037      	beq.n	8000d7a <main+0xaa>
        {
            // Populate CAN header and data variables
            HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &CAN_rx_header, CAN_rx_data);
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <main+0xb8>)
 8000d0c:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <main+0xbc>)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	481c      	ldr	r0, [pc, #112]	; (8000d84 <main+0xb4>)
 8000d12:	f000 fb81 	bl	8001418 <HAL_CAN_GetRxMessage>

            // Find the matching data that needs to be updated
            for (uint8_t struct_index = 0; struct_index < NUM_CAN_IDS; struct_index++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	e029      	b.n	8000d70 <main+0xa0>
            {
                if (DisplayDataArray[struct_index].can_id == CAN_rx_header.StdId)
 8000d1c:	79fa      	ldrb	r2, [r7, #7]
 8000d1e:	491c      	ldr	r1, [pc, #112]	; (8000d90 <main+0xc0>)
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	440b      	add	r3, r1
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <main+0xbc>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d119      	bne.n	8000d6a <main+0x9a>
                {
                    for (int data_index = 0; data_index < 8; data_index++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	e013      	b.n	8000d64 <main+0x94>
                    {
                        DisplayDataArray[struct_index].raw_data[data_index] = CAN_rx_data[data_index];
 8000d3c:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <main+0xb8>)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	79fa      	ldrb	r2, [r7, #7]
 8000d46:	b258      	sxtb	r0, r3
 8000d48:	4911      	ldr	r1, [pc, #68]	; (8000d90 <main+0xc0>)
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	18ca      	adds	r2, r1, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	701a      	strb	r2, [r3, #0]
                    for (int data_index = 0; data_index < 8; data_index++)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	dde8      	ble.n	8000d3c <main+0x6c>
            for (uint8_t struct_index = 0; struct_index < NUM_CAN_IDS; struct_index++)
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d9d2      	bls.n	8000d1c <main+0x4c>
                    }
                }
            }

            // Display screen with updated parameters
    		DisplayScreen();
 8000d76:	f7ff fc45 	bl	8000604 <DisplayScreen>
        }

        // Displaying finished, wait for the next interrupt
        receive_flag = 0x00;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <main+0xc4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
        if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0)
 8000d80:	e7bc      	b.n	8000cfc <main+0x2c>
 8000d82:	bf00      	nop
 8000d84:	200001a4 	.word	0x200001a4
 8000d88:	200001cc 	.word	0x200001cc
 8000d8c:	20000224 	.word	0x20000224
 8000d90:	20000084 	.word	0x20000084
 8000d94:	200001a0 	.word	0x200001a0

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b090      	sub	sp, #64	; 0x40
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 0318 	add.w	r3, r7, #24
 8000da2:	2228      	movs	r2, #40	; 0x28
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fd66 	bl	8002878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000dce:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd4:	f107 0318 	add.w	r3, r7, #24
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 f933 	bl	8002044 <HAL_RCC_OscConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000de4:	f000 f819 	bl	8000e1a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de8:	230f      	movs	r3, #15
 8000dea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dec:	2302      	movs	r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2102      	movs	r1, #2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fb9e 	bl	8002544 <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e0e:	f000 f804 	bl	8000e1a <Error_Handler>
  }
}
 8000e12:	bf00      	nop
 8000e14:	3740      	adds	r7, #64	; 0x40
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1e:	b672      	cpsid	i
}
 8000e20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <Error_Handler+0x8>

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6193      	str	r3, [r2, #24]
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	61d3      	str	r3, [r2, #28]
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_MspInit+0x60>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_MspInit+0x60>)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010000 	.word	0x40010000

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ece:	f000 f87f 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ede:	f000 fbd3 	bl	8001688 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200001a4 	.word	0x200001a4

08000eec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ef8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000efa:	e003      	b.n	8000f04 <LoopCopyDataInit>

08000efc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000efe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f02:	3104      	adds	r1, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f04:	480a      	ldr	r0, [pc, #40]	; (8000f30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f0c:	d3f6      	bcc.n	8000efc <CopyDataInit>
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f10:	e002      	b.n	8000f18 <LoopFillZerobss>

08000f12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f14:	f842 3b04 	str.w	r3, [r2], #4

08000f18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f1c:	d3f9      	bcc.n	8000f12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f1e:	f7ff ffe5 	bl	8000eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f22:	f001 fc77 	bl	8002814 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f26:	f7ff fed3 	bl	8000cd0 <main>
  bx lr
 8000f2a:	4770      	bx	lr
  ldr r3, =_sidata
 8000f2c:	08002a54 	.word	0x08002a54
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f34:	20000184 	.word	0x20000184
  ldr r2, =_sbss
 8000f38:	20000184 	.word	0x20000184
  ldr r3, = _ebss
 8000f3c:	20000244 	.word	0x20000244

08000f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC1_2_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_Init+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_Init+0x28>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 fe87 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff ff60 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fe9f 	bl	8001cd2 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 fe67 	bl	8001c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000178 	.word	0x20000178
 8000fc8:	20000180 	.word	0x20000180
 8000fcc:	2000017c 	.word	0x2000017c

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a03      	ldr	r2, [pc, #12]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000180 	.word	0x20000180
 8000ff0:	20000240 	.word	0x20000240

08000ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <HAL_GetTick+0x10>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	20000240 	.word	0x20000240

08001008 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e0ed      	b.n	80011f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d102      	bne.n	800102c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff fd7c 	bl	8000b24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0202 	bic.w	r2, r2, #2
 800103a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800103c:	f7ff ffda 	bl	8000ff4 <HAL_GetTick>
 8001040:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001042:	e012      	b.n	800106a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001044:	f7ff ffd6 	bl	8000ff4 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b0a      	cmp	r3, #10
 8001050:	d90b      	bls.n	800106a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2205      	movs	r2, #5
 8001062:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e0c5      	b.n	80011f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1e5      	bne.n	8001044 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0201 	orr.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001088:	f7ff ffb4 	bl	8000ff4 <HAL_GetTick>
 800108c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800108e:	e012      	b.n	80010b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001090:	f7ff ffb0 	bl	8000ff4 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b0a      	cmp	r3, #10
 800109c:	d90b      	bls.n	80010b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2205      	movs	r2, #5
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e09f      	b.n	80011f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0e5      	beq.n	8001090 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7e1b      	ldrb	r3, [r3, #24]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d108      	bne.n	80010de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e007      	b.n	80010ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7e5b      	ldrb	r3, [r3, #25]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d108      	bne.n	8001108 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e007      	b.n	8001118 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001116:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7e9b      	ldrb	r3, [r3, #26]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d108      	bne.n	8001132 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0220 	orr.w	r2, r2, #32
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	e007      	b.n	8001142 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0220 	bic.w	r2, r2, #32
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7edb      	ldrb	r3, [r3, #27]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d108      	bne.n	800115c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 0210 	bic.w	r2, r2, #16
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e007      	b.n	800116c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0210 	orr.w	r2, r2, #16
 800116a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7f1b      	ldrb	r3, [r3, #28]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d108      	bne.n	8001186 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0208 	orr.w	r2, r2, #8
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e007      	b.n	8001196 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0208 	bic.w	r2, r2, #8
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7f5b      	ldrb	r3, [r3, #29]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d108      	bne.n	80011b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0204 	orr.w	r2, r2, #4
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e007      	b.n	80011c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0204 	bic.w	r2, r2, #4
 80011be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	ea42 0103 	orr.w	r1, r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	1e5a      	subs	r2, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80011fe:	b480      	push	{r7}
 8001200:	b087      	sub	sp, #28
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001214:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001216:	7cfb      	ldrb	r3, [r7, #19]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d003      	beq.n	8001224 <HAL_CAN_ConfigFilter+0x26>
 800121c:	7cfb      	ldrb	r3, [r7, #19]
 800121e:	2b02      	cmp	r3, #2
 8001220:	f040 80aa 	bne.w	8001378 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800122a:	f043 0201 	orr.w	r2, r3, #1
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f003 031f 	and.w	r3, r3, #31
 800123c:	2201      	movs	r2, #1
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43db      	mvns	r3, r3
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d123      	bne.n	80012a6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43db      	mvns	r3, r3
 8001268:	401a      	ands	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001280:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3248      	adds	r2, #72	; 0x48
 8001286:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800129a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800129c:	6979      	ldr	r1, [r7, #20]
 800129e:	3348      	adds	r3, #72	; 0x48
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d122      	bne.n	80012f4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	431a      	orrs	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3248      	adds	r2, #72	; 0x48
 80012d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ea:	6979      	ldr	r1, [r7, #20]
 80012ec:	3348      	adds	r3, #72	; 0x48
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	440b      	add	r3, r1
 80012f2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d109      	bne.n	8001310 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43db      	mvns	r3, r3
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800130e:	e007      	b.n	8001320 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	431a      	orrs	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d109      	bne.n	800133c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800133a:	e007      	b.n	800134c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d107      	bne.n	8001364 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	431a      	orrs	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800136a:	f023 0201 	bic.w	r2, r3, #1
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	e006      	b.n	8001386 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
  }
}
 8001386:	4618      	mov	r0, r3
 8001388:	371c      	adds	r7, #28
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d12e      	bne.n	8001402 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2202      	movs	r2, #2
 80013a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013bc:	f7ff fe1a 	bl	8000ff4 <HAL_GetTick>
 80013c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013c2:	e012      	b.n	80013ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013c4:	f7ff fe16 	bl	8000ff4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b0a      	cmp	r3, #10
 80013d0:	d90b      	bls.n	80013ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2205      	movs	r2, #5
 80013e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e012      	b.n	8001410 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e5      	bne.n	80013c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	e006      	b.n	8001410 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
  }
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001418:	b480      	push	{r7}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800142c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800142e:	7dfb      	ldrb	r3, [r7, #23]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d003      	beq.n	800143c <HAL_CAN_GetRxMessage+0x24>
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	2b02      	cmp	r3, #2
 8001438:	f040 80f3 	bne.w	8001622 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10e      	bne.n	8001460 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d116      	bne.n	800147e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0e7      	b.n	8001630 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d107      	bne.n	800147e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0d8      	b.n	8001630 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	331b      	adds	r3, #27
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	4413      	add	r3, r2
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0204 	and.w	r2, r3, #4
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10c      	bne.n	80014b6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	331b      	adds	r3, #27
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	4413      	add	r3, r2
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	0d5b      	lsrs	r3, r3, #21
 80014ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e00b      	b.n	80014ce <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	331b      	adds	r3, #27
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	4413      	add	r3, r2
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	08db      	lsrs	r3, r3, #3
 80014c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	331b      	adds	r3, #27
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	4413      	add	r3, r2
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0202 	and.w	r2, r3, #2
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	331b      	adds	r3, #27
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	4413      	add	r3, r2
 80014f0:	3304      	adds	r3, #4
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 020f 	and.w	r2, r3, #15
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	331b      	adds	r3, #27
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	4413      	add	r3, r2
 8001508:	3304      	adds	r3, #4
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	b2da      	uxtb	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	331b      	adds	r3, #27
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	4413      	add	r3, r2
 8001520:	3304      	adds	r3, #4
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	0c1b      	lsrs	r3, r3, #16
 8001526:	b29a      	uxth	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	4413      	add	r3, r2
 8001536:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	4413      	add	r3, r2
 800154c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	0a1a      	lsrs	r2, r3, #8
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	4413      	add	r3, r2
 8001566:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0c1a      	lsrs	r2, r3, #16
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	3302      	adds	r3, #2
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	4413      	add	r3, r2
 8001580:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	0e1a      	lsrs	r2, r3, #24
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3303      	adds	r3, #3
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	4413      	add	r3, r2
 800159a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	3304      	adds	r3, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0a1a      	lsrs	r2, r3, #8
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	3305      	adds	r3, #5
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	0c1a      	lsrs	r2, r3, #16
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	3306      	adds	r3, #6
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	4413      	add	r3, r2
 80015e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	0e1a      	lsrs	r2, r3, #24
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	3307      	adds	r3, #7
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d108      	bne.n	800160e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0220 	orr.w	r2, r2, #32
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	e007      	b.n	800161e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0220 	orr.w	r2, r2, #32
 800161c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e006      	b.n	8001630 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
  }
}
 8001630:	4618      	mov	r0, r3
 8001632:	371c      	adds	r7, #28
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800163a:	b480      	push	{r7}
 800163c:	b085      	sub	sp, #20
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d002      	beq.n	800165c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001656:	7afb      	ldrb	r3, [r7, #11]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d10f      	bne.n	800167c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	e005      	b.n	800167c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800167c:	68fb      	ldr	r3, [r7, #12]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d07c      	beq.n	80017c8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d023      	beq.n	8001720 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f983 	bl	80019f6 <HAL_CAN_TxMailbox0CompleteCallback>
 80016f0:	e016      	b.n	8001720 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
 8001704:	e00c      	b.n	8001720 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
 8001718:	e002      	b.n	8001720 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f986 	bl	8001a2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d024      	beq.n	8001774 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001732:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f962 	bl	8001a08 <HAL_CAN_TxMailbox1CompleteCallback>
 8001744:	e016      	b.n	8001774 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
 8001758:	e00c      	b.n	8001774 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
 800176c:	e002      	b.n	8001774 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f965 	bl	8001a3e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d024      	beq.n	80017c8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001786:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f941 	bl	8001a1a <HAL_CAN_TxMailbox2CompleteCallback>
 8001798:	e016      	b.n	80017c8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
 80017ac:	e00c      	b.n	80017c8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
 80017c0:	e002      	b.n	80017c8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f944 	bl	8001a50 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00c      	beq.n	80017ec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2210      	movs	r2, #16
 80017ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2208      	movs	r2, #8
 8001806:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f92a 	bl	8001a62 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d009      	beq.n	800182c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fa44 	bl	8000cb4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00c      	beq.n	8001850 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	d007      	beq.n	8001850 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001846:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2210      	movs	r2, #16
 800184e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2208      	movs	r2, #8
 800186a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f90a 	bl	8001a86 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b00      	cmp	r3, #0
 800187a:	d009      	beq.n	8001890 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f8f2 	bl	8001a74 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2210      	movs	r2, #16
 80018aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f8f3 	bl	8001a98 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00b      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2208      	movs	r2, #8
 80018cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f8eb 	bl	8001aaa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d07b      	beq.n	80019d6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d072      	beq.n	80019ce <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800190a:	2b00      	cmp	r3, #0
 800190c:	d008      	beq.n	8001920 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001926:	2b00      	cmp	r3, #0
 8001928:	d008      	beq.n	800193c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001942:	2b00      	cmp	r3, #0
 8001944:	d043      	beq.n	80019ce <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800194c:	2b00      	cmp	r3, #0
 800194e:	d03e      	beq.n	80019ce <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001956:	2b60      	cmp	r3, #96	; 0x60
 8001958:	d02b      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x32a>
 800195a:	2b60      	cmp	r3, #96	; 0x60
 800195c:	d82e      	bhi.n	80019bc <HAL_CAN_IRQHandler+0x334>
 800195e:	2b50      	cmp	r3, #80	; 0x50
 8001960:	d022      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x320>
 8001962:	2b50      	cmp	r3, #80	; 0x50
 8001964:	d82a      	bhi.n	80019bc <HAL_CAN_IRQHandler+0x334>
 8001966:	2b40      	cmp	r3, #64	; 0x40
 8001968:	d019      	beq.n	800199e <HAL_CAN_IRQHandler+0x316>
 800196a:	2b40      	cmp	r3, #64	; 0x40
 800196c:	d826      	bhi.n	80019bc <HAL_CAN_IRQHandler+0x334>
 800196e:	2b30      	cmp	r3, #48	; 0x30
 8001970:	d010      	beq.n	8001994 <HAL_CAN_IRQHandler+0x30c>
 8001972:	2b30      	cmp	r3, #48	; 0x30
 8001974:	d822      	bhi.n	80019bc <HAL_CAN_IRQHandler+0x334>
 8001976:	2b10      	cmp	r3, #16
 8001978:	d002      	beq.n	8001980 <HAL_CAN_IRQHandler+0x2f8>
 800197a:	2b20      	cmp	r3, #32
 800197c:	d005      	beq.n	800198a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800197e:	e01d      	b.n	80019bc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	f043 0308 	orr.w	r3, r3, #8
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001988:	e019      	b.n	80019be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	f043 0310 	orr.w	r3, r3, #16
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001992:	e014      	b.n	80019be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	f043 0320 	orr.w	r3, r3, #32
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800199c:	e00f      	b.n	80019be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019a6:	e00a      	b.n	80019be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019b0:	e005      	b.n	80019be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019ba:	e000      	b.n	80019be <HAL_CAN_IRQHandler+0x336>
            break;
 80019bc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	699a      	ldr	r2, [r3, #24]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019cc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2204      	movs	r2, #4
 80019d4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f867 	bl	8001abc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
	...

08001ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	60d3      	str	r3, [r2, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <__NVIC_GetPriorityGrouping+0x18>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f003 0307 	and.w	r3, r3, #7
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db0b      	blt.n	8001b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4906      	ldr	r1, [pc, #24]	; (8001b68 <__NVIC_EnableIRQ+0x34>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2001      	movs	r0, #1
 8001b56:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100

08001b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0a      	blt.n	8001b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	490c      	ldr	r1, [pc, #48]	; (8001bb8 <__NVIC_SetPriority+0x4c>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b94:	e00a      	b.n	8001bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4908      	ldr	r1, [pc, #32]	; (8001bbc <__NVIC_SetPriority+0x50>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3b04      	subs	r3, #4
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	761a      	strb	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf28      	it	cs
 8001bde:	2304      	movcs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3304      	adds	r3, #4
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <NVIC_EncodePriority+0x30>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b03      	subs	r3, #3
 8001bee:	e000      	b.n	8001bf2 <NVIC_EncodePriority+0x32>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	4313      	orrs	r3, r2
         );
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	; 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c34:	d301      	bcc.n	8001c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <SysTick_Config+0x40>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c42:	210f      	movs	r1, #15
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f7ff ff90 	bl	8001b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <SysTick_Config+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <SysTick_Config+0x40>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff2d 	bl	8001ad0 <__NVIC_SetPriorityGrouping>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c90:	f7ff ff42 	bl	8001b18 <__NVIC_GetPriorityGrouping>
 8001c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f7ff ff90 	bl	8001bc0 <NVIC_EncodePriority>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff5f 	bl	8001b6c <__NVIC_SetPriority>
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff35 	bl	8001b34 <__NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffa2 	bl	8001c24 <SysTick_Config>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b08b      	sub	sp, #44	; 0x2c
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfe:	e179      	b.n	8001ff4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d00:	2201      	movs	r2, #1
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	f040 8168 	bne.w	8001fee <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4aa0      	ldr	r2, [pc, #640]	; (8001fa4 <HAL_GPIO_Init+0x2b8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d05e      	beq.n	8001de6 <HAL_GPIO_Init+0xfa>
 8001d28:	4a9e      	ldr	r2, [pc, #632]	; (8001fa4 <HAL_GPIO_Init+0x2b8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d875      	bhi.n	8001e1a <HAL_GPIO_Init+0x12e>
 8001d2e:	4a9e      	ldr	r2, [pc, #632]	; (8001fa8 <HAL_GPIO_Init+0x2bc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d058      	beq.n	8001de6 <HAL_GPIO_Init+0xfa>
 8001d34:	4a9c      	ldr	r2, [pc, #624]	; (8001fa8 <HAL_GPIO_Init+0x2bc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d86f      	bhi.n	8001e1a <HAL_GPIO_Init+0x12e>
 8001d3a:	4a9c      	ldr	r2, [pc, #624]	; (8001fac <HAL_GPIO_Init+0x2c0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d052      	beq.n	8001de6 <HAL_GPIO_Init+0xfa>
 8001d40:	4a9a      	ldr	r2, [pc, #616]	; (8001fac <HAL_GPIO_Init+0x2c0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d869      	bhi.n	8001e1a <HAL_GPIO_Init+0x12e>
 8001d46:	4a9a      	ldr	r2, [pc, #616]	; (8001fb0 <HAL_GPIO_Init+0x2c4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d04c      	beq.n	8001de6 <HAL_GPIO_Init+0xfa>
 8001d4c:	4a98      	ldr	r2, [pc, #608]	; (8001fb0 <HAL_GPIO_Init+0x2c4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d863      	bhi.n	8001e1a <HAL_GPIO_Init+0x12e>
 8001d52:	4a98      	ldr	r2, [pc, #608]	; (8001fb4 <HAL_GPIO_Init+0x2c8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d046      	beq.n	8001de6 <HAL_GPIO_Init+0xfa>
 8001d58:	4a96      	ldr	r2, [pc, #600]	; (8001fb4 <HAL_GPIO_Init+0x2c8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d85d      	bhi.n	8001e1a <HAL_GPIO_Init+0x12e>
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d82a      	bhi.n	8001db8 <HAL_GPIO_Init+0xcc>
 8001d62:	2b12      	cmp	r3, #18
 8001d64:	d859      	bhi.n	8001e1a <HAL_GPIO_Init+0x12e>
 8001d66:	a201      	add	r2, pc, #4	; (adr r2, 8001d6c <HAL_GPIO_Init+0x80>)
 8001d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6c:	08001de7 	.word	0x08001de7
 8001d70:	08001dc1 	.word	0x08001dc1
 8001d74:	08001dd3 	.word	0x08001dd3
 8001d78:	08001e15 	.word	0x08001e15
 8001d7c:	08001e1b 	.word	0x08001e1b
 8001d80:	08001e1b 	.word	0x08001e1b
 8001d84:	08001e1b 	.word	0x08001e1b
 8001d88:	08001e1b 	.word	0x08001e1b
 8001d8c:	08001e1b 	.word	0x08001e1b
 8001d90:	08001e1b 	.word	0x08001e1b
 8001d94:	08001e1b 	.word	0x08001e1b
 8001d98:	08001e1b 	.word	0x08001e1b
 8001d9c:	08001e1b 	.word	0x08001e1b
 8001da0:	08001e1b 	.word	0x08001e1b
 8001da4:	08001e1b 	.word	0x08001e1b
 8001da8:	08001e1b 	.word	0x08001e1b
 8001dac:	08001e1b 	.word	0x08001e1b
 8001db0:	08001dc9 	.word	0x08001dc9
 8001db4:	08001ddd 	.word	0x08001ddd
 8001db8:	4a7f      	ldr	r2, [pc, #508]	; (8001fb8 <HAL_GPIO_Init+0x2cc>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dbe:	e02c      	b.n	8001e1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	623b      	str	r3, [r7, #32]
          break;
 8001dc6:	e029      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	623b      	str	r3, [r7, #32]
          break;
 8001dd0:	e024      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	3308      	adds	r3, #8
 8001dd8:	623b      	str	r3, [r7, #32]
          break;
 8001dda:	e01f      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	330c      	adds	r3, #12
 8001de2:	623b      	str	r3, [r7, #32]
          break;
 8001de4:	e01a      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dee:	2304      	movs	r3, #4
 8001df0:	623b      	str	r3, [r7, #32]
          break;
 8001df2:	e013      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d105      	bne.n	8001e08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	611a      	str	r2, [r3, #16]
          break;
 8001e06:	e009      	b.n	8001e1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	615a      	str	r2, [r3, #20]
          break;
 8001e12:	e003      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
          break;
 8001e18:	e000      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          break;
 8001e1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2bff      	cmp	r3, #255	; 0xff
 8001e20:	d801      	bhi.n	8001e26 <HAL_GPIO_Init+0x13a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	e001      	b.n	8001e2a <HAL_GPIO_Init+0x13e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2bff      	cmp	r3, #255	; 0xff
 8001e30:	d802      	bhi.n	8001e38 <HAL_GPIO_Init+0x14c>
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	e002      	b.n	8001e3e <HAL_GPIO_Init+0x152>
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	3b08      	subs	r3, #8
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	210f      	movs	r1, #15
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	401a      	ands	r2, r3
 8001e50:	6a39      	ldr	r1, [r7, #32]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 80c1 	beq.w	8001fee <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4a52      	ldr	r2, [pc, #328]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6193      	str	r3, [r2, #24]
 8001e78:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e84:	4a4e      	ldr	r2, [pc, #312]	; (8001fc0 <HAL_GPIO_Init+0x2d4>)
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	089b      	lsrs	r3, r3, #2
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a46      	ldr	r2, [pc, #280]	; (8001fc4 <HAL_GPIO_Init+0x2d8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d01f      	beq.n	8001ef0 <HAL_GPIO_Init+0x204>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a45      	ldr	r2, [pc, #276]	; (8001fc8 <HAL_GPIO_Init+0x2dc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d019      	beq.n	8001eec <HAL_GPIO_Init+0x200>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a44      	ldr	r2, [pc, #272]	; (8001fcc <HAL_GPIO_Init+0x2e0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <HAL_GPIO_Init+0x1fc>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a43      	ldr	r2, [pc, #268]	; (8001fd0 <HAL_GPIO_Init+0x2e4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00d      	beq.n	8001ee4 <HAL_GPIO_Init+0x1f8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a42      	ldr	r2, [pc, #264]	; (8001fd4 <HAL_GPIO_Init+0x2e8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <HAL_GPIO_Init+0x1f4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a41      	ldr	r2, [pc, #260]	; (8001fd8 <HAL_GPIO_Init+0x2ec>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d101      	bne.n	8001edc <HAL_GPIO_Init+0x1f0>
 8001ed8:	2305      	movs	r3, #5
 8001eda:	e00a      	b.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001edc:	2306      	movs	r3, #6
 8001ede:	e008      	b.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	e006      	b.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e004      	b.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e002      	b.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef4:	f002 0203 	and.w	r2, r2, #3
 8001ef8:	0092      	lsls	r2, r2, #2
 8001efa:	4093      	lsls	r3, r2
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f02:	492f      	ldr	r1, [pc, #188]	; (8001fc0 <HAL_GPIO_Init+0x2d4>)
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f1c:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	492e      	ldr	r1, [pc, #184]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	492a      	ldr	r1, [pc, #168]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4924      	ldr	r1, [pc, #144]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4920      	ldr	r1, [pc, #128]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	491a      	ldr	r1, [pc, #104]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4916      	ldr	r1, [pc, #88]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d025      	beq.n	8001fe0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	4910      	ldr	r1, [pc, #64]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
 8001fa0:	e025      	b.n	8001fee <HAL_GPIO_Init+0x302>
 8001fa2:	bf00      	nop
 8001fa4:	10320000 	.word	0x10320000
 8001fa8:	10310000 	.word	0x10310000
 8001fac:	10220000 	.word	0x10220000
 8001fb0:	10210000 	.word	0x10210000
 8001fb4:	10120000 	.word	0x10120000
 8001fb8:	10110000 	.word	0x10110000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	40010800 	.word	0x40010800
 8001fc8:	40010c00 	.word	0x40010c00
 8001fcc:	40011000 	.word	0x40011000
 8001fd0:	40011400 	.word	0x40011400
 8001fd4:	40011800 	.word	0x40011800
 8001fd8:	40011c00 	.word	0x40011c00
 8001fdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	4909      	ldr	r1, [pc, #36]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f47f ae7e 	bne.w	8001d00 <HAL_GPIO_Init+0x14>
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	372c      	adds	r7, #44	; 0x2c
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	40010400 	.word	0x40010400

08002014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
 8002020:	4613      	mov	r3, r2
 8002022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002024:	787b      	ldrb	r3, [r7, #1]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002030:	e003      	b.n	800203a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	041a      	lsls	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	611a      	str	r2, [r3, #16]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e26c      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8087 	beq.w	8002172 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002064:	4b92      	ldr	r3, [pc, #584]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b04      	cmp	r3, #4
 800206e:	d00c      	beq.n	800208a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002070:	4b8f      	ldr	r3, [pc, #572]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b08      	cmp	r3, #8
 800207a:	d112      	bne.n	80020a2 <HAL_RCC_OscConfig+0x5e>
 800207c:	4b8c      	ldr	r3, [pc, #560]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002088:	d10b      	bne.n	80020a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208a:	4b89      	ldr	r3, [pc, #548]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d06c      	beq.n	8002170 <HAL_RCC_OscConfig+0x12c>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d168      	bne.n	8002170 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e246      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x76>
 80020ac:	4b80      	ldr	r3, [pc, #512]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a7f      	ldr	r2, [pc, #508]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	e02e      	b.n	8002118 <HAL_RCC_OscConfig+0xd4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x98>
 80020c2:	4b7b      	ldr	r3, [pc, #492]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a7a      	ldr	r2, [pc, #488]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b78      	ldr	r3, [pc, #480]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a77      	ldr	r2, [pc, #476]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e01d      	b.n	8002118 <HAL_RCC_OscConfig+0xd4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0xbc>
 80020e6:	4b72      	ldr	r3, [pc, #456]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a71      	ldr	r2, [pc, #452]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a6e      	ldr	r2, [pc, #440]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e00b      	b.n	8002118 <HAL_RCC_OscConfig+0xd4>
 8002100:	4b6b      	ldr	r3, [pc, #428]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6a      	ldr	r2, [pc, #424]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b68      	ldr	r3, [pc, #416]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a67      	ldr	r2, [pc, #412]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002116:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7fe ff68 	bl	8000ff4 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002128:	f7fe ff64 	bl	8000ff4 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e1fa      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b5d      	ldr	r3, [pc, #372]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0xe4>
 8002146:	e014      	b.n	8002172 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe ff54 	bl	8000ff4 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7fe ff50 	bl	8000ff4 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1e6      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x10c>
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d063      	beq.n	8002246 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800217e:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00b      	beq.n	80021a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800218a:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b08      	cmp	r3, #8
 8002194:	d11c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x18c>
 8002196:	4b46      	ldr	r3, [pc, #280]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d116      	bne.n	80021d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	4b43      	ldr	r3, [pc, #268]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_RCC_OscConfig+0x176>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e1ba      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4939      	ldr	r1, [pc, #228]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ce:	e03a      	b.n	8002246 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d8:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe ff09 	bl	8000ff4 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e6:	f7fe ff05 	bl	8000ff4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e19b      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f8:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4927      	ldr	r1, [pc, #156]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
 8002218:	e015      	b.n	8002246 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_OscConfig+0x270>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7fe fee8 	bl	8000ff4 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002228:	f7fe fee4 	bl	8000ff4 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e17a      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d03a      	beq.n	80022c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d019      	beq.n	800228e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002260:	f7fe fec8 	bl	8000ff4 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002268:	f7fe fec4 	bl	8000ff4 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e15a      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002286:	2001      	movs	r0, #1
 8002288:	f000 faa6 	bl	80027d8 <RCC_Delay>
 800228c:	e01c      	b.n	80022c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002294:	f7fe feae 	bl	8000ff4 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229a:	e00f      	b.n	80022bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229c:	f7fe feaa 	bl	8000ff4 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d908      	bls.n	80022bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e140      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	42420000 	.word	0x42420000
 80022b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	4b9e      	ldr	r3, [pc, #632]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e9      	bne.n	800229c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80a6 	beq.w	8002422 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022da:	4b97      	ldr	r3, [pc, #604]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10d      	bne.n	8002302 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	4b94      	ldr	r3, [pc, #592]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	4a93      	ldr	r2, [pc, #588]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f0:	61d3      	str	r3, [r2, #28]
 80022f2:	4b91      	ldr	r3, [pc, #580]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fe:	2301      	movs	r3, #1
 8002300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002302:	4b8e      	ldr	r3, [pc, #568]	; (800253c <HAL_RCC_OscConfig+0x4f8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d118      	bne.n	8002340 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230e:	4b8b      	ldr	r3, [pc, #556]	; (800253c <HAL_RCC_OscConfig+0x4f8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a8a      	ldr	r2, [pc, #552]	; (800253c <HAL_RCC_OscConfig+0x4f8>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231a:	f7fe fe6b 	bl	8000ff4 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002322:	f7fe fe67 	bl	8000ff4 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b64      	cmp	r3, #100	; 0x64
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e0fd      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	4b81      	ldr	r3, [pc, #516]	; (800253c <HAL_RCC_OscConfig+0x4f8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x312>
 8002348:	4b7b      	ldr	r3, [pc, #492]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4a7a      	ldr	r2, [pc, #488]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6213      	str	r3, [r2, #32]
 8002354:	e02d      	b.n	80023b2 <HAL_RCC_OscConfig+0x36e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x334>
 800235e:	4b76      	ldr	r3, [pc, #472]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a75      	ldr	r2, [pc, #468]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4b73      	ldr	r3, [pc, #460]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a72      	ldr	r2, [pc, #456]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	e01c      	b.n	80023b2 <HAL_RCC_OscConfig+0x36e>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b05      	cmp	r3, #5
 800237e:	d10c      	bne.n	800239a <HAL_RCC_OscConfig+0x356>
 8002380:	4b6d      	ldr	r3, [pc, #436]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a6c      	ldr	r2, [pc, #432]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	4b6a      	ldr	r3, [pc, #424]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a69      	ldr	r2, [pc, #420]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	e00b      	b.n	80023b2 <HAL_RCC_OscConfig+0x36e>
 800239a:	4b67      	ldr	r3, [pc, #412]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4a66      	ldr	r2, [pc, #408]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6213      	str	r3, [r2, #32]
 80023a6:	4b64      	ldr	r3, [pc, #400]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a63      	ldr	r2, [pc, #396]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d015      	beq.n	80023e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7fe fe1b 	bl	8000ff4 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe fe17 	bl	8000ff4 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e0ab      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	4b57      	ldr	r3, [pc, #348]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0ee      	beq.n	80023c2 <HAL_RCC_OscConfig+0x37e>
 80023e4:	e014      	b.n	8002410 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e6:	f7fe fe05 	bl	8000ff4 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7fe fe01 	bl	8000ff4 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e095      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	4b4c      	ldr	r3, [pc, #304]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1ee      	bne.n	80023ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d105      	bne.n	8002422 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002416:	4b48      	ldr	r3, [pc, #288]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	4a47      	ldr	r2, [pc, #284]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002420:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8081 	beq.w	800252e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800242c:	4b42      	ldr	r3, [pc, #264]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d061      	beq.n	80024fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d146      	bne.n	80024ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002440:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_RCC_OscConfig+0x4fc>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7fe fdd5 	bl	8000ff4 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244e:	f7fe fdd1 	bl	8000ff4 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e067      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002460:	4b35      	ldr	r3, [pc, #212]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002474:	d108      	bne.n	8002488 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002476:	4b30      	ldr	r3, [pc, #192]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	492d      	ldr	r1, [pc, #180]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002488:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a19      	ldr	r1, [r3, #32]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	430b      	orrs	r3, r1
 800249a:	4927      	ldr	r1, [pc, #156]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <HAL_RCC_OscConfig+0x4fc>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fe fda5 	bl	8000ff4 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ae:	f7fe fda1 	bl	8000ff4 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e037      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c0:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x46a>
 80024cc:	e02f      	b.n	800252e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ce:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <HAL_RCC_OscConfig+0x4fc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fd8e 	bl	8000ff4 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fe fd8a 	bl	8000ff4 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e020      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x498>
 80024fa:	e018      	b.n	800252e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e013      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	429a      	cmp	r2, r3
 800251a:	d106      	bne.n	800252a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	40007000 	.word	0x40007000
 8002540:	42420060 	.word	0x42420060

08002544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0d0      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002558:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d910      	bls.n	8002588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b67      	ldr	r3, [pc, #412]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 0207 	bic.w	r2, r3, #7
 800256e:	4965      	ldr	r1, [pc, #404]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0b8      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a58      	ldr	r2, [pc, #352]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	494d      	ldr	r1, [pc, #308]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d040      	beq.n	8002664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d115      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e073      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e06b      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002622:	4b39      	ldr	r3, [pc, #228]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4936      	ldr	r1, [pc, #216]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002634:	f7fe fcde 	bl	8000ff4 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	e00a      	b.n	8002652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7fe fcda 	bl	8000ff4 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e053      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 020c 	and.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1eb      	bne.n	800263c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d210      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0207 	bic.w	r2, r3, #7
 800267a:	4922      	ldr	r1, [pc, #136]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e032      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4916      	ldr	r1, [pc, #88]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	490e      	ldr	r1, [pc, #56]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026d2:	f000 f821 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80026d6:	4602      	mov	r2, r0
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	490a      	ldr	r1, [pc, #40]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026e4:	5ccb      	ldrb	r3, [r1, r3]
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1cc>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1d0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fc3c 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40022000 	.word	0x40022000
 8002708:	40021000 	.word	0x40021000
 800270c:	08002a3c 	.word	0x08002a3c
 8002710:	20000178 	.word	0x20000178
 8002714:	2000017c 	.word	0x2000017c

08002718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	b490      	push	{r4, r7}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002720:	1d3c      	adds	r4, r7, #4
 8002722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002728:	f240 2301 	movw	r3, #513	; 0x201
 800272c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d002      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x40>
 8002752:	2b08      	cmp	r3, #8
 8002754:	d003      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x46>
 8002756:	e02d      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800275a:	623b      	str	r3, [r7, #32]
      break;
 800275c:	e02d      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	0c9b      	lsrs	r3, r3, #18
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800276a:	4413      	add	r3, r2
 800276c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002770:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800277c:	4b13      	ldr	r3, [pc, #76]	; (80027cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	0c5b      	lsrs	r3, r3, #17
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800278a:	4413      	add	r3, r2
 800278c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002790:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002796:	fb02 f203 	mul.w	r2, r2, r3
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
 80027a2:	e004      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027a8:	fb02 f303 	mul.w	r3, r2, r3
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	623b      	str	r3, [r7, #32]
      break;
 80027b2:	e002      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b6:	623b      	str	r3, [r7, #32]
      break;
 80027b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ba:	6a3b      	ldr	r3, [r7, #32]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3728      	adds	r7, #40	; 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc90      	pop	{r4, r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	08002a2c 	.word	0x08002a2c
 80027cc:	40021000 	.word	0x40021000
 80027d0:	007a1200 	.word	0x007a1200
 80027d4:	003d0900 	.word	0x003d0900

080027d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <RCC_Delay+0x34>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <RCC_Delay+0x38>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0a5b      	lsrs	r3, r3, #9
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027f4:	bf00      	nop
  }
  while (Delay --);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1e5a      	subs	r2, r3, #1
 80027fa:	60fa      	str	r2, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f9      	bne.n	80027f4 <RCC_Delay+0x1c>
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	20000178 	.word	0x20000178
 8002810:	10624dd3 	.word	0x10624dd3

08002814 <__libc_init_array>:
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	2600      	movs	r6, #0
 8002818:	4d0c      	ldr	r5, [pc, #48]	; (800284c <__libc_init_array+0x38>)
 800281a:	4c0d      	ldr	r4, [pc, #52]	; (8002850 <__libc_init_array+0x3c>)
 800281c:	1b64      	subs	r4, r4, r5
 800281e:	10a4      	asrs	r4, r4, #2
 8002820:	42a6      	cmp	r6, r4
 8002822:	d109      	bne.n	8002838 <__libc_init_array+0x24>
 8002824:	f000 f830 	bl	8002888 <_init>
 8002828:	2600      	movs	r6, #0
 800282a:	4d0a      	ldr	r5, [pc, #40]	; (8002854 <__libc_init_array+0x40>)
 800282c:	4c0a      	ldr	r4, [pc, #40]	; (8002858 <__libc_init_array+0x44>)
 800282e:	1b64      	subs	r4, r4, r5
 8002830:	10a4      	asrs	r4, r4, #2
 8002832:	42a6      	cmp	r6, r4
 8002834:	d105      	bne.n	8002842 <__libc_init_array+0x2e>
 8002836:	bd70      	pop	{r4, r5, r6, pc}
 8002838:	f855 3b04 	ldr.w	r3, [r5], #4
 800283c:	4798      	blx	r3
 800283e:	3601      	adds	r6, #1
 8002840:	e7ee      	b.n	8002820 <__libc_init_array+0xc>
 8002842:	f855 3b04 	ldr.w	r3, [r5], #4
 8002846:	4798      	blx	r3
 8002848:	3601      	adds	r6, #1
 800284a:	e7f2      	b.n	8002832 <__libc_init_array+0x1e>
 800284c:	08002a4c 	.word	0x08002a4c
 8002850:	08002a4c 	.word	0x08002a4c
 8002854:	08002a4c 	.word	0x08002a4c
 8002858:	08002a50 	.word	0x08002a50

0800285c <memcpy>:
 800285c:	440a      	add	r2, r1
 800285e:	4291      	cmp	r1, r2
 8002860:	f100 33ff 	add.w	r3, r0, #4294967295
 8002864:	d100      	bne.n	8002868 <memcpy+0xc>
 8002866:	4770      	bx	lr
 8002868:	b510      	push	{r4, lr}
 800286a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800286e:	4291      	cmp	r1, r2
 8002870:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002874:	d1f9      	bne.n	800286a <memcpy+0xe>
 8002876:	bd10      	pop	{r4, pc}

08002878 <memset>:
 8002878:	4603      	mov	r3, r0
 800287a:	4402      	add	r2, r0
 800287c:	4293      	cmp	r3, r2
 800287e:	d100      	bne.n	8002882 <memset+0xa>
 8002880:	4770      	bx	lr
 8002882:	f803 1b01 	strb.w	r1, [r3], #1
 8002886:	e7f9      	b.n	800287c <memset+0x4>

08002888 <_init>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	bf00      	nop
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr

08002894 <_fini>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	bf00      	nop
 8002898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289a:	bc08      	pop	{r3}
 800289c:	469e      	mov	lr, r3
 800289e:	4770      	bx	lr
