
DID_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c80  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08004e70  08004e70  00014e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f0  080050f0  0002012c  2**0
                  CONTENTS
  4 .ARM          00000000  080050f0  080050f0  0002012c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050f0  080050f0  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  080050f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad4  2000012c  08005224  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c00  08005224  00021c00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c75  00000000  00000000  00020155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030cd  00000000  00000000  00034dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00037e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  00038c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abe3  00000000  00000000  00039830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9e1  00000000  00000000  00054413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099def  00000000  00000000  00063df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fdbe3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003840  00000000  00000000  000fdc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000012c 	.word	0x2000012c
 800020c:	00000000 	.word	0x00000000
 8000210:	08004e58 	.word	0x08004e58

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000130 	.word	0x20000130
 800022c:	08004e58 	.word	0x08004e58

08000230 <Delay>:
 * @Param counts: Number of milliseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void Delay(uint32_t counts) 
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint16_t j;
	for (i = 0; i < counts; i++)
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	e00c      	b.n	8000258 <Delay+0x28>
	{
		for(j = 0; j<16000; j++){}
 800023e:	2300      	movs	r3, #0
 8000240:	817b      	strh	r3, [r7, #10]
 8000242:	e002      	b.n	800024a <Delay+0x1a>
 8000244:	897b      	ldrh	r3, [r7, #10]
 8000246:	3301      	adds	r3, #1
 8000248:	817b      	strh	r3, [r7, #10]
 800024a:	897b      	ldrh	r3, [r7, #10]
 800024c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000250:	d3f8      	bcc.n	8000244 <Delay+0x14>
	for (i = 0; i < counts; i++)
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	3301      	adds	r3, #1
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	429a      	cmp	r2, r3
 800025e:	d3ee      	bcc.n	800023e <Delay+0xe>
	}
	
}
 8000260:	bf00      	nop
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <MicrosecondDelay>:
 * @Param counts: Number of microseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void MicrosecondDelay(uint32_t counts)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint8_t j;

	for (i = 0; i < counts; i++)
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	e00b      	b.n	8000292 <MicrosecondDelay+0x26>
	{
		for (j = 0; j<16; j++){}
 800027a:	2300      	movs	r3, #0
 800027c:	72fb      	strb	r3, [r7, #11]
 800027e:	e002      	b.n	8000286 <MicrosecondDelay+0x1a>
 8000280:	7afb      	ldrb	r3, [r7, #11]
 8000282:	3301      	adds	r3, #1
 8000284:	72fb      	strb	r3, [r7, #11]
 8000286:	7afb      	ldrb	r3, [r7, #11]
 8000288:	2b0f      	cmp	r3, #15
 800028a:	d9f9      	bls.n	8000280 <MicrosecondDelay+0x14>
	for (i = 0; i < counts; i++)
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	3301      	adds	r3, #1
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	68fa      	ldr	r2, [r7, #12]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	429a      	cmp	r2, r3
 8000298:	d3ef      	bcc.n	800027a <MicrosecondDelay+0xe>
	}
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr

080002a6 <MoveCursor>:
  * Moves cursor to the position on the screen determined by XY Coordinates
  * @Param x: x-coordinate
  * @Param y: y-coordinate
  */
void MoveCursor(uint8_t x, uint8_t y)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b084      	sub	sp, #16
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	4603      	mov	r3, r0
 80002ae:	460a      	mov	r2, r1
 80002b0:	71fb      	strb	r3, [r7, #7]
 80002b2:	4613      	mov	r3, r2
 80002b4:	71bb      	strb	r3, [r7, #6]
     * Row major:
     * 0 1 2 3 4 
     * 5 6 7 8 9 
     *  
     */
    uint16_t offset = 40*y + x;
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	0092      	lsls	r2, r2, #2
 80002be:	4413      	add	r3, r2
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	4413      	add	r3, r2
 80002ca:	81fb      	strh	r3, [r7, #14]
    
    TransmitCommand(0x46);
 80002cc:	2046      	movs	r0, #70	; 0x46
 80002ce:	f000 fa85 	bl	80007dc <TransmitCommand>
    // The CSRW register is 2 bytes long, so the first parameter 
    // is the first byte and the second parameter is the second
    // byte
    TransmitCommandParameter(offset&0xFF);
 80002d2:	89fb      	ldrh	r3, [r7, #14]
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fa9e 	bl	8000818 <TransmitCommandParameter>
    TransmitCommandParameter(offset >> 8);
 80002dc:	89fb      	ldrh	r3, [r7, #14]
 80002de:	0a1b      	lsrs	r3, r3, #8
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fa97 	bl	8000818 <TransmitCommandParameter>
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <ClearScreen>:

 /**
 * Purpose: Prints 1200 " " characters to clear the screen
 */
void ClearScreen()
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b082      	sub	sp, #8
 80002f6:	af00      	add	r7, sp, #0
    //Set cursor to start position
    MoveCursor(0, 0);
 80002f8:	2100      	movs	r1, #0
 80002fa:	2000      	movs	r0, #0
 80002fc:	f7ff ffd3 	bl	80002a6 <MoveCursor>
    
    //replace all characters with spaces
    TransmitCommand(0x42);                          
 8000300:	2042      	movs	r0, #66	; 0x42
 8000302:	f000 fa6b 	bl	80007dc <TransmitCommand>
    for (uint16_t i = 0; i < 1200; i++)
 8000306:	2300      	movs	r3, #0
 8000308:	80fb      	strh	r3, [r7, #6]
 800030a:	e005      	b.n	8000318 <ClearScreen+0x26>
    {
        TransmitCommandParameter(0x20);
 800030c:	2020      	movs	r0, #32
 800030e:	f000 fa83 	bl	8000818 <TransmitCommandParameter>
    for (uint16_t i = 0; i < 1200; i++)
 8000312:	88fb      	ldrh	r3, [r7, #6]
 8000314:	3301      	adds	r3, #1
 8000316:	80fb      	strh	r3, [r7, #6]
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800031e:	d3f5      	bcc.n	800030c <ClearScreen+0x1a>
    }
    MoveCursor(0, 0);
 8000320:	2100      	movs	r1, #0
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffbf 	bl	80002a6 <MoveCursor>
}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <SaveCharacterToRAM>:
  * @Param bitmap: An array of the bitmap of that particular subcharacter
  * @Param offset: Some offset number
  * Returns: nothing
  */
void SaveCharacterToRAM(uint8_t* bitmap, uint8_t offset)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
    TransmitCommand(0x46);
 800033c:	2046      	movs	r0, #70	; 0x46
 800033e:	f000 fa4d 	bl	80007dc <TransmitCommand>
    TransmitCommandParameter(offset);
 8000342:	78fb      	ldrb	r3, [r7, #3]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fa67 	bl	8000818 <TransmitCommandParameter>
    TransmitCommandParameter(0x48);
 800034a:	2048      	movs	r0, #72	; 0x48
 800034c:	f000 fa64 	bl	8000818 <TransmitCommandParameter>
    TransmitCommand(0x42);
 8000350:	2042      	movs	r0, #66	; 0x42
 8000352:	f000 fa43 	bl	80007dc <TransmitCommand>

    for (int i = 0; i < BYTEPERBITMAP; i++)
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	e009      	b.n	8000370 <SaveCharacterToRAM+0x40>
    {
        TransmitCommandParameter(bitmap[i]);
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	4413      	add	r3, r2
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fa57 	bl	8000818 <TransmitCommandParameter>
    for (int i = 0; i < BYTEPERBITMAP; i++)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	3301      	adds	r3, #1
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	2b0f      	cmp	r3, #15
 8000374:	ddf2      	ble.n	800035c <SaveCharacterToRAM+0x2c>
    }
}
 8000376:	bf00      	nop
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <CharacterBitMaps>:

/**
 * Writes custom bitmaps to the LCD screen RAM
 */
void CharacterBitMaps(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b0c2      	sub	sp, #264	; 0x108
 8000384:	af00      	add	r7, sp, #0
    uint8_t bitmap[16][BYTEPERBITMAP] = {{0x7E, 0x7E, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x7E},
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4a19      	ldr	r2, [pc, #100]	; (80003f0 <CharacterBitMaps+0x70>)
 800038a:	4618      	mov	r0, r3
 800038c:	4611      	mov	r1, r2
 800038e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000392:	461a      	mov	r2, r3
 8000394:	f004 fc88 	bl	8004ca8 <memcpy>
                                    {0x00, 0x62, 0x62, 0x62, 0x66, 0x66, 0x66, 0x6C, 0x6C, 0x6C, 0x70, 0x70, 0x70, 0x60, 0x60, 0x00},
                                    {0x00, 0x60, 0x60, 0x70, 0x70, 0x78, 0x6C, 0x6C, 0x6C, 0x66, 0x66, 0x66, 0x67, 0x67, 0x61, 0x00},
                                    {0x00, 0x46, 0x46, 0x46, 0x66, 0x66, 0x66, 0x36, 0x36, 0x36, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x00},
                                    {0xC0, 0xE0, 0x60, 0x30, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x04, 0x06, 0x06, 0x06, 0x07, 0x03},
                                    {0x03, 0x07, 0x06, 0x06, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x60, 0xE0, 0xC0}};
    TransmitCommand(0x5C);
 8000398:	205c      	movs	r0, #92	; 0x5c
 800039a:	f000 fa1f 	bl	80007dc <TransmitCommand>
    TransmitCommandParameter(0x00);
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fa3a 	bl	8000818 <TransmitCommandParameter>
    TransmitCommandParameter(0x40);
 80003a4:	2040      	movs	r0, #64	; 0x40
 80003a6:	f000 fa37 	bl	8000818 <TransmitCommandParameter>
    TransmitCommand(0x4C);
 80003aa:	204c      	movs	r0, #76	; 0x4c
 80003ac:	f000 fa16 	bl	80007dc <TransmitCommand>

    for (uint8_t i = 0; i < 16; i++)
 80003b0:	2300      	movs	r3, #0
 80003b2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80003b6:	e011      	b.n	80003dc <CharacterBitMaps+0x5c>
    {
        SaveCharacterToRAM(bitmap[i], i*BYTEPERBITMAP);                
 80003b8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003bc:	1d3a      	adds	r2, r7, #4
 80003be:	011b      	lsls	r3, r3, #4
 80003c0:	441a      	add	r2, r3
 80003c2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003c6:	011b      	lsls	r3, r3, #4
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	4610      	mov	r0, r2
 80003ce:	f7ff ffaf 	bl	8000330 <SaveCharacterToRAM>
    for (uint8_t i = 0; i < 16; i++)
 80003d2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003d6:	3301      	adds	r3, #1
 80003d8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80003dc:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003e0:	2b0f      	cmp	r3, #15
 80003e2:	d9e9      	bls.n	80003b8 <CharacterBitMaps+0x38>
    }   
}
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	08004e70 	.word	0x08004e70

080003f4 <OutputString>:
 * @Param starting_x: x-coordinate to write the string to
 * @Param starting_y: y-coordinate to write the string to
 * Returns: nothing
 */
void OutputString(char Str[], uint8_t starting_x, uint8_t starting_y)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	70fb      	strb	r3, [r7, #3]
 8000400:	4613      	mov	r3, r2
 8000402:	70bb      	strb	r3, [r7, #2]
                        {0x82,0x86,0x80,0x81}, {0x86,0x83,0x20,0x89}, {0x80,0x81,0x84,0x85}, {0x80,0x81,0x20,0x89}, //6 7 8 9
                        {0x20,0x20,0x20,0x20}, {0x20,0x20,0x2E,0x20}, {0x2E,0x20,0x2E,0x20}, {0x87,0x87,0x86,0x86}, //SPACE, ., :, -
                        };
	
    uint8_t temp;
    uint8_t x = starting_x;
 8000404:	78fb      	ldrb	r3, [r7, #3]
 8000406:	73bb      	strb	r3, [r7, #14]
  
    TransmitCommand(0x4C);                                  //Set the cursor direction to "Right" 
 8000408:	204c      	movs	r0, #76	; 0x4c
 800040a:	f000 f9e7 	bl	80007dc <TransmitCommand>
    
    for (uint8_t c = 0; Str[c] != '\0'; c++)
 800040e:	2300      	movs	r3, #0
 8000410:	737b      	strb	r3, [r7, #13]
 8000412:	e069      	b.n	80004e8 <OutputString+0xf4>
    // used to be for (uint8_t c = 0; c < Str[c] != '\0'; c++)
    {
        MoveCursor(x, starting_y);
 8000414:	78ba      	ldrb	r2, [r7, #2]
 8000416:	7bbb      	ldrb	r3, [r7, #14]
 8000418:	4611      	mov	r1, r2
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff43 	bl	80002a6 <MoveCursor>
        temp = (uint8_t) Str[c];
 8000420:	7b7b      	ldrb	r3, [r7, #13]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	73fb      	strb	r3, [r7, #15]
        if (temp == 32)
 800042a:	7bfb      	ldrb	r3, [r7, #15]
 800042c:	2b20      	cmp	r3, #32
 800042e:	d102      	bne.n	8000436 <OutputString+0x42>
        {                    
            temp = 36;                  //if character is " "
 8000430:	2324      	movs	r3, #36	; 0x24
 8000432:	73fb      	strb	r3, [r7, #15]
 8000434:	e025      	b.n	8000482 <OutputString+0x8e>
        }
        else if (temp == 58)
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	2b3a      	cmp	r3, #58	; 0x3a
 800043a:	d102      	bne.n	8000442 <OutputString+0x4e>
        {              
            temp = 38;                  //if character is ":"
 800043c:	2326      	movs	r3, #38	; 0x26
 800043e:	73fb      	strb	r3, [r7, #15]
 8000440:	e01f      	b.n	8000482 <OutputString+0x8e>
        }
        else if (temp == 46)
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	2b2e      	cmp	r3, #46	; 0x2e
 8000446:	d102      	bne.n	800044e <OutputString+0x5a>
        {               
            temp = 37;                  //if character is "."
 8000448:	2325      	movs	r3, #37	; 0x25
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e019      	b.n	8000482 <OutputString+0x8e>
        }
		else if (temp == 45)
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	2b2d      	cmp	r3, #45	; 0x2d
 8000452:	d102      	bne.n	800045a <OutputString+0x66>
		{
			temp = 39;	                //if character is "-"
 8000454:	2327      	movs	r3, #39	; 0x27
 8000456:	73fb      	strb	r3, [r7, #15]
 8000458:	e013      	b.n	8000482 <OutputString+0x8e>
		}
        else if (temp <= 57)
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	2b39      	cmp	r3, #57	; 0x39
 800045e:	d803      	bhi.n	8000468 <OutputString+0x74>
        {               
            temp -= OFFSET_NUMERIC;     //if character is between "0" and "9"
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	3b16      	subs	r3, #22
 8000464:	73fb      	strb	r3, [r7, #15]
 8000466:	e00c      	b.n	8000482 <OutputString+0x8e>
        }
        else if (temp <= 90)
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	2b5a      	cmp	r3, #90	; 0x5a
 800046c:	d803      	bhi.n	8000476 <OutputString+0x82>
        {               
            temp -= OFFSET_CAPITAL;     //if character is between "A" and "Z"
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	3b41      	subs	r3, #65	; 0x41
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	e005      	b.n	8000482 <OutputString+0x8e>
        }
        else if (temp <= 122)
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	2b7a      	cmp	r3, #122	; 0x7a
 800047a:	d802      	bhi.n	8000482 <OutputString+0x8e>
        {             
            temp -= OFFSET_LOWCASE;     //if character is between "a" and "z"
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3b61      	subs	r3, #97	; 0x61
 8000480:	73fb      	strb	r3, [r7, #15]
        * |C D|
        *  - -
        * (4 subcharacters, in that order)     * 
        ***********************************/
        
        TransmitCommand(0x42);                                  //print subcharacers A and B
 8000482:	2042      	movs	r0, #66	; 0x42
 8000484:	f000 f9aa 	bl	80007dc <TransmitCommand>
        TransmitCommandParameter(LOOKUPTABLE[temp][0]); 
 8000488:	7bfb      	ldrb	r3, [r7, #15]
 800048a:	4a1d      	ldr	r2, [pc, #116]	; (8000500 <OutputString+0x10c>)
 800048c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000490:	4618      	mov	r0, r3
 8000492:	f000 f9c1 	bl	8000818 <TransmitCommandParameter>
        TransmitCommandParameter(LOOKUPTABLE[temp][1]);
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	4a19      	ldr	r2, [pc, #100]	; (8000500 <OutputString+0x10c>)
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	4413      	add	r3, r2
 800049e:	785b      	ldrb	r3, [r3, #1]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 f9b9 	bl	8000818 <TransmitCommandParameter>

        MoveCursor(x, starting_y + 1);
 80004a6:	78bb      	ldrb	r3, [r7, #2]
 80004a8:	3301      	adds	r3, #1
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	7bbb      	ldrb	r3, [r7, #14]
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff fef8 	bl	80002a6 <MoveCursor>
        
        TransmitCommand(0x42);                                  //print the subcharacters C and D
 80004b6:	2042      	movs	r0, #66	; 0x42
 80004b8:	f000 f990 	bl	80007dc <TransmitCommand>
        TransmitCommandParameter(LOOKUPTABLE[temp][2]);
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	4a10      	ldr	r2, [pc, #64]	; (8000500 <OutputString+0x10c>)
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	4413      	add	r3, r2
 80004c4:	789b      	ldrb	r3, [r3, #2]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f9a6 	bl	8000818 <TransmitCommandParameter>
        TransmitCommandParameter(LOOKUPTABLE[temp][3]);
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <OutputString+0x10c>)
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	4413      	add	r3, r2
 80004d4:	78db      	ldrb	r3, [r3, #3]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 f99e 	bl	8000818 <TransmitCommandParameter>

        x += 3;
 80004dc:	7bbb      	ldrb	r3, [r7, #14]
 80004de:	3303      	adds	r3, #3
 80004e0:	73bb      	strb	r3, [r7, #14]
    for (uint8_t c = 0; Str[c] != '\0'; c++)
 80004e2:	7b7b      	ldrb	r3, [r7, #13]
 80004e4:	3301      	adds	r3, #1
 80004e6:	737b      	strb	r3, [r7, #13]
 80004e8:	7b7b      	ldrb	r3, [r7, #13]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d18f      	bne.n	8000414 <OutputString+0x20>
    }
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000014 	.word	0x20000014

08000504 <OutputPaddedInteger>:
 * @Param x: x-coordinate to write the character
 * @Param y: y-coordinate to write the character
 * Returns: nothing
 */
void OutputPaddedInteger(int32_t num, uint8_t dec, uint8_t decOn, uint8_t x, uint8_t y)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	4608      	mov	r0, r1
 800050e:	4611      	mov	r1, r2
 8000510:	461a      	mov	r2, r3
 8000512:	4603      	mov	r3, r0
 8000514:	70fb      	strb	r3, [r7, #3]
 8000516:	460b      	mov	r3, r1
 8000518:	70bb      	strb	r3, [r7, #2]
 800051a:	4613      	mov	r3, r2
 800051c:	707b      	strb	r3, [r7, #1]
	uint8_t i;
    char str[5] = {' ',' ',' ',' ','\0'};
 800051e:	4a3a      	ldr	r2, [pc, #232]	; (8000608 <OutputPaddedInteger+0x104>)
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000528:	6018      	str	r0, [r3, #0]
 800052a:	3304      	adds	r3, #4
 800052c:	7019      	strb	r1, [r3, #0]
	char decplace[2] = {' ', '\0'};
 800052e:	2320      	movs	r3, #32
 8000530:	81bb      	strh	r3, [r7, #12]
		
    if (num < 0)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b00      	cmp	r3, #0
 8000536:	da05      	bge.n	8000544 <OutputPaddedInteger+0x40>
    {
        str[0] = '-';
 8000538:	232d      	movs	r3, #45	; 0x2d
 800053a:	743b      	strb	r3, [r7, #16]
        num = -1 * num;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	425b      	negs	r3, r3
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	e004      	b.n	800054e <OutputPaddedInteger+0x4a>
    }
	else if (num == 0)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d101      	bne.n	800054e <OutputPaddedInteger+0x4a>
	{
		str[3] = '0';
 800054a:	2330      	movs	r3, #48	; 0x30
 800054c:	74fb      	strb	r3, [r7, #19]
	}
	
	if (num > 999)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000554:	db02      	blt.n	800055c <OutputPaddedInteger+0x58>
	{
		num = 999;
 8000556:	f240 33e7 	movw	r3, #999	; 0x3e7
 800055a:	607b      	str	r3, [r7, #4]
	}

	// Convert the integer digits into chars, one by one
    for (i = 3; num != 0; i--)
 800055c:	2303      	movs	r3, #3
 800055e:	75fb      	strb	r3, [r7, #23]
 8000560:	e01e      	b.n	80005a0 <OutputPaddedInteger+0x9c>
    {
        str[i] = "0123456789"[num%10];
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	4b29      	ldr	r3, [pc, #164]	; (800060c <OutputPaddedInteger+0x108>)
 8000566:	fb83 2301 	smull	r2, r3, r3, r1
 800056a:	109a      	asrs	r2, r3, #2
 800056c:	17cb      	asrs	r3, r1, #31
 800056e:	1ad2      	subs	r2, r2, r3
 8000570:	4613      	mov	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4413      	add	r3, r2
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	1aca      	subs	r2, r1, r3
 800057a:	7dfb      	ldrb	r3, [r7, #23]
 800057c:	4924      	ldr	r1, [pc, #144]	; (8000610 <OutputPaddedInteger+0x10c>)
 800057e:	5c8a      	ldrb	r2, [r1, r2]
 8000580:	f107 0118 	add.w	r1, r7, #24
 8000584:	440b      	add	r3, r1
 8000586:	f803 2c08 	strb.w	r2, [r3, #-8]
        num = num/10;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a1f      	ldr	r2, [pc, #124]	; (800060c <OutputPaddedInteger+0x108>)
 800058e:	fb82 1203 	smull	r1, r2, r2, r3
 8000592:	1092      	asrs	r2, r2, #2
 8000594:	17db      	asrs	r3, r3, #31
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	607b      	str	r3, [r7, #4]
    for (i = 3; num != 0; i--)
 800059a:	7dfb      	ldrb	r3, [r7, #23]
 800059c:	3b01      	subs	r3, #1
 800059e:	75fb      	strb	r3, [r7, #23]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1dd      	bne.n	8000562 <OutputPaddedInteger+0x5e>
    }
		
    OutputString(str, x, y);
 80005a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80005aa:	7879      	ldrb	r1, [r7, #1]
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ff1f 	bl	80003f4 <OutputString>
    
    if (decOn == 1)
 80005b6:	78bb      	ldrb	r3, [r7, #2]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d121      	bne.n	8000600 <OutputPaddedInteger+0xfc>
    {
		//Output 1 decimal place
		OutputString(".", x + 12, y);
 80005bc:	787b      	ldrb	r3, [r7, #1]
 80005be:	330c      	adds	r3, #12
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80005c6:	4619      	mov	r1, r3
 80005c8:	4812      	ldr	r0, [pc, #72]	; (8000614 <OutputPaddedInteger+0x110>)
 80005ca:	f7ff ff13 	bl	80003f4 <OutputString>

		dec = dec % 10;
 80005ce:	78fa      	ldrb	r2, [r7, #3]
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <OutputPaddedInteger+0x114>)
 80005d2:	fba3 1302 	umull	r1, r3, r3, r2
 80005d6:	08d9      	lsrs	r1, r3, #3
 80005d8:	460b      	mov	r3, r1
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	440b      	add	r3, r1
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	70fb      	strb	r3, [r7, #3]

		decplace[0] = "0123456789"[dec];
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <OutputPaddedInteger+0x10c>)
 80005e8:	5cd3      	ldrb	r3, [r2, r3]
 80005ea:	733b      	strb	r3, [r7, #12]
		OutputString(decplace, x + 15, y);
 80005ec:	787b      	ldrb	r3, [r7, #1]
 80005ee:	330f      	adds	r3, #15
 80005f0:	b2d9      	uxtb	r1, r3
 80005f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fefa 	bl	80003f4 <OutputString>
    }
}
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	08004f74 	.word	0x08004f74
 800060c:	66666667 	.word	0x66666667
 8000610:	08004f7c 	.word	0x08004f7c
 8000614:	08004f70 	.word	0x08004f70
 8000618:	cccccccd 	.word	0xcccccccd

0800061c <DisplayScreen>:

/**
 * Displays all information in a single screen
 */
void DisplayScreen(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af02      	add	r7, sp, #8
    ClearScreen();
 8000622:	f7ff fe66 	bl	80002f2 <ClearScreen>

	// Display all data that should be on the page. Insert current data for values
	switch (page_num_val)
 8000626:	4b4f      	ldr	r3, [pc, #316]	; (8000764 <DisplayScreen+0x148>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d001      	beq.n	8000632 <DisplayScreen+0x16>
 800062e:	2b02      	cmp	r3, #2


		  // ROW5:


		  break;
 8000630:	e078      	b.n	8000724 <DisplayScreen+0x108>
		  OutputString("SPEED:", SPEED_XPOS, SPEED_YPOS);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	484c      	ldr	r0, [pc, #304]	; (8000768 <DisplayScreen+0x14c>)
 8000638:	f7ff fedc 	bl	80003f4 <OutputString>
		  OutputPaddedInteger(speed_val, 0, 0, SPEED_DATA_XPOS, SPEED_YPOS);
 800063c:	4b4b      	ldr	r3, [pc, #300]	; (800076c <DisplayScreen+0x150>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	2300      	movs	r3, #0
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	230c      	movs	r3, #12
 8000648:	2200      	movs	r2, #0
 800064a:	2100      	movs	r1, #0
 800064c:	f7ff ff5a 	bl	8000504 <OutputPaddedInteger>
		  OutputString("KMH", SPEED_UNIT_XPOS, SPEED_YPOS);
 8000650:	2200      	movs	r2, #0
 8000652:	2112      	movs	r1, #18
 8000654:	4846      	ldr	r0, [pc, #280]	; (8000770 <DisplayScreen+0x154>)
 8000656:	f7ff fecd 	bl	80003f4 <OutputString>
		  OutputString("CRUISE SPEED:", CRUISE_SPEED_XPOS, CRUISE_SPEED_YPOS);
 800065a:	2205      	movs	r2, #5
 800065c:	2100      	movs	r1, #0
 800065e:	4845      	ldr	r0, [pc, #276]	; (8000774 <DisplayScreen+0x158>)
 8000660:	f7ff fec8 	bl	80003f4 <OutputString>
		  OutputPaddedInteger(cruise_speed_val, 0, 0, CRUISE_SPEED_DATA_XPOS, CRUISE_SPEED_YPOS);
 8000664:	4b44      	ldr	r3, [pc, #272]	; (8000778 <DisplayScreen+0x15c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	2305      	movs	r3, #5
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	231a      	movs	r3, #26
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	f7ff ff46 	bl	8000504 <OutputPaddedInteger>
		  OutputString("KMH", CRUISE_SPEED_UNIT_XPOS, CRUISE_SPEED_YPOS);
 8000678:	2205      	movs	r2, #5
 800067a:	2120      	movs	r1, #32
 800067c:	483c      	ldr	r0, [pc, #240]	; (8000770 <DisplayScreen+0x154>)
 800067e:	f7ff feb9 	bl	80003f4 <OutputString>
		  OutputString("BATT VOLT:", BATT_VOLT_XPOS, BATT_VOLT_YPOS);
 8000682:	220a      	movs	r2, #10
 8000684:	2100      	movs	r1, #0
 8000686:	483d      	ldr	r0, [pc, #244]	; (800077c <DisplayScreen+0x160>)
 8000688:	f7ff feb4 	bl	80003f4 <OutputString>
		  OutputPaddedInteger(batt_volt_val, 0, 1, BATT_VOLT_DATA_XPOS, BATT_VOLT_YPOS);
 800068c:	4b3c      	ldr	r3, [pc, #240]	; (8000780 <DisplayScreen+0x164>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4618      	mov	r0, r3
 8000692:	230a      	movs	r3, #10
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2314      	movs	r3, #20
 8000698:	2201      	movs	r2, #1
 800069a:	2100      	movs	r1, #0
 800069c:	f7ff ff32 	bl	8000504 <OutputPaddedInteger>
		  OutputString("V", BATT_VOLT_UNIT_XPOS, BATT_VOLT_YPOS);
 80006a0:	220a      	movs	r2, #10
 80006a2:	211a      	movs	r1, #26
 80006a4:	4837      	ldr	r0, [pc, #220]	; (8000784 <DisplayScreen+0x168>)
 80006a6:	f7ff fea5 	bl	80003f4 <OutputString>
		  OutputString("BATT CURR:", BATT_CURR_XPOS, BATT_CURR_YPOS);
 80006aa:	220f      	movs	r2, #15
 80006ac:	2100      	movs	r1, #0
 80006ae:	4836      	ldr	r0, [pc, #216]	; (8000788 <DisplayScreen+0x16c>)
 80006b0:	f7ff fea0 	bl	80003f4 <OutputString>
		  OutputPaddedInteger(batt_curr_val, 0, 1, BATT_CURR_DATA_XPOS, BATT_CURR_YPOS);
 80006b4:	4b35      	ldr	r3, [pc, #212]	; (800078c <DisplayScreen+0x170>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	230f      	movs	r3, #15
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2314      	movs	r3, #20
 80006c0:	2201      	movs	r2, #1
 80006c2:	2100      	movs	r1, #0
 80006c4:	f7ff ff1e 	bl	8000504 <OutputPaddedInteger>
		  OutputString("A", BATT_CURR_UNIT_XPOS, BATT_CURR_YPOS);
 80006c8:	220f      	movs	r2, #15
 80006ca:	211a      	movs	r1, #26
 80006cc:	4830      	ldr	r0, [pc, #192]	; (8000790 <DisplayScreen+0x174>)
 80006ce:	f7ff fe91 	bl	80003f4 <OutputString>
		  OutputString("BATT TEMP:", BATT_TEMP_XPOS, BATT_TEMP_YPOS);
 80006d2:	2214      	movs	r2, #20
 80006d4:	2100      	movs	r1, #0
 80006d6:	482f      	ldr	r0, [pc, #188]	; (8000794 <DisplayScreen+0x178>)
 80006d8:	f7ff fe8c 	bl	80003f4 <OutputString>
		  OutputPaddedInteger(batt_temp_val, 0, 1, BATT_TEMP_DATA_XPOS, BATT_TEMP_YPOS);
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <DisplayScreen+0x17c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	2314      	movs	r3, #20
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2314      	movs	r3, #20
 80006e8:	2201      	movs	r2, #1
 80006ea:	2100      	movs	r1, #0
 80006ec:	f7ff ff0a 	bl	8000504 <OutputPaddedInteger>
		  OutputString("C", BATT_TEMP_UNIT_XPOS, BATT_TEMP_YPOS);
 80006f0:	2214      	movs	r2, #20
 80006f2:	211a      	movs	r1, #26
 80006f4:	4829      	ldr	r0, [pc, #164]	; (800079c <DisplayScreen+0x180>)
 80006f6:	f7ff fe7d 	bl	80003f4 <OutputString>
		  OutputString("MOTOR TEMP:", MOTOR_TEMP_XPOS, MOTOR_TEMP_YPOS);
 80006fa:	2219      	movs	r2, #25
 80006fc:	2100      	movs	r1, #0
 80006fe:	4828      	ldr	r0, [pc, #160]	; (80007a0 <DisplayScreen+0x184>)
 8000700:	f7ff fe78 	bl	80003f4 <OutputString>
		  OutputPaddedInteger(motor_temp_val, 0, 1, MOTOR_TEMP_DATA_XPOS, MOTOR_TEMP_YPOS);
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <DisplayScreen+0x188>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	2319      	movs	r3, #25
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2316      	movs	r3, #22
 8000710:	2201      	movs	r2, #1
 8000712:	2100      	movs	r1, #0
 8000714:	f7ff fef6 	bl	8000504 <OutputPaddedInteger>
		  OutputString("C", MOTOR_TEMP_UNIT_XPOS, MOTOR_TEMP_YPOS);
 8000718:	2219      	movs	r2, #25
 800071a:	211c      	movs	r1, #28
 800071c:	481f      	ldr	r0, [pc, #124]	; (800079c <DisplayScreen+0x180>)
 800071e:	f7ff fe69 	bl	80003f4 <OutputString>
		  break;
 8000722:	bf00      	nop
	
	}

	// Display page number (example output: '1/2')
	OutputString(" ", PAGE_NUM_UNIT_XPOS - 1, PAGE_NUM_YPOS);
 8000724:	2219      	movs	r2, #25
 8000726:	2123      	movs	r1, #35	; 0x23
 8000728:	481f      	ldr	r0, [pc, #124]	; (80007a8 <DisplayScreen+0x18c>)
 800072a:	f7ff fe63 	bl	80003f4 <OutputString>
	OutputPaddedInteger(page_num_val, 0, 0, PAGE_NUM_XPOS, PAGE_NUM_YPOS);
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <DisplayScreen+0x148>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	2319      	movs	r3, #25
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2322      	movs	r3, #34	; 0x22
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	f7ff fee1 	bl	8000504 <OutputPaddedInteger>
	OutputString("/", PAGE_NUM_UNIT_XPOS, PAGE_NUM_YPOS);
 8000742:	2219      	movs	r2, #25
 8000744:	2124      	movs	r1, #36	; 0x24
 8000746:	4819      	ldr	r0, [pc, #100]	; (80007ac <DisplayScreen+0x190>)
 8000748:	f7ff fe54 	bl	80003f4 <OutputString>
	OutputPaddedInteger(PAGE_NUM_MAX, 0, 0, PAGE_NUM_UNIT_XPOS + 2, PAGE_NUM_YPOS);
 800074c:	2319      	movs	r3, #25
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2326      	movs	r3, #38	; 0x26
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	2002      	movs	r0, #2
 8000758:	f7ff fed4 	bl	8000504 <OutputPaddedInteger>

	
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000000 	.word	0x20000000
 8000768:	08004f88 	.word	0x08004f88
 800076c:	20000001 	.word	0x20000001
 8000770:	08004f90 	.word	0x08004f90
 8000774:	08004f94 	.word	0x08004f94
 8000778:	20000002 	.word	0x20000002
 800077c:	08004fa4 	.word	0x08004fa4
 8000780:	20000004 	.word	0x20000004
 8000784:	08004fb0 	.word	0x08004fb0
 8000788:	08004fb4 	.word	0x08004fb4
 800078c:	20000008 	.word	0x20000008
 8000790:	08004fc0 	.word	0x08004fc0
 8000794:	08004fc4 	.word	0x08004fc4
 8000798:	2000000c 	.word	0x2000000c
 800079c:	08004fd0 	.word	0x08004fd0
 80007a0:	08004fd4 	.word	0x08004fd4
 80007a4:	20000010 	.word	0x20000010
 80007a8:	08004fe0 	.word	0x08004fe0
 80007ac:	08004fe4 	.word	0x08004fe4

080007b0 <WriteByteToDataBus>:
 * Write a byte of data through C3 to C10(Data Buses)
 * @Param byte: 1 byte code
 * Returns: nothing
 */
void WriteByteToDataBus(uint8_t byte)
{	
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = byte << 3;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	00da      	lsls	r2, r3, #3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <WriteByteToDataBus+0x28>)
 80007c0:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = ((uint8_t) (~byte)) << 3;
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	43db      	mvns	r3, r3
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	00da      	lsls	r2, r3, #3
 80007ca:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <WriteByteToDataBus+0x28>)
 80007cc:	615a      	str	r2, [r3, #20]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40011000 	.word	0x40011000

080007dc <TransmitCommand>:
 * Writes a byte of command code through ports C3 to C10(Data Buses)
 * @Param command_code: 1 byte command code
 * returns: nothing
 */
void TransmitCommand(uint8_t command_code)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = 0x1UL << 0;					//SET C0 to HIGH
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <TransmitCommand+0x38>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = 0x1UL << 1;					//SET C1 to LOW
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <TransmitCommand+0x38>)
 80007ee:	2202      	movs	r2, #2
 80007f0:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(command_code);
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ffdb 	bl	80007b0 <WriteByteToDataBus>
	MicrosecondDelay(1);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff fd36 	bl	800026c <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;					//SET C1 to HIGH
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <TransmitCommand+0x38>)
 8000802:	2202      	movs	r2, #2
 8000804:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 8000806:	2001      	movs	r0, #1
 8000808:	f7ff fd30 	bl	800026c <MicrosecondDelay>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40011000 	.word	0x40011000

08000818 <TransmitCommandParameter>:
 * Writes a byte of parameter code through ports C3 to C10(Data Buses)
 * @Param parameter_code: 1 byte parameter code
 * returns: nothing
 */
void TransmitCommandParameter(uint8_t parameter_code)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	GPIOC->BRR = 0x1UL << 0;					//SET C0 to LOW
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <TransmitCommandParameter+0x38>)
 8000824:	2201      	movs	r2, #1
 8000826:	615a      	str	r2, [r3, #20]
	GPIOC->BRR = 0x1UL << 1;					//SET C1 to LOW
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <TransmitCommandParameter+0x38>)
 800082a:	2202      	movs	r2, #2
 800082c:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(parameter_code);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ffbd 	bl	80007b0 <WriteByteToDataBus>
	MicrosecondDelay(1);
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff fd18 	bl	800026c <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;					//SET C1 to HIGH
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <TransmitCommandParameter+0x38>)
 800083e:	2202      	movs	r2, #2
 8000840:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff fd12 	bl	800026c <MicrosecondDelay>
}       
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40011000 	.word	0x40011000

08000854 <ScreenSetup>:

/**
 * Initialise screen settings and character bit maps
 */
void ScreenSetup(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
    // system setup (section 6-2-1 on raio datasheet)
    TransmitCommand(0x40);
 8000858:	2040      	movs	r0, #64	; 0x40
 800085a:	f7ff ffbf 	bl	80007dc <TransmitCommand>
        Delay(5);
 800085e:	2005      	movs	r0, #5
 8000860:	f7ff fce6 	bl	8000230 <Delay>
        // 0 0 IV 1 W/S M2 M1 M0
        TransmitCommandParameter(0x34);
 8000864:	2034      	movs	r0, #52	; 0x34
 8000866:	f7ff ffd7 	bl	8000818 <TransmitCommandParameter>
        // WF 0 0 0 0 FX FX FX
        TransmitCommandParameter(0x87);
 800086a:	2087      	movs	r0, #135	; 0x87
 800086c:	f7ff ffd4 	bl	8000818 <TransmitCommandParameter>
        // 0 0 0 0 FY FY FY FY
        TransmitCommandParameter(0xF);
 8000870:	200f      	movs	r0, #15
 8000872:	f7ff ffd1 	bl	8000818 <TransmitCommandParameter>
        // C/R (horizontal bytes per line)
        TransmitCommandParameter(39);
 8000876:	2027      	movs	r0, #39	; 0x27
 8000878:	f7ff ffce 	bl	8000818 <TransmitCommandParameter>
        // TC/R (horizontal bytes per line, incl blanking)
        TransmitCommandParameter(47);
 800087c:	202f      	movs	r0, #47	; 0x2f
 800087e:	f7ff ffcb 	bl	8000818 <TransmitCommandParameter>
        // L/F (lines per frame)
        TransmitCommandParameter(239);
 8000882:	20ef      	movs	r0, #239	; 0xef
 8000884:	f7ff ffc8 	bl	8000818 <TransmitCommandParameter>
        // APL (horizontal address range, LSB)
        TransmitCommandParameter(40);
 8000888:	2028      	movs	r0, #40	; 0x28
 800088a:	f7ff ffc5 	bl	8000818 <TransmitCommandParameter>
        // APH (horizontal address range, MSB)
        TransmitCommandParameter(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffc2 	bl	8000818 <TransmitCommandParameter>

    // scroll parameters
    TransmitCommand(0x44);
 8000894:	2044      	movs	r0, #68	; 0x44
 8000896:	f7ff ffa1 	bl	80007dc <TransmitCommand>
        TransmitCommandParameter(0); // SAD 1L
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff ffbc 	bl	8000818 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 1H 
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff ffb9 	bl	8000818 <TransmitCommandParameter>
        TransmitCommandParameter(240); // SL1
 80008a6:	20f0      	movs	r0, #240	; 0xf0
 80008a8:	f7ff ffb6 	bl	8000818 <TransmitCommandParameter>
        TransmitCommandParameter(176); // SAD 2L
 80008ac:	20b0      	movs	r0, #176	; 0xb0
 80008ae:	f7ff ffb3 	bl	8000818 <TransmitCommandParameter>
        TransmitCommandParameter(4); // SAD 2H
 80008b2:	2004      	movs	r0, #4
 80008b4:	f7ff ffb0 	bl	8000818 <TransmitCommandParameter>
        TransmitCommandParameter(240); // SL2
 80008b8:	20f0      	movs	r0, #240	; 0xf0
 80008ba:	f7ff ffad 	bl	8000818 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 3L
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff ffaa 	bl	8000818 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 3H
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff ffa7 	bl	8000818 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 4
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff ffa4 	bl	8000818 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 4
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff ffa1 	bl	8000818 <TransmitCommandParameter>
	
	TransmitCommand(0x5B);
 80008d6:	205b      	movs	r0, #91	; 0x5b
 80008d8:	f7ff ff80 	bl	80007dc <TransmitCommand>
		TransmitCommandParameter(0);
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff ff9b 	bl	8000818 <TransmitCommandParameter>

    // set horizontal scroll position
    TransmitCommand(0x5A);
 80008e2:	205a      	movs	r0, #90	; 0x5a
 80008e4:	f7ff ff7a 	bl	80007dc <TransmitCommand>
        TransmitCommandParameter(0);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff ff95 	bl	8000818 <TransmitCommandParameter>

    // set display overlay format
    TransmitCommand(0x5B);
 80008ee:	205b      	movs	r0, #91	; 0x5b
 80008f0:	f7ff ff74 	bl	80007dc <TransmitCommand>
        TransmitCommandParameter(0);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff ff8f 	bl	8000818 <TransmitCommandParameter>

    // turn off the display and configure cursor
    TransmitCommand(0x58);
 80008fa:	2058      	movs	r0, #88	; 0x58
 80008fc:	f7ff ff6e 	bl	80007dc <TransmitCommand>
        TransmitCommandParameter(0x57);
 8000900:	2057      	movs	r0, #87	; 0x57
 8000902:	f7ff ff89 	bl	8000818 <TransmitCommandParameter>

    // set cursor size & type
    TransmitCommand(0x5D);
 8000906:	205d      	movs	r0, #93	; 0x5d
 8000908:	f7ff ff68 	bl	80007dc <TransmitCommand>
        TransmitCommandParameter(4);
 800090c:	2004      	movs	r0, #4
 800090e:	f7ff ff83 	bl	8000818 <TransmitCommandParameter>
        TransmitCommandParameter(0x84);
 8000912:	2084      	movs	r0, #132	; 0x84
 8000914:	f7ff ff80 	bl	8000818 <TransmitCommandParameter>

    // set cursor direction
    TransmitCommand(0x4C);
 8000918:	204c      	movs	r0, #76	; 0x4c
 800091a:	f7ff ff5f 	bl	80007dc <TransmitCommand>

    // turn on the display and configure cursor
    TransmitCommand(0x59);
 800091e:	2059      	movs	r0, #89	; 0x59
 8000920:	f7ff ff5c 	bl	80007dc <TransmitCommand>
        TransmitCommandParameter(0x7);
 8000924:	2007      	movs	r0, #7
 8000926:	f7ff ff77 	bl	8000818 <TransmitCommandParameter>
        
    CharacterBitMaps();    
 800092a:	f7ff fd29 	bl	8000380 <CharacterBitMaps>
			
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <CanFilterSetup>:
 * @brief Initialize CAN node for sending and receiving
 * @param: CAN filter structure
 * @retval: nothing
 */
void CanFilterSetup()
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	// Use mask and list mode to filter IDs from the CAN ID BOM

	// Filter for 0x500 and 0x600 IDs
    CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 8000938:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <CanFilterSetup+0x94>)
 800093a:	f24a 0220 	movw	r2, #40992	; 0xa020
 800093e:	601a      	str	r2, [r3, #0]
    CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <CanFilterSetup+0x94>)
 8000942:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 8000946:	609a      	str	r2, [r3, #8]

    CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <CanFilterSetup+0x94>)
 800094a:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 800094e:	605a      	str	r2, [r3, #4]
    CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <CanFilterSetup+0x94>)
 8000952:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000956:	60da      	str	r2, [r3, #12]

    CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <CanFilterSetup+0x94>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
    CAN_filter0.FilterBank = (uint32_t) 0;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <CanFilterSetup+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
    CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <CanFilterSetup+0x94>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
    CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <CanFilterSetup+0x94>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
    CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <CanFilterSetup+0x94>)
 8000972:	2201      	movs	r2, #1
 8000974:	621a      	str	r2, [r3, #32]

    // Remaining IDs filtered with list mode
    CAN_filter1.FilterIdHigh = (uint16_t) (0x401 << 5);
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <CanFilterSetup+0x98>)
 8000978:	f248 0220 	movw	r2, #32800	; 0x8020
 800097c:	601a      	str	r2, [r3, #0]
    CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <CanFilterSetup+0x98>)
 8000980:	f248 0220 	movw	r2, #32800	; 0x8020
 8000984:	609a      	str	r2, [r3, #8]

    CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <CanFilterSetup+0x98>)
 8000988:	f248 0220 	movw	r2, #32800	; 0x8020
 800098c:	605a      	str	r2, [r3, #4]
    CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <CanFilterSetup+0x98>)
 8000990:	f248 0220 	movw	r2, #32800	; 0x8020
 8000994:	60da      	str	r2, [r3, #12]

    CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <CanFilterSetup+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
    CAN_filter1.FilterBank = (uint32_t) 1;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <CanFilterSetup+0x98>)
 800099e:	2201      	movs	r2, #1
 80009a0:	615a      	str	r2, [r3, #20]
    CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <CanFilterSetup+0x98>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	619a      	str	r2, [r3, #24]
    CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <CanFilterSetup+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
    CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <CanFilterSetup+0x98>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	621a      	str	r2, [r3, #32]

	// Configure reception filters
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 80009b4:	4904      	ldr	r1, [pc, #16]	; (80009c8 <CanFilterSetup+0x94>)
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <CanFilterSetup+0x9c>)
 80009b8:	f000 fb91 	bl	80010de <HAL_CAN_ConfigFilter>
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 80009bc:	4903      	ldr	r1, [pc, #12]	; (80009cc <CanFilterSetup+0x98>)
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <CanFilterSetup+0x9c>)
 80009c0:	f000 fb8d 	bl	80010de <HAL_CAN_ConfigFilter>

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20001b6c 	.word	0x20001b6c
 80009cc:	20001b44 	.word	0x20001b44
 80009d0:	20001b14 	.word	0x20001b14

080009d4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_CAN_Init+0x64>)
 80009da:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <MX_CAN_Init+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_CAN_Init+0x64>)
 80009e0:	220c      	movs	r2, #12
 80009e2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_CAN_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_CAN_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_CAN_Init+0x64>)
 80009f2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80009f6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_CAN_Init+0x64>)
 80009fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009fe:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <MX_CAN_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_CAN_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_CAN_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_CAN_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_CAN_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_CAN_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_CAN_Init+0x64>)
 8000a26:	f000 fa5f 	bl	8000ee8 <HAL_CAN_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000a30:	f000 f96d 	bl	8000d0e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20001b14 	.word	0x20001b14
 8000a3c:	40006400 	.word	0x40006400

08000a40 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a25      	ldr	r2, [pc, #148]	; (8000af0 <HAL_CAN_MspInit+0xb0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d143      	bne.n	8000ae8 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <HAL_CAN_MspInit+0xb4>)
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <HAL_CAN_MspInit+0xb4>)
 8000a66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a6a:	61d3      	str	r3, [r2, #28]
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <HAL_CAN_MspInit+0xb4>)
 8000a6e:	69db      	ldr	r3, [r3, #28]
 8000a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <HAL_CAN_MspInit+0xb4>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_CAN_MspInit+0xb4>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_CAN_MspInit+0xb4>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4814      	ldr	r0, [pc, #80]	; (8000af8 <HAL_CAN_MspInit+0xb8>)
 8000aa6:	f000 fe43 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <HAL_CAN_MspInit+0xb8>)
 8000ac0:	f000 fe36 	bl	8001730 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_CAN_MspInit+0xbc>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae2:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_CAN_MspInit+0xbc>)
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40006400 	.word	0x40006400
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010c00 	.word	0x40010c00
 8000afc:	40010000 	.word	0x40010000

08000b00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of messageReceive */
  messageReceiveHandle = osThreadNew(messageReceiveTask, NULL, &messageReceive_attributes);
 8000b04:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <MX_FREERTOS_Init+0x28>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4808      	ldr	r0, [pc, #32]	; (8000b2c <MX_FREERTOS_Init+0x2c>)
 8000b0a:	f001 fc0b 	bl	8002324 <osThreadNew>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <MX_FREERTOS_Init+0x30>)
 8000b12:	6013      	str	r3, [r2, #0]

  /* creation of updateDisplay */
  updateDisplayHandle = osThreadNew(updateDisplayTask, NULL, &updateDisplay_attributes);
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <MX_FREERTOS_Init+0x34>)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4807      	ldr	r0, [pc, #28]	; (8000b38 <MX_FREERTOS_Init+0x38>)
 8000b1a:	f001 fc03 	bl	8002324 <osThreadNew>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <MX_FREERTOS_Init+0x3c>)
 8000b22:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	08005038 	.word	0x08005038
 8000b2c:	08000b41 	.word	0x08000b41
 8000b30:	20001b40 	.word	0x20001b40
 8000b34:	0800505c 	.word	0x0800505c
 8000b38:	08000b81 	.word	0x08000b81
 8000b3c:	20001b3c 	.word	0x20001b3c

08000b40 <messageReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_messageReceiveTask */
void messageReceiveTask(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	uint8_t msg_data[8];

	while (1) {
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480b      	ldr	r0, [pc, #44]	; (8000b78 <messageReceiveTask+0x38>)
 8000b4c:	f000 fce5 	bl	800151a <HAL_CAN_GetRxFifoFillLevel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00b      	beq.n	8000b6e <messageReceiveTask+0x2e>
			// there are multiple CAN IDs being passed through the filter, check if the message is the SOC
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &CAN_rx_header, msg_data);
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <messageReceiveTask+0x3c>)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <messageReceiveTask+0x38>)
 8000b60:	f000 fbca 	bl	80012f8 <HAL_CAN_GetRxMessage>
			if (CAN_rx_header.StdId == 0x626) {
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <messageReceiveTask+0x3c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f240 6226 	movw	r2, #1574	; 0x626
 8000b6c:	4293      	cmp	r3, r2
				}

			}
		}

		osDelay(1);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f001 fc82 	bl	8002478 <osDelay>
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 8000b74:	e7e8      	b.n	8000b48 <messageReceiveTask+0x8>
 8000b76:	bf00      	nop
 8000b78:	20001b14 	.word	0x20001b14
 8000b7c:	20001b94 	.word	0x20001b94

08000b80 <updateDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateDisplayTask */
void updateDisplayTask(void *argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f001 fc75 	bl	8002478 <osDelay>
 8000b8e:	e7fb      	b.n	8000b88 <updateDisplayTask+0x8>

08000b90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <MX_GPIO_Init+0xb4>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a26      	ldr	r2, [pc, #152]	; (8000c44 <MX_GPIO_Init+0xb4>)
 8000baa:	f043 0310 	orr.w	r3, r3, #16
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <MX_GPIO_Init+0xb4>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0310 	and.w	r3, r3, #16
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <MX_GPIO_Init+0xb4>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <MX_GPIO_Init+0xb4>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_GPIO_Init+0xb4>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_GPIO_Init+0xb4>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <MX_GPIO_Init+0xb4>)
 8000bda:	f043 0308 	orr.w	r3, r3, #8
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_GPIO_Init+0xb4>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 8000bec:	2200      	movs	r2, #0
 8000bee:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <MX_GPIO_Init+0xb8>)
 8000bf4:	f000 ff30 	bl	8001a58 <HAL_GPIO_WritePin>
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A6_GPIO_Port, A6_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2140      	movs	r1, #64	; 0x40
 8000bfc:	4813      	ldr	r0, [pc, #76]	; (8000c4c <MX_GPIO_Init+0xbc>)
 8000bfe:	f000 ff2b 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 8000c02:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c06:	613b      	str	r3, [r7, #16]
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480b      	ldr	r0, [pc, #44]	; (8000c48 <MX_GPIO_Init+0xb8>)
 8000c1c:	f000 fd88 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A6_Pin;
 8000c20:	2340      	movs	r3, #64	; 0x40
 8000c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A6_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	4619      	mov	r1, r3
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_GPIO_Init+0xbc>)
 8000c38:	f000 fd7a 	bl	8001730 <HAL_GPIO_Init>

}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40011000 	.word	0x40011000
 8000c4c:	40010800 	.word	0x40010800

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f000 f8e6 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f818 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f7ff ff98 	bl	8000b90 <MX_GPIO_Init>
  MX_CAN_Init();
 8000c60:	f7ff feb8 	bl	80009d4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  // CAN Initialization
  CanFilterSetup();
 8000c64:	f7ff fe66 	bl	8000934 <CanFilterSetup>
  HAL_CAN_Start(&hcan);
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <main+0x38>)
 8000c6a:	f000 fb01 	bl	8001270 <HAL_CAN_Start>

  // Display startup screen
  ScreenSetup();
 8000c6e:	f7ff fdf1 	bl	8000854 <ScreenSetup>
  ClearScreen();
 8000c72:	f7ff fb3e 	bl	80002f2 <ClearScreen>
  DisplayScreen();
 8000c76:	f7ff fcd1 	bl	800061c <DisplayScreen>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000c7a:	f001 faed 	bl	8002258 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c7e:	f7ff ff3f 	bl	8000b00 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000c82:	f001 fb1b 	bl	80022bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <main+0x36>
 8000c88:	20001b14 	.word	0x20001b14

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b090      	sub	sp, #64	; 0x40
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0318 	add.w	r3, r7, #24
 8000c96:	2228      	movs	r2, #40	; 0x28
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 f812 	bl	8004cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb6:	2310      	movs	r3, #16
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000cc2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc8:	f107 0318 	add.w	r3, r7, #24
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 fedb 	bl	8001a88 <HAL_RCC_OscConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000cd8:	f000 f819 	bl	8000d0e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cdc:	230f      	movs	r3, #15
 8000cde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 f946 	bl	8001f88 <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d02:	f000 f804 	bl	8000d0e <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3740      	adds	r7, #64	; 0x40
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d12:	b672      	cpsid	i
}
 8000d14:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <Error_Handler+0x8>

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_MspInit+0x68>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <HAL_MspInit+0x68>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_MspInit+0x68>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_MspInit+0x68>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <HAL_MspInit+0x68>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_MspInit+0x68>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	210f      	movs	r1, #15
 8000d52:	f06f 0001 	mvn.w	r0, #1
 8000d56:	f000 fcc2 	bl	80016de <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_MspInit+0x6c>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_MspInit+0x6c>)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db6:	f000 f87b 	bl	8000eb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000dba:	f002 ff97 	bl	8003cec <xTaskGetSchedulerState>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d001      	beq.n	8000dc8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dc4:	f003 fcf0 	bl	80047a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000dd8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000dda:	e003      	b.n	8000de4 <LoopCopyDataInit>

08000ddc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000dde:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000de0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000de2:	3104      	adds	r1, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000de8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000dea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000dec:	d3f6      	bcc.n	8000ddc <CopyDataInit>
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000df0:	e002      	b.n	8000df8 <LoopFillZerobss>

08000df2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000df4:	f842 3b04 	str.w	r3, [r2], #4

08000df8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000dfa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000dfc:	d3f9      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dfe:	f7ff ffe5 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e02:	f003 ff2b 	bl	8004c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e06:	f7ff ff23 	bl	8000c50 <main>
  bx lr
 8000e0a:	4770      	bx	lr
  ldr r3, =_sidata
 8000e0c:	080050f8 	.word	0x080050f8
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e14:	2000012c 	.word	0x2000012c
  ldr r2, =_sbss
 8000e18:	2000012c 	.word	0x2000012c
  ldr r3, = _ebss
 8000e1c:	20001c00 	.word	0x20001c00

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x28>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x28>)
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 fc47 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff ff6a 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40022000 	.word	0x40022000

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fc51 	bl	8001716 <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 fc27 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000b8 	.word	0x200000b8
 8000ea8:	200000c0 	.word	0x200000c0
 8000eac:	200000bc 	.word	0x200000bc

08000eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_IncTick+0x1c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	200000c0 	.word	0x200000c0
 8000ed0:	20001bb0 	.word	0x20001bb0

08000ed4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <HAL_GetTick+0x10>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	20001bb0 	.word	0x20001bb0

08000ee8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e0ed      	b.n	80010d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fd9a 	bl	8000a40 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0202 	bic.w	r2, r2, #2
 8000f1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f1c:	f7ff ffda 	bl	8000ed4 <HAL_GetTick>
 8000f20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f22:	e012      	b.n	8000f4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f24:	f7ff ffd6 	bl	8000ed4 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b0a      	cmp	r3, #10
 8000f30:	d90b      	bls.n	8000f4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2205      	movs	r2, #5
 8000f42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e0c5      	b.n	80010d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e5      	bne.n	8000f24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0201 	orr.w	r2, r2, #1
 8000f66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f68:	f7ff ffb4 	bl	8000ed4 <HAL_GetTick>
 8000f6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f6e:	e012      	b.n	8000f96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f70:	f7ff ffb0 	bl	8000ed4 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b0a      	cmp	r3, #10
 8000f7c:	d90b      	bls.n	8000f96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e09f      	b.n	80010d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0e5      	beq.n	8000f70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7e1b      	ldrb	r3, [r3, #24]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d108      	bne.n	8000fbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e007      	b.n	8000fce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7e5b      	ldrb	r3, [r3, #25]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d108      	bne.n	8000fe8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e007      	b.n	8000ff8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ff6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7e9b      	ldrb	r3, [r3, #26]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d108      	bne.n	8001012 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0220 	orr.w	r2, r2, #32
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e007      	b.n	8001022 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0220 	bic.w	r2, r2, #32
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7edb      	ldrb	r3, [r3, #27]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d108      	bne.n	800103c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0210 	bic.w	r2, r2, #16
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e007      	b.n	800104c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0210 	orr.w	r2, r2, #16
 800104a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7f1b      	ldrb	r3, [r3, #28]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d108      	bne.n	8001066 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0208 	orr.w	r2, r2, #8
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e007      	b.n	8001076 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0208 	bic.w	r2, r2, #8
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7f5b      	ldrb	r3, [r3, #29]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d108      	bne.n	8001090 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0204 	orr.w	r2, r2, #4
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e007      	b.n	80010a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0204 	bic.w	r2, r2, #4
 800109e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	ea42 0103 	orr.w	r1, r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	1e5a      	subs	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80010de:	b480      	push	{r7}
 80010e0:	b087      	sub	sp, #28
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010f6:	7cfb      	ldrb	r3, [r7, #19]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d003      	beq.n	8001104 <HAL_CAN_ConfigFilter+0x26>
 80010fc:	7cfb      	ldrb	r3, [r7, #19]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	f040 80aa 	bne.w	8001258 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800110a:	f043 0201 	orr.w	r2, r3, #1
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f003 031f 	and.w	r3, r3, #31
 800111c:	2201      	movs	r2, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43db      	mvns	r3, r3
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d123      	bne.n	8001186 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	401a      	ands	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001160:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	3248      	adds	r2, #72	; 0x48
 8001166:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800117a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800117c:	6979      	ldr	r1, [r7, #20]
 800117e:	3348      	adds	r3, #72	; 0x48
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	440b      	add	r3, r1
 8001184:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d122      	bne.n	80011d4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	431a      	orrs	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3248      	adds	r2, #72	; 0x48
 80011b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ca:	6979      	ldr	r1, [r7, #20]
 80011cc:	3348      	adds	r3, #72	; 0x48
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	440b      	add	r3, r1
 80011d2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d109      	bne.n	80011f0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011ee:	e007      	b.n	8001200 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d109      	bne.n	800121c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43db      	mvns	r3, r3
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800121a:	e007      	b.n	800122c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	431a      	orrs	r2, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d107      	bne.n	8001244 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	431a      	orrs	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800124a:	f023 0201 	bic.w	r2, r3, #1
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	e006      	b.n	8001266 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
  }
}
 8001266:	4618      	mov	r0, r3
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b01      	cmp	r3, #1
 8001282:	d12e      	bne.n	80012e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2202      	movs	r2, #2
 8001288:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0201 	bic.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800129c:	f7ff fe1a 	bl	8000ed4 <HAL_GetTick>
 80012a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012a2:	e012      	b.n	80012ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012a4:	f7ff fe16 	bl	8000ed4 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b0a      	cmp	r3, #10
 80012b0:	d90b      	bls.n	80012ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2205      	movs	r2, #5
 80012c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e012      	b.n	80012f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1e5      	bne.n	80012a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e006      	b.n	80012f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
  }
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d003      	beq.n	800131c <HAL_CAN_GetRxMessage+0x24>
 8001314:	7dfb      	ldrb	r3, [r7, #23]
 8001316:	2b02      	cmp	r3, #2
 8001318:	f040 80f3 	bne.w	8001502 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10e      	bne.n	8001340 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d116      	bne.n	800135e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0e7      	b.n	8001510 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d107      	bne.n	800135e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0d8      	b.n	8001510 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	331b      	adds	r3, #27
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	4413      	add	r3, r2
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0204 	and.w	r2, r3, #4
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10c      	bne.n	8001396 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	331b      	adds	r3, #27
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	4413      	add	r3, r2
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	0d5b      	lsrs	r3, r3, #21
 800138c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e00b      	b.n	80013ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	331b      	adds	r3, #27
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	4413      	add	r3, r2
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	331b      	adds	r3, #27
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4413      	add	r3, r2
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0202 	and.w	r2, r3, #2
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	331b      	adds	r3, #27
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	3304      	adds	r3, #4
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 020f 	and.w	r2, r3, #15
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	331b      	adds	r3, #27
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	4413      	add	r3, r2
 80013e8:	3304      	adds	r3, #4
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	331b      	adds	r3, #27
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	4413      	add	r3, r2
 8001400:	3304      	adds	r3, #4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0c1b      	lsrs	r3, r3, #16
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	4413      	add	r3, r2
 800142c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	0a1a      	lsrs	r2, r3, #8
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	4413      	add	r3, r2
 8001446:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	0c1a      	lsrs	r2, r3, #16
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	3302      	adds	r3, #2
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4413      	add	r3, r2
 8001460:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	0e1a      	lsrs	r2, r3, #24
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	3303      	adds	r3, #3
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4413      	add	r3, r2
 800147a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	3304      	adds	r3, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	4413      	add	r3, r2
 8001492:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	0a1a      	lsrs	r2, r3, #8
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	3305      	adds	r3, #5
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	0c1a      	lsrs	r2, r3, #16
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	3306      	adds	r3, #6
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	0e1a      	lsrs	r2, r3, #24
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	3307      	adds	r3, #7
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d108      	bne.n	80014ee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0220 	orr.w	r2, r2, #32
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	e007      	b.n	80014fe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0220 	orr.w	r2, r2, #32
 80014fc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e006      	b.n	8001510 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
  }
}
 8001510:	4618      	mov	r0, r3
 8001512:	371c      	adds	r7, #28
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr

0800151a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800151a:	b480      	push	{r7}
 800151c:	b085      	sub	sp, #20
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d002      	beq.n	800153c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001536:	7afb      	ldrb	r3, [r7, #11]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d10f      	bne.n	800155c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d106      	bne.n	8001550 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	e005      	b.n	800155c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800155c:	68fb      	ldr	r3, [r7, #12]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0a      	blt.n	80015f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	490c      	ldr	r1, [pc, #48]	; (8001618 <__NVIC_SetPriority+0x4c>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f4:	e00a      	b.n	800160c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <__NVIC_SetPriority+0x50>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	3b04      	subs	r3, #4
 8001604:	0112      	lsls	r2, r2, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	440b      	add	r3, r1
 800160a:	761a      	strb	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0307 	rsb	r3, r3, #7
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf28      	it	cs
 800163e:	2304      	movcs	r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3304      	adds	r3, #4
 8001646:	2b06      	cmp	r3, #6
 8001648:	d902      	bls.n	8001650 <NVIC_EncodePriority+0x30>
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b03      	subs	r3, #3
 800164e:	e000      	b.n	8001652 <NVIC_EncodePriority+0x32>
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 31ff 	mov.w	r1, #4294967295
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43d9      	mvns	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4313      	orrs	r3, r2
         );
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f7ff ff90 	bl	80015cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff49 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff5e 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff90 	bl	8001620 <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5f 	bl	80015cc <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffb0 	bl	8001684 <SysTick_Config>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b08b      	sub	sp, #44	; 0x2c
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001742:	e179      	b.n	8001a38 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001744:	2201      	movs	r2, #1
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 8168 	bne.w	8001a32 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4aa0      	ldr	r2, [pc, #640]	; (80019e8 <HAL_GPIO_Init+0x2b8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d05e      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 800176c:	4a9e      	ldr	r2, [pc, #632]	; (80019e8 <HAL_GPIO_Init+0x2b8>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d875      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 8001772:	4a9e      	ldr	r2, [pc, #632]	; (80019ec <HAL_GPIO_Init+0x2bc>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d058      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 8001778:	4a9c      	ldr	r2, [pc, #624]	; (80019ec <HAL_GPIO_Init+0x2bc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d86f      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 800177e:	4a9c      	ldr	r2, [pc, #624]	; (80019f0 <HAL_GPIO_Init+0x2c0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d052      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 8001784:	4a9a      	ldr	r2, [pc, #616]	; (80019f0 <HAL_GPIO_Init+0x2c0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d869      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 800178a:	4a9a      	ldr	r2, [pc, #616]	; (80019f4 <HAL_GPIO_Init+0x2c4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d04c      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 8001790:	4a98      	ldr	r2, [pc, #608]	; (80019f4 <HAL_GPIO_Init+0x2c4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d863      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 8001796:	4a98      	ldr	r2, [pc, #608]	; (80019f8 <HAL_GPIO_Init+0x2c8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d046      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 800179c:	4a96      	ldr	r2, [pc, #600]	; (80019f8 <HAL_GPIO_Init+0x2c8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d85d      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	d82a      	bhi.n	80017fc <HAL_GPIO_Init+0xcc>
 80017a6:	2b12      	cmp	r3, #18
 80017a8:	d859      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 80017aa:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <HAL_GPIO_Init+0x80>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	0800182b 	.word	0x0800182b
 80017b4:	08001805 	.word	0x08001805
 80017b8:	08001817 	.word	0x08001817
 80017bc:	08001859 	.word	0x08001859
 80017c0:	0800185f 	.word	0x0800185f
 80017c4:	0800185f 	.word	0x0800185f
 80017c8:	0800185f 	.word	0x0800185f
 80017cc:	0800185f 	.word	0x0800185f
 80017d0:	0800185f 	.word	0x0800185f
 80017d4:	0800185f 	.word	0x0800185f
 80017d8:	0800185f 	.word	0x0800185f
 80017dc:	0800185f 	.word	0x0800185f
 80017e0:	0800185f 	.word	0x0800185f
 80017e4:	0800185f 	.word	0x0800185f
 80017e8:	0800185f 	.word	0x0800185f
 80017ec:	0800185f 	.word	0x0800185f
 80017f0:	0800185f 	.word	0x0800185f
 80017f4:	0800180d 	.word	0x0800180d
 80017f8:	08001821 	.word	0x08001821
 80017fc:	4a7f      	ldr	r2, [pc, #508]	; (80019fc <HAL_GPIO_Init+0x2cc>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001802:	e02c      	b.n	800185e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	623b      	str	r3, [r7, #32]
          break;
 800180a:	e029      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	3304      	adds	r3, #4
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	e024      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	3308      	adds	r3, #8
 800181c:	623b      	str	r3, [r7, #32]
          break;
 800181e:	e01f      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	330c      	adds	r3, #12
 8001826:	623b      	str	r3, [r7, #32]
          break;
 8001828:	e01a      	b.n	8001860 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d102      	bne.n	8001838 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001832:	2304      	movs	r3, #4
 8001834:	623b      	str	r3, [r7, #32]
          break;
 8001836:	e013      	b.n	8001860 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001840:	2308      	movs	r3, #8
 8001842:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	611a      	str	r2, [r3, #16]
          break;
 800184a:	e009      	b.n	8001860 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800184c:	2308      	movs	r3, #8
 800184e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	615a      	str	r2, [r3, #20]
          break;
 8001856:	e003      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e000      	b.n	8001860 <HAL_GPIO_Init+0x130>
          break;
 800185e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2bff      	cmp	r3, #255	; 0xff
 8001864:	d801      	bhi.n	800186a <HAL_GPIO_Init+0x13a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	e001      	b.n	800186e <HAL_GPIO_Init+0x13e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3304      	adds	r3, #4
 800186e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d802      	bhi.n	800187c <HAL_GPIO_Init+0x14c>
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	e002      	b.n	8001882 <HAL_GPIO_Init+0x152>
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	3b08      	subs	r3, #8
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	210f      	movs	r1, #15
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	401a      	ands	r2, r3
 8001894:	6a39      	ldr	r1, [r7, #32]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	431a      	orrs	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80c1 	beq.w	8001a32 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018b0:	4b53      	ldr	r3, [pc, #332]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a52      	ldr	r2, [pc, #328]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b50      	ldr	r3, [pc, #320]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c8:	4a4e      	ldr	r2, [pc, #312]	; (8001a04 <HAL_GPIO_Init+0x2d4>)
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a46      	ldr	r2, [pc, #280]	; (8001a08 <HAL_GPIO_Init+0x2d8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d01f      	beq.n	8001934 <HAL_GPIO_Init+0x204>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a45      	ldr	r2, [pc, #276]	; (8001a0c <HAL_GPIO_Init+0x2dc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d019      	beq.n	8001930 <HAL_GPIO_Init+0x200>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a44      	ldr	r2, [pc, #272]	; (8001a10 <HAL_GPIO_Init+0x2e0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d013      	beq.n	800192c <HAL_GPIO_Init+0x1fc>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a43      	ldr	r2, [pc, #268]	; (8001a14 <HAL_GPIO_Init+0x2e4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00d      	beq.n	8001928 <HAL_GPIO_Init+0x1f8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a42      	ldr	r2, [pc, #264]	; (8001a18 <HAL_GPIO_Init+0x2e8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d007      	beq.n	8001924 <HAL_GPIO_Init+0x1f4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a41      	ldr	r2, [pc, #260]	; (8001a1c <HAL_GPIO_Init+0x2ec>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d101      	bne.n	8001920 <HAL_GPIO_Init+0x1f0>
 800191c:	2305      	movs	r3, #5
 800191e:	e00a      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001920:	2306      	movs	r3, #6
 8001922:	e008      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001924:	2304      	movs	r3, #4
 8001926:	e006      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001928:	2303      	movs	r3, #3
 800192a:	e004      	b.n	8001936 <HAL_GPIO_Init+0x206>
 800192c:	2302      	movs	r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001934:	2300      	movs	r3, #0
 8001936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001938:	f002 0203 	and.w	r2, r2, #3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4093      	lsls	r3, r2
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001946:	492f      	ldr	r1, [pc, #188]	; (8001a04 <HAL_GPIO_Init+0x2d4>)
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001960:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	492e      	ldr	r1, [pc, #184]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	600b      	str	r3, [r1, #0]
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800196e:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	43db      	mvns	r3, r3
 8001976:	492a      	ldr	r1, [pc, #168]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 8001978:	4013      	ands	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	4924      	ldr	r1, [pc, #144]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	43db      	mvns	r3, r3
 800199e:	4920      	ldr	r1, [pc, #128]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	491a      	ldr	r1, [pc, #104]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	4916      	ldr	r1, [pc, #88]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d025      	beq.n	8001a24 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	4910      	ldr	r1, [pc, #64]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60cb      	str	r3, [r1, #12]
 80019e4:	e025      	b.n	8001a32 <HAL_GPIO_Init+0x302>
 80019e6:	bf00      	nop
 80019e8:	10320000 	.word	0x10320000
 80019ec:	10310000 	.word	0x10310000
 80019f0:	10220000 	.word	0x10220000
 80019f4:	10210000 	.word	0x10210000
 80019f8:	10120000 	.word	0x10120000
 80019fc:	10110000 	.word	0x10110000
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010000 	.word	0x40010000
 8001a08:	40010800 	.word	0x40010800
 8001a0c:	40010c00 	.word	0x40010c00
 8001a10:	40011000 	.word	0x40011000
 8001a14:	40011400 	.word	0x40011400
 8001a18:	40011800 	.word	0x40011800
 8001a1c:	40011c00 	.word	0x40011c00
 8001a20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_GPIO_Init+0x324>)
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	4909      	ldr	r1, [pc, #36]	; (8001a54 <HAL_GPIO_Init+0x324>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	3301      	adds	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f47f ae7e 	bne.w	8001744 <HAL_GPIO_Init+0x14>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	372c      	adds	r7, #44	; 0x2c
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e26c      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8087 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa8:	4b92      	ldr	r3, [pc, #584]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d00c      	beq.n	8001ace <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab4:	4b8f      	ldr	r3, [pc, #572]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d112      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x5e>
 8001ac0:	4b8c      	ldr	r3, [pc, #560]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001acc:	d10b      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ace:	4b89      	ldr	r3, [pc, #548]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d06c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x12c>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d168      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e246      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x76>
 8001af0:	4b80      	ldr	r3, [pc, #512]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a7f      	ldr	r2, [pc, #508]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e02e      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x98>
 8001b06:	4b7b      	ldr	r3, [pc, #492]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a7a      	ldr	r2, [pc, #488]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b78      	ldr	r3, [pc, #480]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a77      	ldr	r2, [pc, #476]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e01d      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0xbc>
 8001b2a:	4b72      	ldr	r3, [pc, #456]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a71      	ldr	r2, [pc, #452]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6e      	ldr	r2, [pc, #440]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001b44:	4b6b      	ldr	r3, [pc, #428]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a6a      	ldr	r2, [pc, #424]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b68      	ldr	r3, [pc, #416]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a67      	ldr	r2, [pc, #412]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff f9b6 	bl	8000ed4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f9b2 	bl	8000ed4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1fa      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0xe4>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f9a2 	bl	8000ed4 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff f99e 	bl	8000ed4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1e6      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x10c>
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d063      	beq.n	8001c8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc2:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bce:	4b49      	ldr	r3, [pc, #292]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d11c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x18c>
 8001bda:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d116      	bne.n	8001c14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	4b43      	ldr	r3, [pc, #268]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_RCC_OscConfig+0x176>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e1ba      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4939      	ldr	r1, [pc, #228]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	e03a      	b.n	8001c8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1c:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff f957 	bl	8000ed4 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f953 	bl	8000ed4 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e19b      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4927      	ldr	r1, [pc, #156]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
 8001c5c:	e015      	b.n	8001c8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5e:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff f936 	bl	8000ed4 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f932 	bl	8000ed4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e17a      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d03a      	beq.n	8001d0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d019      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_RCC_OscConfig+0x274>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f916 	bl	8000ed4 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cac:	f7ff f912 	bl	8000ed4 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e15a      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f000 faa6 	bl	800221c <RCC_Delay>
 8001cd0:	e01c      	b.n	8001d0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_RCC_OscConfig+0x274>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff f8fc 	bl	8000ed4 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cde:	e00f      	b.n	8001d00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff f8f8 	bl	8000ed4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d908      	bls.n	8001d00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e140      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	42420000 	.word	0x42420000
 8001cfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	4b9e      	ldr	r3, [pc, #632]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1e9      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a6 	beq.w	8001e66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1e:	4b97      	ldr	r3, [pc, #604]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10d      	bne.n	8001d46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	4b94      	ldr	r3, [pc, #592]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	4a93      	ldr	r2, [pc, #588]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d34:	61d3      	str	r3, [r2, #28]
 8001d36:	4b91      	ldr	r3, [pc, #580]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d42:	2301      	movs	r3, #1
 8001d44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d46:	4b8e      	ldr	r3, [pc, #568]	; (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d118      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d52:	4b8b      	ldr	r3, [pc, #556]	; (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a8a      	ldr	r2, [pc, #552]	; (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff f8b9 	bl	8000ed4 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d66:	f7ff f8b5 	bl	8000ed4 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b64      	cmp	r3, #100	; 0x64
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e0fd      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d78:	4b81      	ldr	r3, [pc, #516]	; (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x312>
 8001d8c:	4b7b      	ldr	r3, [pc, #492]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a7a      	ldr	r2, [pc, #488]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e02d      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x334>
 8001da2:	4b76      	ldr	r3, [pc, #472]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a75      	ldr	r2, [pc, #468]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6213      	str	r3, [r2, #32]
 8001dae:	4b73      	ldr	r3, [pc, #460]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a72      	ldr	r2, [pc, #456]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	e01c      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b05      	cmp	r3, #5
 8001dc2:	d10c      	bne.n	8001dde <HAL_RCC_OscConfig+0x356>
 8001dc4:	4b6d      	ldr	r3, [pc, #436]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a6c      	ldr	r2, [pc, #432]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	4b6a      	ldr	r3, [pc, #424]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a69      	ldr	r2, [pc, #420]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6213      	str	r3, [r2, #32]
 8001ddc:	e00b      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001dde:	4b67      	ldr	r3, [pc, #412]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a66      	ldr	r2, [pc, #408]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	4b64      	ldr	r3, [pc, #400]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a63      	ldr	r2, [pc, #396]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d015      	beq.n	8001e2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff f869 	bl	8000ed4 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7ff f865 	bl	8000ed4 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e0ab      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	4b57      	ldr	r3, [pc, #348]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ee      	beq.n	8001e06 <HAL_RCC_OscConfig+0x37e>
 8001e28:	e014      	b.n	8001e54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff f853 	bl	8000ed4 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7ff f84f 	bl	8000ed4 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e095      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e48:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ee      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d105      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5a:	4b48      	ldr	r3, [pc, #288]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a47      	ldr	r2, [pc, #284]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8081 	beq.w	8001f72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e70:	4b42      	ldr	r3, [pc, #264]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d061      	beq.n	8001f40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d146      	bne.n	8001f12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e84:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <HAL_RCC_OscConfig+0x4fc>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff f823 	bl	8000ed4 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e92:	f7ff f81f 	bl	8000ed4 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e067      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eba:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	492d      	ldr	r1, [pc, #180]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a19      	ldr	r1, [r3, #32]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	430b      	orrs	r3, r1
 8001ede:	4927      	ldr	r1, [pc, #156]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x4fc>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe fff3 	bl	8000ed4 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7fe ffef 	bl	8000ed4 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e037      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x46a>
 8001f10:	e02f      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <HAL_RCC_OscConfig+0x4fc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7fe ffdc 	bl	8000ed4 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7fe ffd8 	bl	8000ed4 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e020      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x498>
 8001f3e:	e018      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e013      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40007000 	.word	0x40007000
 8001f84:	42420060 	.word	0x42420060

08001f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0d0      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d910      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b67      	ldr	r3, [pc, #412]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	4965      	ldr	r1, [pc, #404]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0b8      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe4:	4b59      	ldr	r3, [pc, #356]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ffc:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002006:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	494d      	ldr	r1, [pc, #308]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d040      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d115      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e07f      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	4b41      	ldr	r3, [pc, #260]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e073      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06b      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f023 0203 	bic.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4936      	ldr	r1, [pc, #216]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002078:	f7fe ff2c 	bl	8000ed4 <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	e00a      	b.n	8002096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	f7fe ff28 	bl	8000ed4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e053      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 020c 	and.w	r2, r3, #12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1eb      	bne.n	8002080 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d210      	bcs.n	80020d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 0207 	bic.w	r2, r3, #7
 80020be:	4922      	ldr	r1, [pc, #136]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e032      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4916      	ldr	r1, [pc, #88]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	490e      	ldr	r1, [pc, #56]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002116:	f000 f821 	bl	800215c <HAL_RCC_GetSysClockFreq>
 800211a:	4602      	mov	r2, r0
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	490a      	ldr	r1, [pc, #40]	; (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	5ccb      	ldrb	r3, [r1, r3]
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x1cc>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x1d0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fe8a 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40022000 	.word	0x40022000
 800214c:	40021000 	.word	0x40021000
 8002150:	08005080 	.word	0x08005080
 8002154:	200000b8 	.word	0x200000b8
 8002158:	200000bc 	.word	0x200000bc

0800215c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	b490      	push	{r4, r7}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002162:	4b2a      	ldr	r3, [pc, #168]	; (800220c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002164:	1d3c      	adds	r4, r7, #4
 8002166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800216c:	f240 2301 	movw	r3, #513	; 0x201
 8002170:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002186:	4b22      	ldr	r3, [pc, #136]	; (8002210 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b04      	cmp	r3, #4
 8002194:	d002      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x40>
 8002196:	2b08      	cmp	r3, #8
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x46>
 800219a:	e02d      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_RCC_GetSysClockFreq+0xb8>)
 800219e:	623b      	str	r3, [r7, #32]
      break;
 80021a0:	e02d      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	0c9b      	lsrs	r3, r3, #18
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ae:	4413      	add	r3, r2
 80021b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0c5b      	lsrs	r3, r3, #17
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ce:	4413      	add	r3, r2
 80021d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021da:	fb02 f203 	mul.w	r2, r2, r3
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
 80021e6:	e004      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021ec:	fb02 f303 	mul.w	r3, r2, r3
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	623b      	str	r3, [r7, #32]
      break;
 80021f6:	e002      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fa:	623b      	str	r3, [r7, #32]
      break;
 80021fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bc90      	pop	{r4, r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	08005010 	.word	0x08005010
 8002210:	40021000 	.word	0x40021000
 8002214:	007a1200 	.word	0x007a1200
 8002218:	003d0900 	.word	0x003d0900

0800221c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <RCC_Delay+0x34>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <RCC_Delay+0x38>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0a5b      	lsrs	r3, r3, #9
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002238:	bf00      	nop
  }
  while (Delay --);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	60fa      	str	r2, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f9      	bne.n	8002238 <RCC_Delay+0x1c>
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	200000b8 	.word	0x200000b8
 8002254:	10624dd3 	.word	0x10624dd3

08002258 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800225e:	f3ef 8305 	mrs	r3, IPSR
 8002262:	60bb      	str	r3, [r7, #8]
  return(result);
 8002264:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800226a:	f3ef 8310 	mrs	r3, PRIMASK
 800226e:	607b      	str	r3, [r7, #4]
  return(result);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <osKernelInitialize+0x32>
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <osKernelInitialize+0x60>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d109      	bne.n	8002292 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800227e:	f3ef 8311 	mrs	r3, BASEPRI
 8002282:	603b      	str	r3, [r7, #0]
  return(result);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800228a:	f06f 0305 	mvn.w	r3, #5
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e00c      	b.n	80022ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <osKernelInitialize+0x60>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <osKernelInitialize+0x60>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e002      	b.n	80022ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80022ac:	68fb      	ldr	r3, [r7, #12]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	20000148 	.word	0x20000148

080022bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022c2:	f3ef 8305 	mrs	r3, IPSR
 80022c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80022c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10f      	bne.n	80022ee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ce:	f3ef 8310 	mrs	r3, PRIMASK
 80022d2:	607b      	str	r3, [r7, #4]
  return(result);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <osKernelStart+0x32>
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <osKernelStart+0x64>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d109      	bne.n	80022f6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022e2:	f3ef 8311 	mrs	r3, BASEPRI
 80022e6:	603b      	str	r3, [r7, #0]
  return(result);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80022ee:	f06f 0305 	mvn.w	r3, #5
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e00e      	b.n	8002314 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <osKernelStart+0x64>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <osKernelStart+0x64>)
 8002300:	2202      	movs	r2, #2
 8002302:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002304:	f001 f890 	bl	8003428 <vTaskStartScheduler>
      stat = osOK;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e002      	b.n	8002314 <osKernelStart+0x58>
    } else {
      stat = osError;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002314:	68fb      	ldr	r3, [r7, #12]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000148 	.word	0x20000148

08002324 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b092      	sub	sp, #72	; 0x48
 8002328:	af04      	add	r7, sp, #16
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002334:	f3ef 8305 	mrs	r3, IPSR
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 8094 	bne.w	800246a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002342:	f3ef 8310 	mrs	r3, PRIMASK
 8002346:	623b      	str	r3, [r7, #32]
  return(result);
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 808d 	bne.w	800246a <osThreadNew+0x146>
 8002350:	4b48      	ldr	r3, [pc, #288]	; (8002474 <osThreadNew+0x150>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d106      	bne.n	8002366 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002358:	f3ef 8311 	mrs	r3, BASEPRI
 800235c:	61fb      	str	r3, [r7, #28]
  return(result);
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	2b00      	cmp	r3, #0
 8002362:	f040 8082 	bne.w	800246a <osThreadNew+0x146>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d07e      	beq.n	800246a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002370:	2318      	movs	r3, #24
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002374:	2300      	movs	r3, #0
 8002376:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002378:	f107 031b 	add.w	r3, r7, #27
 800237c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d045      	beq.n	8002416 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <osThreadNew+0x74>
        name = attr->name;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <osThreadNew+0x9a>
 80023ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ae:	2b38      	cmp	r3, #56	; 0x38
 80023b0:	d805      	bhi.n	80023be <osThreadNew+0x9a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <osThreadNew+0x9e>
        return (NULL);
 80023be:	2300      	movs	r3, #0
 80023c0:	e054      	b.n	800246c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00e      	beq.n	80023f8 <osThreadNew+0xd4>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2bbb      	cmp	r3, #187	; 0xbb
 80023e0:	d90a      	bls.n	80023f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d006      	beq.n	80023f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <osThreadNew+0xd4>
        mem = 1;
 80023f2:	2301      	movs	r3, #1
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023f6:	e010      	b.n	800241a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10c      	bne.n	800241a <osThreadNew+0xf6>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d108      	bne.n	800241a <osThreadNew+0xf6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d104      	bne.n	800241a <osThreadNew+0xf6>
          mem = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
 8002414:	e001      	b.n	800241a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	2b01      	cmp	r3, #1
 800241e:	d110      	bne.n	8002442 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002428:	9202      	str	r2, [sp, #8]
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002434:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fe12 	bl	8003060 <xTaskCreateStatic>
 800243c:	4603      	mov	r3, r0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	e013      	b.n	800246a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	2b00      	cmp	r3, #0
 8002446:	d110      	bne.n	800246a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244a:	b29a      	uxth	r2, r3
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fe5c 	bl	8003118 <xTaskCreate>
 8002460:	4603      	mov	r3, r0
 8002462:	2b01      	cmp	r3, #1
 8002464:	d001      	beq.n	800246a <osThreadNew+0x146>
          hTask = NULL;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800246a:	697b      	ldr	r3, [r7, #20]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3738      	adds	r7, #56	; 0x38
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000148 	.word	0x20000148

08002478 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002480:	f3ef 8305 	mrs	r3, IPSR
 8002484:	613b      	str	r3, [r7, #16]
  return(result);
 8002486:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10f      	bne.n	80024ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800248c:	f3ef 8310 	mrs	r3, PRIMASK
 8002490:	60fb      	str	r3, [r7, #12]
  return(result);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d109      	bne.n	80024ac <osDelay+0x34>
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <osDelay+0x58>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d109      	bne.n	80024b4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024a0:	f3ef 8311 	mrs	r3, BASEPRI
 80024a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <osDelay+0x3c>
    stat = osErrorISR;
 80024ac:	f06f 0305 	mvn.w	r3, #5
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	e007      	b.n	80024c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 ff7e 	bl	80033c0 <vTaskDelay>
    }
  }

  return (stat);
 80024c4:	697b      	ldr	r3, [r7, #20]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000148 	.word	0x20000148

080024d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a06      	ldr	r2, [pc, #24]	; (80024fc <vApplicationGetIdleTaskMemory+0x28>)
 80024e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4a05      	ldr	r2, [pc, #20]	; (8002500 <vApplicationGetIdleTaskMemory+0x2c>)
 80024ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	601a      	str	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	2000014c 	.word	0x2000014c
 8002500:	20000208 	.word	0x20000208

08002504 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <vApplicationGetTimerTaskMemory+0x2c>)
 8002514:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	4a06      	ldr	r2, [pc, #24]	; (8002534 <vApplicationGetTimerTaskMemory+0x30>)
 800251a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002522:	601a      	str	r2, [r3, #0]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000408 	.word	0x20000408
 8002534:	200004c4 	.word	0x200004c4

08002538 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f103 0208 	add.w	r2, r3, #8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f04f 32ff 	mov.w	r2, #4294967295
 8002550:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f103 0208 	add.w	r2, r3, #8
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f103 0208 	add.w	r2, r3, #8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800258e:	b480      	push	{r7}
 8002590:	b085      	sub	sp, #20
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	601a      	str	r2, [r3, #0]
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ea:	d103      	bne.n	80025f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e00c      	b.n	800260e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3308      	adds	r3, #8
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e002      	b.n	8002602 <vListInsert+0x2e>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	429a      	cmp	r2, r3
 800260c:	d2f6      	bcs.n	80025fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	601a      	str	r2, [r3, #0]
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6892      	ldr	r2, [r2, #8]
 800265a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6852      	ldr	r2, [r2, #4]
 8002664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	d103      	bne.n	8002678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	1e5a      	subs	r2, r3, #1
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
	...

08002698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10a      	bne.n	80026c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026be:	bf00      	nop
 80026c0:	e7fe      	b.n	80026c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026c2:	f001 fff3 	bl	80046ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ce:	68f9      	ldr	r1, [r7, #12]
 80026d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	441a      	add	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f2:	3b01      	subs	r3, #1
 80026f4:	68f9      	ldr	r1, [r7, #12]
 80026f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	441a      	add	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	22ff      	movs	r2, #255	; 0xff
 8002706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	22ff      	movs	r2, #255	; 0xff
 800270e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d114      	bne.n	8002742 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01a      	beq.n	8002756 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3310      	adds	r3, #16
 8002724:	4618      	mov	r0, r3
 8002726:	f001 f91b 	bl	8003960 <xTaskRemoveFromEventList>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d012      	beq.n	8002756 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <xQueueGenericReset+0xcc>)
 8002732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	e009      	b.n	8002756 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3310      	adds	r3, #16
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fef6 	bl	8002538 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3324      	adds	r3, #36	; 0x24
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fef1 	bl	8002538 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002756:	f001 ffd9 	bl	800470c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	e000ed04 	.word	0xe000ed04

08002768 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08e      	sub	sp, #56	; 0x38
 800276c:	af02      	add	r7, sp, #8
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10a      	bne.n	8002792 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002780:	f383 8811 	msr	BASEPRI, r3
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800278e:	bf00      	nop
 8002790:	e7fe      	b.n	8002790 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027aa:	bf00      	nop
 80027ac:	e7fe      	b.n	80027ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <xQueueGenericCreateStatic+0x52>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <xQueueGenericCreateStatic+0x56>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <xQueueGenericCreateStatic+0x58>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	623b      	str	r3, [r7, #32]
}
 80027d6:	bf00      	nop
 80027d8:	e7fe      	b.n	80027d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <xQueueGenericCreateStatic+0x7e>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <xQueueGenericCreateStatic+0x82>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <xQueueGenericCreateStatic+0x84>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80027f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	61fb      	str	r3, [r7, #28]
}
 8002802:	bf00      	nop
 8002804:	e7fe      	b.n	8002804 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002806:	2350      	movs	r3, #80	; 0x50
 8002808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b50      	cmp	r3, #80	; 0x50
 800280e:	d00a      	beq.n	8002826 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	61bb      	str	r3, [r7, #24]
}
 8002822:	bf00      	nop
 8002824:	e7fe      	b.n	8002824 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00d      	beq.n	800284c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002838:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f805 	bl	8002856 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800284e:	4618      	mov	r0, r3
 8002850:	3730      	adds	r7, #48	; 0x30
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d103      	bne.n	8002872 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e002      	b.n	8002878 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002884:	2101      	movs	r1, #1
 8002886:	69b8      	ldr	r0, [r7, #24]
 8002888:	f7ff ff06 	bl	8002698 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08e      	sub	sp, #56	; 0x38
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028aa:	2300      	movs	r3, #0
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <xQueueGenericSend+0x32>
	__asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028ca:	bf00      	nop
 80028cc:	e7fe      	b.n	80028cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d103      	bne.n	80028dc <xQueueGenericSend+0x40>
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <xQueueGenericSend+0x44>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <xQueueGenericSend+0x46>
 80028e0:	2300      	movs	r3, #0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <xQueueGenericSend+0x60>
	__asm volatile
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028f8:	bf00      	nop
 80028fa:	e7fe      	b.n	80028fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d103      	bne.n	800290a <xQueueGenericSend+0x6e>
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <xQueueGenericSend+0x72>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <xQueueGenericSend+0x74>
 800290e:	2300      	movs	r3, #0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <xQueueGenericSend+0x8e>
	__asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	623b      	str	r3, [r7, #32]
}
 8002926:	bf00      	nop
 8002928:	e7fe      	b.n	8002928 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800292a:	f001 f9df 	bl	8003cec <xTaskGetSchedulerState>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <xQueueGenericSend+0x9e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <xQueueGenericSend+0xa2>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <xQueueGenericSend+0xa4>
 800293e:	2300      	movs	r3, #0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <xQueueGenericSend+0xbe>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	61fb      	str	r3, [r7, #28]
}
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800295a:	f001 fea7 	bl	80046ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	429a      	cmp	r2, r3
 8002968:	d302      	bcc.n	8002970 <xQueueGenericSend+0xd4>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d129      	bne.n	80029c4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002976:	f000 fa07 	bl	8002d88 <prvCopyDataToQueue>
 800297a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d010      	beq.n	80029a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	3324      	adds	r3, #36	; 0x24
 8002988:	4618      	mov	r0, r3
 800298a:	f000 ffe9 	bl	8003960 <xTaskRemoveFromEventList>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d013      	beq.n	80029bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002994:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <xQueueGenericSend+0x1f8>)
 8002996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	e00a      	b.n	80029bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029ac:	4b39      	ldr	r3, [pc, #228]	; (8002a94 <xQueueGenericSend+0x1f8>)
 80029ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029bc:	f001 fea6 	bl	800470c <vPortExitCritical>
				return pdPASS;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e063      	b.n	8002a8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029ca:	f001 fe9f 	bl	800470c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e05c      	b.n	8002a8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	4618      	mov	r0, r3
 80029de:	f001 f823 	bl	8003a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029e2:	2301      	movs	r3, #1
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029e6:	f001 fe91 	bl	800470c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029ea:	f000 fd8d 	bl	8003508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029ee:	f001 fe5d 	bl	80046ac <vPortEnterCritical>
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029f8:	b25b      	sxtb	r3, r3
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fe:	d103      	bne.n	8002a08 <xQueueGenericSend+0x16c>
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d103      	bne.n	8002a1e <xQueueGenericSend+0x182>
 8002a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a1e:	f001 fe75 	bl	800470c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a22:	1d3a      	adds	r2, r7, #4
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f001 f812 	bl	8003a54 <xTaskCheckForTimeOut>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d124      	bne.n	8002a80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a38:	f000 fa9e 	bl	8002f78 <prvIsQueueFull>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d018      	beq.n	8002a74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	3310      	adds	r3, #16
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 ff38 	bl	80038c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a52:	f000 fa29 	bl	8002ea8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a56:	f000 fd65 	bl	8003524 <xTaskResumeAll>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f47f af7c 	bne.w	800295a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <xQueueGenericSend+0x1f8>)
 8002a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	e772      	b.n	800295a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a76:	f000 fa17 	bl	8002ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a7a:	f000 fd53 	bl	8003524 <xTaskResumeAll>
 8002a7e:	e76c      	b.n	800295a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a82:	f000 fa11 	bl	8002ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a86:	f000 fd4d 	bl	8003524 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a8a:	2300      	movs	r3, #0
		}
	}
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3738      	adds	r7, #56	; 0x38
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	e000ed04 	.word	0xe000ed04

08002a98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08e      	sub	sp, #56	; 0x38
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ac2:	bf00      	nop
 8002ac4:	e7fe      	b.n	8002ac4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d103      	bne.n	8002ad4 <xQueueGenericSendFromISR+0x3c>
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <xQueueGenericSendFromISR+0x40>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <xQueueGenericSendFromISR+0x42>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	623b      	str	r3, [r7, #32]
}
 8002af0:	bf00      	nop
 8002af2:	e7fe      	b.n	8002af2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d103      	bne.n	8002b02 <xQueueGenericSendFromISR+0x6a>
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <xQueueGenericSendFromISR+0x6e>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <xQueueGenericSendFromISR+0x70>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	61fb      	str	r3, [r7, #28]
}
 8002b1e:	bf00      	nop
 8002b20:	e7fe      	b.n	8002b20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b22:	f001 fe85 	bl	8004830 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b26:	f3ef 8211 	mrs	r2, BASEPRI
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	61ba      	str	r2, [r7, #24]
 8002b3c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b3e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <xQueueGenericSendFromISR+0xbc>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d12c      	bne.n	8002bae <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b64:	f000 f910 	bl	8002d88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b68:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d112      	bne.n	8002b98 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d016      	beq.n	8002ba8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	3324      	adds	r3, #36	; 0x24
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 feee 	bl	8003960 <xTaskRemoveFromEventList>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00e      	beq.n	8002ba8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00b      	beq.n	8002ba8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e007      	b.n	8002ba8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	b25a      	sxtb	r2, r3
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002bac:	e001      	b.n	8002bb2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002bbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3738      	adds	r7, #56	; 0x38
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08c      	sub	sp, #48	; 0x30
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <xQueueReceive+0x30>
	__asm volatile
 8002be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be6:	f383 8811 	msr	BASEPRI, r3
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	f3bf 8f4f 	dsb	sy
 8002bf2:	623b      	str	r3, [r7, #32]
}
 8002bf4:	bf00      	nop
 8002bf6:	e7fe      	b.n	8002bf6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <xQueueReceive+0x3e>
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <xQueueReceive+0x42>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <xQueueReceive+0x44>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <xQueueReceive+0x5e>
	__asm volatile
 8002c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	61fb      	str	r3, [r7, #28]
}
 8002c22:	bf00      	nop
 8002c24:	e7fe      	b.n	8002c24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c26:	f001 f861 	bl	8003cec <xTaskGetSchedulerState>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <xQueueReceive+0x6e>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <xQueueReceive+0x72>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <xQueueReceive+0x74>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <xQueueReceive+0x8e>
	__asm volatile
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	61bb      	str	r3, [r7, #24]
}
 8002c52:	bf00      	nop
 8002c54:	e7fe      	b.n	8002c54 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c56:	f001 fd29 	bl	80046ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01f      	beq.n	8002ca6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c6a:	f000 f8f7 	bl	8002e5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	1e5a      	subs	r2, r3, #1
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00f      	beq.n	8002c9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	3310      	adds	r3, #16
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fe6c 	bl	8003960 <xTaskRemoveFromEventList>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c8e:	4b3d      	ldr	r3, [pc, #244]	; (8002d84 <xQueueReceive+0x1bc>)
 8002c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c9e:	f001 fd35 	bl	800470c <vPortExitCritical>
				return pdPASS;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e069      	b.n	8002d7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d103      	bne.n	8002cb4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cac:	f001 fd2e 	bl	800470c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e062      	b.n	8002d7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cba:	f107 0310 	add.w	r3, r7, #16
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 feb2 	bl	8003a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cc8:	f001 fd20 	bl	800470c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ccc:	f000 fc1c 	bl	8003508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cd0:	f001 fcec 	bl	80046ac <vPortEnterCritical>
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cda:	b25b      	sxtb	r3, r3
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d103      	bne.n	8002cea <xQueueReceive+0x122>
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cf0:	b25b      	sxtb	r3, r3
 8002cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf6:	d103      	bne.n	8002d00 <xQueueReceive+0x138>
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d00:	f001 fd04 	bl	800470c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d04:	1d3a      	adds	r2, r7, #4
 8002d06:	f107 0310 	add.w	r3, r7, #16
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fea1 	bl	8003a54 <xTaskCheckForTimeOut>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d123      	bne.n	8002d60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d1a:	f000 f917 	bl	8002f4c <prvIsQueueEmpty>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d017      	beq.n	8002d54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	3324      	adds	r3, #36	; 0x24
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fdc7 	bl	80038c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d34:	f000 f8b8 	bl	8002ea8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d38:	f000 fbf4 	bl	8003524 <xTaskResumeAll>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d189      	bne.n	8002c56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <xQueueReceive+0x1bc>)
 8002d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	e780      	b.n	8002c56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d56:	f000 f8a7 	bl	8002ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d5a:	f000 fbe3 	bl	8003524 <xTaskResumeAll>
 8002d5e:	e77a      	b.n	8002c56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d62:	f000 f8a1 	bl	8002ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d66:	f000 fbdd 	bl	8003524 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d6c:	f000 f8ee 	bl	8002f4c <prvIsQueueEmpty>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f43f af6f 	beq.w	8002c56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3730      	adds	r7, #48	; 0x30
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	e000ed04 	.word	0xe000ed04

08002d88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10d      	bne.n	8002dc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d14d      	bne.n	8002e4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 ffb8 	bl	8003d28 <xTaskPriorityDisinherit>
 8002db8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	e043      	b.n	8002e4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d119      	bne.n	8002dfc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6898      	ldr	r0, [r3, #8]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	f001 ff68 	bl	8004ca8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	441a      	add	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d32b      	bcc.n	8002e4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	e026      	b.n	8002e4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	68d8      	ldr	r0, [r3, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	461a      	mov	r2, r3
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	f001 ff4e 	bl	8004ca8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	425b      	negs	r3, r3
 8002e16:	441a      	add	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d207      	bcs.n	8002e38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	425b      	negs	r3, r3
 8002e32:	441a      	add	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d105      	bne.n	8002e4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e52:	697b      	ldr	r3, [r7, #20]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d018      	beq.n	8002ea0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	441a      	add	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d303      	bcc.n	8002e90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68d9      	ldr	r1, [r3, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	461a      	mov	r2, r3
 8002e9a:	6838      	ldr	r0, [r7, #0]
 8002e9c:	f001 ff04 	bl	8004ca8 <memcpy>
	}
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002eb0:	f001 fbfc 	bl	80046ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ebc:	e011      	b.n	8002ee2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d012      	beq.n	8002eec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3324      	adds	r3, #36	; 0x24
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fd48 	bl	8003960 <xTaskRemoveFromEventList>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ed6:	f000 fe1f 	bl	8003b18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	dce9      	bgt.n	8002ebe <prvUnlockQueue+0x16>
 8002eea:	e000      	b.n	8002eee <prvUnlockQueue+0x46>
					break;
 8002eec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	22ff      	movs	r2, #255	; 0xff
 8002ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002ef6:	f001 fc09 	bl	800470c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002efa:	f001 fbd7 	bl	80046ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f06:	e011      	b.n	8002f2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d012      	beq.n	8002f36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3310      	adds	r3, #16
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fd23 	bl	8003960 <xTaskRemoveFromEventList>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f20:	f000 fdfa 	bl	8003b18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f24:	7bbb      	ldrb	r3, [r7, #14]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	dce9      	bgt.n	8002f08 <prvUnlockQueue+0x60>
 8002f34:	e000      	b.n	8002f38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	22ff      	movs	r2, #255	; 0xff
 8002f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f40:	f001 fbe4 	bl	800470c <vPortExitCritical>
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f54:	f001 fbaa 	bl	80046ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f60:	2301      	movs	r3, #1
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e001      	b.n	8002f6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f6a:	f001 fbcf 	bl	800470c <vPortExitCritical>

	return xReturn;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f80:	f001 fb94 	bl	80046ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d102      	bne.n	8002f96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f90:	2301      	movs	r3, #1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	e001      	b.n	8002f9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f9a:	f001 fbb7 	bl	800470c <vPortExitCritical>

	return xReturn;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	e014      	b.n	8002fe2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002fb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <vQueueAddToRegistry+0x4c>)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10b      	bne.n	8002fdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002fc4:	490b      	ldr	r1, [pc, #44]	; (8002ff4 <vQueueAddToRegistry+0x4c>)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <vQueueAddToRegistry+0x4c>)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002fda:	e006      	b.n	8002fea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b07      	cmp	r3, #7
 8002fe6:	d9e7      	bls.n	8002fb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	20001bb4 	.word	0x20001bb4

08002ff8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003008:	f001 fb50 	bl	80046ac <vPortEnterCritical>
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003012:	b25b      	sxtb	r3, r3
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d103      	bne.n	8003022 <vQueueWaitForMessageRestricted+0x2a>
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003028:	b25b      	sxtb	r3, r3
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d103      	bne.n	8003038 <vQueueWaitForMessageRestricted+0x40>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003038:	f001 fb68 	bl	800470c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	2b00      	cmp	r3, #0
 8003042:	d106      	bne.n	8003052 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3324      	adds	r3, #36	; 0x24
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fc5b 	bl	8003908 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003052:	6978      	ldr	r0, [r7, #20]
 8003054:	f7ff ff28 	bl	8002ea8 <prvUnlockQueue>
	}
 8003058:	bf00      	nop
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08e      	sub	sp, #56	; 0x38
 8003064:	af04      	add	r7, sp, #16
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800306e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	623b      	str	r3, [r7, #32]
}
 8003086:	bf00      	nop
 8003088:	e7fe      	b.n	8003088 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	61fb      	str	r3, [r7, #28]
}
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030a6:	23bc      	movs	r3, #188	; 0xbc
 80030a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2bbc      	cmp	r3, #188	; 0xbc
 80030ae:	d00a      	beq.n	80030c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	61bb      	str	r3, [r7, #24]
}
 80030c2:	bf00      	nop
 80030c4:	e7fe      	b.n	80030c4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01e      	beq.n	800310a <xTaskCreateStatic+0xaa>
 80030cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01b      	beq.n	800310a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030e4:	2300      	movs	r3, #0
 80030e6:	9303      	str	r3, [sp, #12]
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	9302      	str	r3, [sp, #8]
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f851 	bl	80031a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003102:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003104:	f000 f8ec 	bl	80032e0 <prvAddNewTaskToReadyList>
 8003108:	e001      	b.n	800310e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800310e:	697b      	ldr	r3, [r7, #20]
	}
 8003110:	4618      	mov	r0, r3
 8003112:	3728      	adds	r7, #40	; 0x28
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	; 0x30
 800311c:	af04      	add	r7, sp, #16
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4618      	mov	r0, r3
 800312e:	f001 fbbd 	bl	80048ac <pvPortMalloc>
 8003132:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00e      	beq.n	8003158 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800313a:	20bc      	movs	r0, #188	; 0xbc
 800313c:	f001 fbb6 	bl	80048ac <pvPortMalloc>
 8003140:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
 800314e:	e005      	b.n	800315c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003150:	6978      	ldr	r0, [r7, #20]
 8003152:	f001 fc6f 	bl	8004a34 <vPortFree>
 8003156:	e001      	b.n	800315c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d017      	beq.n	8003192 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	2300      	movs	r3, #0
 800316e:	9303      	str	r3, [sp, #12]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	9302      	str	r3, [sp, #8]
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f80f 	bl	80031a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003186:	69f8      	ldr	r0, [r7, #28]
 8003188:	f000 f8aa 	bl	80032e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800318c:	2301      	movs	r3, #1
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	e002      	b.n	8003198 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003198:	69bb      	ldr	r3, [r7, #24]
	}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	461a      	mov	r2, r3
 80031bc:	21a5      	movs	r1, #165	; 0xa5
 80031be:	f001 fd81 	bl	8004cc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031cc:	3b01      	subs	r3, #1
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f023 0307 	bic.w	r3, r3, #7
 80031da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	617b      	str	r3, [r7, #20]
}
 80031f8:	bf00      	nop
 80031fa:	e7fe      	b.n	80031fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	e012      	b.n	8003228 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	4413      	add	r3, r2
 8003208:	7819      	ldrb	r1, [r3, #0]
 800320a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	4413      	add	r3, r2
 8003210:	3334      	adds	r3, #52	; 0x34
 8003212:	460a      	mov	r2, r1
 8003214:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4413      	add	r3, r2
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d006      	beq.n	8003230 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3301      	adds	r3, #1
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	d9e9      	bls.n	8003202 <prvInitialiseNewTask+0x5e>
 800322e:	e000      	b.n	8003232 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003230:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	2b37      	cmp	r3, #55	; 0x37
 800323e:	d901      	bls.n	8003244 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003240:	2337      	movs	r3, #55	; 0x37
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003248:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800324e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	2200      	movs	r2, #0
 8003254:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	3304      	adds	r3, #4
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff f98b 	bl	8002576 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	3318      	adds	r3, #24
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff f986 	bl	8002576 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800326e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800327e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	2200      	movs	r2, #0
 8003284:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	2200      	movs	r2, #0
 800328c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	3354      	adds	r3, #84	; 0x54
 8003294:	2260      	movs	r2, #96	; 0x60
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f001 fd13 	bl	8004cc4 <memset>
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	4a0c      	ldr	r2, [pc, #48]	; (80032d4 <prvInitialiseNewTask+0x130>)
 80032a2:	659a      	str	r2, [r3, #88]	; 0x58
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <prvInitialiseNewTask+0x134>)
 80032a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	4a0b      	ldr	r2, [pc, #44]	; (80032dc <prvInitialiseNewTask+0x138>)
 80032ae:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	69b8      	ldr	r0, [r7, #24]
 80032b6:	f001 f90b 	bl	80044d0 <pxPortInitialiseStack>
 80032ba:	4602      	mov	r2, r0
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80032c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032cc:	bf00      	nop
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	080050b0 	.word	0x080050b0
 80032d8:	080050d0 	.word	0x080050d0
 80032dc:	08005090 	.word	0x08005090

080032e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032e8:	f001 f9e0 	bl	80046ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032ec:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <prvAddNewTaskToReadyList+0xc4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	4a2c      	ldr	r2, [pc, #176]	; (80033a4 <prvAddNewTaskToReadyList+0xc4>)
 80032f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032f6:	4b2c      	ldr	r3, [pc, #176]	; (80033a8 <prvAddNewTaskToReadyList+0xc8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032fe:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <prvAddNewTaskToReadyList+0xc8>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003304:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <prvAddNewTaskToReadyList+0xc4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d110      	bne.n	800332e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800330c:	f000 fc28 	bl	8003b60 <prvInitialiseTaskLists>
 8003310:	e00d      	b.n	800332e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003312:	4b26      	ldr	r3, [pc, #152]	; (80033ac <prvAddNewTaskToReadyList+0xcc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800331a:	4b23      	ldr	r3, [pc, #140]	; (80033a8 <prvAddNewTaskToReadyList+0xc8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	429a      	cmp	r2, r3
 8003326:	d802      	bhi.n	800332e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003328:	4a1f      	ldr	r2, [pc, #124]	; (80033a8 <prvAddNewTaskToReadyList+0xc8>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <prvAddNewTaskToReadyList+0xd0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3301      	adds	r3, #1
 8003334:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <prvAddNewTaskToReadyList+0xd0>)
 8003336:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <prvAddNewTaskToReadyList+0xd0>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003344:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <prvAddNewTaskToReadyList+0xd4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d903      	bls.n	8003354 <prvAddNewTaskToReadyList+0x74>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	4a18      	ldr	r2, [pc, #96]	; (80033b4 <prvAddNewTaskToReadyList+0xd4>)
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <prvAddNewTaskToReadyList+0xd8>)
 8003362:	441a      	add	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f7ff f90f 	bl	800258e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003370:	f001 f9cc 	bl	800470c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003374:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <prvAddNewTaskToReadyList+0xcc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00e      	beq.n	800339a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <prvAddNewTaskToReadyList+0xc8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	429a      	cmp	r2, r3
 8003388:	d207      	bcs.n	800339a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <prvAddNewTaskToReadyList+0xdc>)
 800338c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000d98 	.word	0x20000d98
 80033a8:	200008c4 	.word	0x200008c4
 80033ac:	20000da4 	.word	0x20000da4
 80033b0:	20000db4 	.word	0x20000db4
 80033b4:	20000da0 	.word	0x20000da0
 80033b8:	200008c8 	.word	0x200008c8
 80033bc:	e000ed04 	.word	0xe000ed04

080033c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d017      	beq.n	8003402 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033d2:	4b13      	ldr	r3, [pc, #76]	; (8003420 <vTaskDelay+0x60>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <vTaskDelay+0x30>
	__asm volatile
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	60bb      	str	r3, [r7, #8]
}
 80033ec:	bf00      	nop
 80033ee:	e7fe      	b.n	80033ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80033f0:	f000 f88a 	bl	8003508 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033f4:	2100      	movs	r1, #0
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fd04 	bl	8003e04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033fc:	f000 f892 	bl	8003524 <xTaskResumeAll>
 8003400:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d107      	bne.n	8003418 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <vTaskDelay+0x64>)
 800340a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003418:	bf00      	nop
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000dc0 	.word	0x20000dc0
 8003424:	e000ed04 	.word	0xe000ed04

08003428 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	; 0x28
 800342c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003432:	2300      	movs	r3, #0
 8003434:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003436:	463a      	mov	r2, r7
 8003438:	1d39      	adds	r1, r7, #4
 800343a:	f107 0308 	add.w	r3, r7, #8
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff f848 	bl	80024d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003444:	6839      	ldr	r1, [r7, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	9202      	str	r2, [sp, #8]
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	2300      	movs	r3, #0
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	2300      	movs	r3, #0
 8003454:	460a      	mov	r2, r1
 8003456:	4924      	ldr	r1, [pc, #144]	; (80034e8 <vTaskStartScheduler+0xc0>)
 8003458:	4824      	ldr	r0, [pc, #144]	; (80034ec <vTaskStartScheduler+0xc4>)
 800345a:	f7ff fe01 	bl	8003060 <xTaskCreateStatic>
 800345e:	4603      	mov	r3, r0
 8003460:	4a23      	ldr	r2, [pc, #140]	; (80034f0 <vTaskStartScheduler+0xc8>)
 8003462:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003464:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <vTaskStartScheduler+0xc8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800346c:	2301      	movs	r3, #1
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e001      	b.n	8003476 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d102      	bne.n	8003482 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800347c:	f000 fd16 	bl	8003eac <xTimerCreateTimerTask>
 8003480:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d11b      	bne.n	80034c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	613b      	str	r3, [r7, #16]
}
 800349a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800349c:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <vTaskStartScheduler+0xcc>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3354      	adds	r3, #84	; 0x54
 80034a2:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <vTaskStartScheduler+0xd0>)
 80034a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <vTaskStartScheduler+0xd4>)
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034ae:	4b14      	ldr	r3, [pc, #80]	; (8003500 <vTaskStartScheduler+0xd8>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80034b4:	4b13      	ldr	r3, [pc, #76]	; (8003504 <vTaskStartScheduler+0xdc>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034ba:	f001 f885 	bl	80045c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034be:	e00e      	b.n	80034de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d10a      	bne.n	80034de <vTaskStartScheduler+0xb6>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	60fb      	str	r3, [r7, #12]
}
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <vTaskStartScheduler+0xb4>
}
 80034de:	bf00      	nop
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	08005020 	.word	0x08005020
 80034ec:	08003b31 	.word	0x08003b31
 80034f0:	20000dbc 	.word	0x20000dbc
 80034f4:	200008c4 	.word	0x200008c4
 80034f8:	200000c8 	.word	0x200000c8
 80034fc:	20000db8 	.word	0x20000db8
 8003500:	20000da4 	.word	0x20000da4
 8003504:	20000d9c 	.word	0x20000d9c

08003508 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <vTaskSuspendAll+0x18>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3301      	adds	r3, #1
 8003512:	4a03      	ldr	r2, [pc, #12]	; (8003520 <vTaskSuspendAll+0x18>)
 8003514:	6013      	str	r3, [r2, #0]
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000dc0 	.word	0x20000dc0

08003524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800352e:	2300      	movs	r3, #0
 8003530:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003532:	4b42      	ldr	r3, [pc, #264]	; (800363c <xTaskResumeAll+0x118>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <xTaskResumeAll+0x2c>
	__asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	603b      	str	r3, [r7, #0]
}
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003550:	f001 f8ac 	bl	80046ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003554:	4b39      	ldr	r3, [pc, #228]	; (800363c <xTaskResumeAll+0x118>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3b01      	subs	r3, #1
 800355a:	4a38      	ldr	r2, [pc, #224]	; (800363c <xTaskResumeAll+0x118>)
 800355c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355e:	4b37      	ldr	r3, [pc, #220]	; (800363c <xTaskResumeAll+0x118>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d162      	bne.n	800362c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003566:	4b36      	ldr	r3, [pc, #216]	; (8003640 <xTaskResumeAll+0x11c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d05e      	beq.n	800362c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800356e:	e02f      	b.n	80035d0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003570:	4b34      	ldr	r3, [pc, #208]	; (8003644 <xTaskResumeAll+0x120>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	3318      	adds	r3, #24
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff f861 	bl	8002644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3304      	adds	r3, #4
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff f85c 	bl	8002644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <xTaskResumeAll+0x124>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d903      	bls.n	80035a0 <xTaskResumeAll+0x7c>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	4a2a      	ldr	r2, [pc, #168]	; (8003648 <xTaskResumeAll+0x124>)
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4a27      	ldr	r2, [pc, #156]	; (800364c <xTaskResumeAll+0x128>)
 80035ae:	441a      	add	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f7fe ffe9 	bl	800258e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	4b23      	ldr	r3, [pc, #140]	; (8003650 <xTaskResumeAll+0x12c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d302      	bcc.n	80035d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <xTaskResumeAll+0x130>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035d0:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <xTaskResumeAll+0x120>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1cb      	bne.n	8003570 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035de:	f000 fb61 	bl	8003ca4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035e2:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <xTaskResumeAll+0x134>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d010      	beq.n	8003610 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035ee:	f000 f845 	bl	800367c <xTaskIncrementTick>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80035f8:	4b16      	ldr	r3, [pc, #88]	; (8003654 <xTaskResumeAll+0x130>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3b01      	subs	r3, #1
 8003602:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f1      	bne.n	80035ee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <xTaskResumeAll+0x134>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <xTaskResumeAll+0x130>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003618:	2301      	movs	r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <xTaskResumeAll+0x138>)
 800361e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800362c:	f001 f86e 	bl	800470c <vPortExitCritical>

	return xAlreadyYielded;
 8003630:	68bb      	ldr	r3, [r7, #8]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000dc0 	.word	0x20000dc0
 8003640:	20000d98 	.word	0x20000d98
 8003644:	20000d58 	.word	0x20000d58
 8003648:	20000da0 	.word	0x20000da0
 800364c:	200008c8 	.word	0x200008c8
 8003650:	200008c4 	.word	0x200008c4
 8003654:	20000dac 	.word	0x20000dac
 8003658:	20000da8 	.word	0x20000da8
 800365c:	e000ed04 	.word	0xe000ed04

08003660 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003666:	4b04      	ldr	r3, [pc, #16]	; (8003678 <xTaskGetTickCount+0x18>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800366c:	687b      	ldr	r3, [r7, #4]
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	20000d9c 	.word	0x20000d9c

0800367c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003686:	4b51      	ldr	r3, [pc, #324]	; (80037cc <xTaskIncrementTick+0x150>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f040 808e 	bne.w	80037ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003690:	4b4f      	ldr	r3, [pc, #316]	; (80037d0 <xTaskIncrementTick+0x154>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003698:	4a4d      	ldr	r2, [pc, #308]	; (80037d0 <xTaskIncrementTick+0x154>)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d120      	bne.n	80036e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80036a4:	4b4b      	ldr	r3, [pc, #300]	; (80037d4 <xTaskIncrementTick+0x158>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	603b      	str	r3, [r7, #0]
}
 80036c0:	bf00      	nop
 80036c2:	e7fe      	b.n	80036c2 <xTaskIncrementTick+0x46>
 80036c4:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <xTaskIncrementTick+0x158>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	4b43      	ldr	r3, [pc, #268]	; (80037d8 <xTaskIncrementTick+0x15c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a41      	ldr	r2, [pc, #260]	; (80037d4 <xTaskIncrementTick+0x158>)
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4a41      	ldr	r2, [pc, #260]	; (80037d8 <xTaskIncrementTick+0x15c>)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b40      	ldr	r3, [pc, #256]	; (80037dc <xTaskIncrementTick+0x160>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3301      	adds	r3, #1
 80036de:	4a3f      	ldr	r2, [pc, #252]	; (80037dc <xTaskIncrementTick+0x160>)
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	f000 fadf 	bl	8003ca4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036e6:	4b3e      	ldr	r3, [pc, #248]	; (80037e0 <xTaskIncrementTick+0x164>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d34e      	bcc.n	800378e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036f0:	4b38      	ldr	r3, [pc, #224]	; (80037d4 <xTaskIncrementTick+0x158>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <xTaskIncrementTick+0x82>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <xTaskIncrementTick+0x84>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d004      	beq.n	800370e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003704:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <xTaskIncrementTick+0x164>)
 8003706:	f04f 32ff 	mov.w	r2, #4294967295
 800370a:	601a      	str	r2, [r3, #0]
					break;
 800370c:	e03f      	b.n	800378e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800370e:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <xTaskIncrementTick+0x158>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d203      	bcs.n	800372e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003726:	4a2e      	ldr	r2, [pc, #184]	; (80037e0 <xTaskIncrementTick+0x164>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6013      	str	r3, [r2, #0]
						break;
 800372c:	e02f      	b.n	800378e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	3304      	adds	r3, #4
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe ff86 	bl	8002644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	3318      	adds	r3, #24
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe ff7d 	bl	8002644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374e:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <xTaskIncrementTick+0x168>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d903      	bls.n	800375e <xTaskIncrementTick+0xe2>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <xTaskIncrementTick+0x168>)
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <xTaskIncrementTick+0x16c>)
 800376c:	441a      	add	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3304      	adds	r3, #4
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f7fe ff0a 	bl	800258e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377e:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <xTaskIncrementTick+0x170>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	429a      	cmp	r2, r3
 8003786:	d3b3      	bcc.n	80036f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003788:	2301      	movs	r3, #1
 800378a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800378c:	e7b0      	b.n	80036f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800378e:	4b17      	ldr	r3, [pc, #92]	; (80037ec <xTaskIncrementTick+0x170>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003794:	4914      	ldr	r1, [pc, #80]	; (80037e8 <xTaskIncrementTick+0x16c>)
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d907      	bls.n	80037b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e004      	b.n	80037b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80037ac:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <xTaskIncrementTick+0x174>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3301      	adds	r3, #1
 80037b2:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <xTaskIncrementTick+0x174>)
 80037b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <xTaskIncrementTick+0x178>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80037be:	2301      	movs	r3, #1
 80037c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80037c2:	697b      	ldr	r3, [r7, #20]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000dc0 	.word	0x20000dc0
 80037d0:	20000d9c 	.word	0x20000d9c
 80037d4:	20000d50 	.word	0x20000d50
 80037d8:	20000d54 	.word	0x20000d54
 80037dc:	20000db0 	.word	0x20000db0
 80037e0:	20000db8 	.word	0x20000db8
 80037e4:	20000da0 	.word	0x20000da0
 80037e8:	200008c8 	.word	0x200008c8
 80037ec:	200008c4 	.word	0x200008c4
 80037f0:	20000da8 	.word	0x20000da8
 80037f4:	20000dac 	.word	0x20000dac

080037f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037fe:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <vTaskSwitchContext+0xb0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003806:	4b29      	ldr	r3, [pc, #164]	; (80038ac <vTaskSwitchContext+0xb4>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800380c:	e046      	b.n	800389c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800380e:	4b27      	ldr	r3, [pc, #156]	; (80038ac <vTaskSwitchContext+0xb4>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003814:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <vTaskSwitchContext+0xb8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	e010      	b.n	800383e <vTaskSwitchContext+0x46>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <vTaskSwitchContext+0x40>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	607b      	str	r3, [r7, #4]
}
 8003834:	bf00      	nop
 8003836:	e7fe      	b.n	8003836 <vTaskSwitchContext+0x3e>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3b01      	subs	r3, #1
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	491d      	ldr	r1, [pc, #116]	; (80038b4 <vTaskSwitchContext+0xbc>)
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0e4      	beq.n	800381c <vTaskSwitchContext+0x24>
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4a15      	ldr	r2, [pc, #84]	; (80038b4 <vTaskSwitchContext+0xbc>)
 800385e:	4413      	add	r3, r2
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	3308      	adds	r3, #8
 8003874:	429a      	cmp	r2, r3
 8003876:	d104      	bne.n	8003882 <vTaskSwitchContext+0x8a>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a0b      	ldr	r2, [pc, #44]	; (80038b8 <vTaskSwitchContext+0xc0>)
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4a08      	ldr	r2, [pc, #32]	; (80038b0 <vTaskSwitchContext+0xb8>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <vTaskSwitchContext+0xc0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3354      	adds	r3, #84	; 0x54
 8003898:	4a08      	ldr	r2, [pc, #32]	; (80038bc <vTaskSwitchContext+0xc4>)
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000dc0 	.word	0x20000dc0
 80038ac:	20000dac 	.word	0x20000dac
 80038b0:	20000da0 	.word	0x20000da0
 80038b4:	200008c8 	.word	0x200008c8
 80038b8:	200008c4 	.word	0x200008c4
 80038bc:	200000c8 	.word	0x200000c8

080038c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	60fb      	str	r3, [r7, #12]
}
 80038e2:	bf00      	nop
 80038e4:	e7fe      	b.n	80038e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <vTaskPlaceOnEventList+0x44>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3318      	adds	r3, #24
 80038ec:	4619      	mov	r1, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fe fe70 	bl	80025d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038f4:	2101      	movs	r1, #1
 80038f6:	6838      	ldr	r0, [r7, #0]
 80038f8:	f000 fa84 	bl	8003e04 <prvAddCurrentTaskToDelayedList>
}
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	200008c4 	.word	0x200008c4

08003908 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	617b      	str	r3, [r7, #20]
}
 800392c:	bf00      	nop
 800392e:	e7fe      	b.n	800392e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <vTaskPlaceOnEventListRestricted+0x54>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3318      	adds	r3, #24
 8003936:	4619      	mov	r1, r3
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f7fe fe28 	bl	800258e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003944:	f04f 33ff 	mov.w	r3, #4294967295
 8003948:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	68b8      	ldr	r0, [r7, #8]
 800394e:	f000 fa59 	bl	8003e04 <prvAddCurrentTaskToDelayedList>
	}
 8003952:	bf00      	nop
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	200008c4 	.word	0x200008c4

08003960 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	60fb      	str	r3, [r7, #12]
}
 8003988:	bf00      	nop
 800398a:	e7fe      	b.n	800398a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	3318      	adds	r3, #24
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe fe57 	bl	8002644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003996:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <xTaskRemoveFromEventList+0xb0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d11d      	bne.n	80039da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	3304      	adds	r3, #4
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe fe4e 	bl	8002644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <xTaskRemoveFromEventList+0xb4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d903      	bls.n	80039bc <xTaskRemoveFromEventList+0x5c>
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	4a16      	ldr	r2, [pc, #88]	; (8003a14 <xTaskRemoveFromEventList+0xb4>)
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <xTaskRemoveFromEventList+0xb8>)
 80039ca:	441a      	add	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	3304      	adds	r3, #4
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f7fe fddb 	bl	800258e <vListInsertEnd>
 80039d8:	e005      	b.n	80039e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	3318      	adds	r3, #24
 80039de:	4619      	mov	r1, r3
 80039e0:	480e      	ldr	r0, [pc, #56]	; (8003a1c <xTaskRemoveFromEventList+0xbc>)
 80039e2:	f7fe fdd4 	bl	800258e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ea:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <xTaskRemoveFromEventList+0xc0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d905      	bls.n	8003a00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <xTaskRemoveFromEventList+0xc4>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e001      	b.n	8003a04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003a04:	697b      	ldr	r3, [r7, #20]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000dc0 	.word	0x20000dc0
 8003a14:	20000da0 	.word	0x20000da0
 8003a18:	200008c8 	.word	0x200008c8
 8003a1c:	20000d58 	.word	0x20000d58
 8003a20:	200008c4 	.word	0x200008c4
 8003a24:	20000dac 	.word	0x20000dac

08003a28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <vTaskInternalSetTimeOutState+0x24>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <vTaskInternalSetTimeOutState+0x28>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	605a      	str	r2, [r3, #4]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20000db0 	.word	0x20000db0
 8003a50:	20000d9c 	.word	0x20000d9c

08003a54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	613b      	str	r3, [r7, #16]
}
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	60fb      	str	r3, [r7, #12]
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003a96:	f000 fe09 	bl	80046ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <xTaskCheckForTimeOut+0xbc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	d102      	bne.n	8003aba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	e023      	b.n	8003b02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <xTaskCheckForTimeOut+0xc0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d007      	beq.n	8003ad6 <xTaskCheckForTimeOut+0x82>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d302      	bcc.n	8003ad6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	61fb      	str	r3, [r7, #28]
 8003ad4:	e015      	b.n	8003b02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d20b      	bcs.n	8003af8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	1ad2      	subs	r2, r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff9b 	bl	8003a28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	e004      	b.n	8003b02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003afe:	2301      	movs	r3, #1
 8003b00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b02:	f000 fe03 	bl	800470c <vPortExitCritical>

	return xReturn;
 8003b06:	69fb      	ldr	r3, [r7, #28]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000d9c 	.word	0x20000d9c
 8003b14:	20000db0 	.word	0x20000db0

08003b18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <vTaskMissedYield+0x14>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
}
 8003b22:	bf00      	nop
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000dac 	.word	0x20000dac

08003b30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b38:	f000 f852 	bl	8003be0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <prvIdleTask+0x28>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d9f9      	bls.n	8003b38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <prvIdleTask+0x2c>)
 8003b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b54:	e7f0      	b.n	8003b38 <prvIdleTask+0x8>
 8003b56:	bf00      	nop
 8003b58:	200008c8 	.word	0x200008c8
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b66:	2300      	movs	r3, #0
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	e00c      	b.n	8003b86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <prvInitialiseTaskLists+0x60>)
 8003b78:	4413      	add	r3, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fcdc 	bl	8002538 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3301      	adds	r3, #1
 8003b84:	607b      	str	r3, [r7, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b37      	cmp	r3, #55	; 0x37
 8003b8a:	d9ef      	bls.n	8003b6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b8c:	480d      	ldr	r0, [pc, #52]	; (8003bc4 <prvInitialiseTaskLists+0x64>)
 8003b8e:	f7fe fcd3 	bl	8002538 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b92:	480d      	ldr	r0, [pc, #52]	; (8003bc8 <prvInitialiseTaskLists+0x68>)
 8003b94:	f7fe fcd0 	bl	8002538 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b98:	480c      	ldr	r0, [pc, #48]	; (8003bcc <prvInitialiseTaskLists+0x6c>)
 8003b9a:	f7fe fccd 	bl	8002538 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b9e:	480c      	ldr	r0, [pc, #48]	; (8003bd0 <prvInitialiseTaskLists+0x70>)
 8003ba0:	f7fe fcca 	bl	8002538 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ba4:	480b      	ldr	r0, [pc, #44]	; (8003bd4 <prvInitialiseTaskLists+0x74>)
 8003ba6:	f7fe fcc7 	bl	8002538 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <prvInitialiseTaskLists+0x78>)
 8003bac:	4a05      	ldr	r2, [pc, #20]	; (8003bc4 <prvInitialiseTaskLists+0x64>)
 8003bae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <prvInitialiseTaskLists+0x7c>)
 8003bb2:	4a05      	ldr	r2, [pc, #20]	; (8003bc8 <prvInitialiseTaskLists+0x68>)
 8003bb4:	601a      	str	r2, [r3, #0]
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200008c8 	.word	0x200008c8
 8003bc4:	20000d28 	.word	0x20000d28
 8003bc8:	20000d3c 	.word	0x20000d3c
 8003bcc:	20000d58 	.word	0x20000d58
 8003bd0:	20000d6c 	.word	0x20000d6c
 8003bd4:	20000d84 	.word	0x20000d84
 8003bd8:	20000d50 	.word	0x20000d50
 8003bdc:	20000d54 	.word	0x20000d54

08003be0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003be6:	e019      	b.n	8003c1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003be8:	f000 fd60 	bl	80046ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003bec:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <prvCheckTasksWaitingTermination+0x50>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe fd23 	bl	8002644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <prvCheckTasksWaitingTermination+0x54>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <prvCheckTasksWaitingTermination+0x54>)
 8003c06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <prvCheckTasksWaitingTermination+0x58>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <prvCheckTasksWaitingTermination+0x58>)
 8003c10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c12:	f000 fd7b 	bl	800470c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f810 	bl	8003c3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <prvCheckTasksWaitingTermination+0x58>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e1      	bne.n	8003be8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000d6c 	.word	0x20000d6c
 8003c34:	20000d98 	.word	0x20000d98
 8003c38:	20000d80 	.word	0x20000d80

08003c3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3354      	adds	r3, #84	; 0x54
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f001 f851 	bl	8004cf0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d108      	bne.n	8003c6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fee9 	bl	8004a34 <vPortFree>
				vPortFree( pxTCB );
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fee6 	bl	8004a34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c68:	e018      	b.n	8003c9c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d103      	bne.n	8003c7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fedd 	bl	8004a34 <vPortFree>
	}
 8003c7a:	e00f      	b.n	8003c9c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d00a      	beq.n	8003c9c <prvDeleteTCB+0x60>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	60fb      	str	r3, [r7, #12]
}
 8003c98:	bf00      	nop
 8003c9a:	e7fe      	b.n	8003c9a <prvDeleteTCB+0x5e>
	}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003caa:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <prvResetNextTaskUnblockTime+0x40>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <prvResetNextTaskUnblockTime+0x14>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <prvResetNextTaskUnblockTime+0x16>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <prvResetNextTaskUnblockTime+0x44>)
 8003cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cc6:	e008      	b.n	8003cda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <prvResetNextTaskUnblockTime+0x40>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4a04      	ldr	r2, [pc, #16]	; (8003ce8 <prvResetNextTaskUnblockTime+0x44>)
 8003cd8:	6013      	str	r3, [r2, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	20000d50 	.word	0x20000d50
 8003ce8:	20000db8 	.word	0x20000db8

08003cec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <xTaskGetSchedulerState+0x34>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	e008      	b.n	8003d12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d00:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <xTaskGetSchedulerState+0x38>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d102      	bne.n	8003d0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	e001      	b.n	8003d12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d12:	687b      	ldr	r3, [r7, #4]
	}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000da4 	.word	0x20000da4
 8003d24:	20000dc0 	.word	0x20000dc0

08003d28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d056      	beq.n	8003dec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d3e:	4b2e      	ldr	r3, [pc, #184]	; (8003df8 <xTaskPriorityDisinherit+0xd0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d00a      	beq.n	8003d5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	60fb      	str	r3, [r7, #12]
}
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	60bb      	str	r3, [r7, #8]
}
 8003d78:	bf00      	nop
 8003d7a:	e7fe      	b.n	8003d7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d80:	1e5a      	subs	r2, r3, #1
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d02c      	beq.n	8003dec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d128      	bne.n	8003dec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fc50 	bl	8002644 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <xTaskPriorityDisinherit+0xd4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d903      	bls.n	8003dcc <xTaskPriorityDisinherit+0xa4>
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	4a0c      	ldr	r2, [pc, #48]	; (8003dfc <xTaskPriorityDisinherit+0xd4>)
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <xTaskPriorityDisinherit+0xd8>)
 8003dda:	441a      	add	r2, r3
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f7fe fbd3 	bl	800258e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003dec:	697b      	ldr	r3, [r7, #20]
	}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	200008c4 	.word	0x200008c4
 8003dfc:	20000da0 	.word	0x20000da0
 8003e00:	200008c8 	.word	0x200008c8

08003e04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e0e:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e14:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe fc12 	bl	8002644 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e26:	d10a      	bne.n	8003e3e <prvAddCurrentTaskToDelayedList+0x3a>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e2e:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4819      	ldr	r0, [pc, #100]	; (8003e9c <prvAddCurrentTaskToDelayedList+0x98>)
 8003e38:	f7fe fba9 	bl	800258e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e3c:	e026      	b.n	8003e8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4413      	add	r3, r2
 8003e44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d209      	bcs.n	8003e6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e56:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	4610      	mov	r0, r2
 8003e64:	f7fe fbb6 	bl	80025d4 <vListInsert>
}
 8003e68:	e010      	b.n	8003e8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3304      	adds	r3, #4
 8003e74:	4619      	mov	r1, r3
 8003e76:	4610      	mov	r0, r2
 8003e78:	f7fe fbac 	bl	80025d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d202      	bcs.n	8003e8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e86:	4a08      	ldr	r2, [pc, #32]	; (8003ea8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	6013      	str	r3, [r2, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000d9c 	.word	0x20000d9c
 8003e98:	200008c4 	.word	0x200008c4
 8003e9c:	20000d84 	.word	0x20000d84
 8003ea0:	20000d54 	.word	0x20000d54
 8003ea4:	20000d50 	.word	0x20000d50
 8003ea8:	20000db8 	.word	0x20000db8

08003eac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	; 0x28
 8003eb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003eb6:	f000 facb 	bl	8004450 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003eba:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <xTimerCreateTimerTask+0x80>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d021      	beq.n	8003f06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003eca:	1d3a      	adds	r2, r7, #4
 8003ecc:	f107 0108 	add.w	r1, r7, #8
 8003ed0:	f107 030c 	add.w	r3, r7, #12
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe fb15 	bl	8002504 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	9202      	str	r2, [sp, #8]
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	460a      	mov	r2, r1
 8003eec:	4910      	ldr	r1, [pc, #64]	; (8003f30 <xTimerCreateTimerTask+0x84>)
 8003eee:	4811      	ldr	r0, [pc, #68]	; (8003f34 <xTimerCreateTimerTask+0x88>)
 8003ef0:	f7ff f8b6 	bl	8003060 <xTaskCreateStatic>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	4a10      	ldr	r2, [pc, #64]	; (8003f38 <xTimerCreateTimerTask+0x8c>)
 8003ef8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003efa:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <xTimerCreateTimerTask+0x8c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f02:	2301      	movs	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	613b      	str	r3, [r7, #16]
}
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f22:	697b      	ldr	r3, [r7, #20]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000df4 	.word	0x20000df4
 8003f30:	08005028 	.word	0x08005028
 8003f34:	08004059 	.word	0x08004059
 8003f38:	20000df8 	.word	0x20000df8

08003f3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	623b      	str	r3, [r7, #32]
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <xTimerGenericCommand+0x98>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d02a      	beq.n	8003fc8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b05      	cmp	r3, #5
 8003f82:	dc18      	bgt.n	8003fb6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f84:	f7ff feb2 	bl	8003cec <xTaskGetSchedulerState>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d109      	bne.n	8003fa2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <xTimerGenericCommand+0x98>)
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	f107 0110 	add.w	r1, r7, #16
 8003f96:	2300      	movs	r3, #0
 8003f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9a:	f7fe fc7f 	bl	800289c <xQueueGenericSend>
 8003f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8003fa0:	e012      	b.n	8003fc8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <xTimerGenericCommand+0x98>)
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	f107 0110 	add.w	r1, r7, #16
 8003faa:	2300      	movs	r3, #0
 8003fac:	2200      	movs	r2, #0
 8003fae:	f7fe fc75 	bl	800289c <xQueueGenericSend>
 8003fb2:	6278      	str	r0, [r7, #36]	; 0x24
 8003fb4:	e008      	b.n	8003fc8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <xTimerGenericCommand+0x98>)
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	f107 0110 	add.w	r1, r7, #16
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	f7fe fd69 	bl	8002a98 <xQueueGenericSendFromISR>
 8003fc6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3728      	adds	r7, #40	; 0x28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000df4 	.word	0x20000df4

08003fd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <prvProcessExpiredTimer+0x7c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fb27 	bl	8002644 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d122      	bne.n	8004044 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	18d1      	adds	r1, r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	6978      	ldr	r0, [r7, #20]
 800400c:	f000 f8c8 	bl	80041a0 <prvInsertTimerInActiveList>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d016      	beq.n	8004044 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004016:	2300      	movs	r3, #0
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	2300      	movs	r3, #0
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	2100      	movs	r1, #0
 8004020:	6978      	ldr	r0, [r7, #20]
 8004022:	f7ff ff8b 	bl	8003f3c <xTimerGenericCommand>
 8004026:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	60fb      	str	r3, [r7, #12]
}
 8004040:	bf00      	nop
 8004042:	e7fe      	b.n	8004042 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	6978      	ldr	r0, [r7, #20]
 800404a:	4798      	blx	r3
}
 800404c:	bf00      	nop
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	20000dec 	.word	0x20000dec

08004058 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004060:	f107 0308 	add.w	r3, r7, #8
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f857 	bl	8004118 <prvGetNextExpireTime>
 800406a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4619      	mov	r1, r3
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f803 	bl	800407c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004076:	f000 f8d5 	bl	8004224 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800407a:	e7f1      	b.n	8004060 <prvTimerTask+0x8>

0800407c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004086:	f7ff fa3f 	bl	8003508 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800408a:	f107 0308 	add.w	r3, r7, #8
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f866 	bl	8004160 <prvSampleTimeNow>
 8004094:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d130      	bne.n	80040fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <prvProcessTimerOrBlockTask+0x3c>
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d806      	bhi.n	80040b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040aa:	f7ff fa3b 	bl	8003524 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040ae:	68f9      	ldr	r1, [r7, #12]
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ff91 	bl	8003fd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040b6:	e024      	b.n	8004102 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <prvProcessTimerOrBlockTask+0x90>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <prvProcessTimerOrBlockTask+0x94>)
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	4619      	mov	r1, r3
 80040de:	f7fe ff8b 	bl	8002ff8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80040e2:	f7ff fa1f 	bl	8003524 <xTaskResumeAll>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80040ec:	4b09      	ldr	r3, [pc, #36]	; (8004114 <prvProcessTimerOrBlockTask+0x98>)
 80040ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	f3bf 8f6f 	isb	sy
}
 80040fc:	e001      	b.n	8004102 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80040fe:	f7ff fa11 	bl	8003524 <xTaskResumeAll>
}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000df0 	.word	0x20000df0
 8004110:	20000df4 	.word	0x20000df4
 8004114:	e000ed04 	.word	0xe000ed04

08004118 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004120:	4b0e      	ldr	r3, [pc, #56]	; (800415c <prvGetNextExpireTime+0x44>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800413e:	4b07      	ldr	r3, [pc, #28]	; (800415c <prvGetNextExpireTime+0x44>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	e001      	b.n	800414e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800414e:	68fb      	ldr	r3, [r7, #12]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	20000dec 	.word	0x20000dec

08004160 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004168:	f7ff fa7a 	bl	8003660 <xTaskGetTickCount>
 800416c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800416e:	4b0b      	ldr	r3, [pc, #44]	; (800419c <prvSampleTimeNow+0x3c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	429a      	cmp	r2, r3
 8004176:	d205      	bcs.n	8004184 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004178:	f000 f908 	bl	800438c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e002      	b.n	800418a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800418a:	4a04      	ldr	r2, [pc, #16]	; (800419c <prvSampleTimeNow+0x3c>)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004190:	68fb      	ldr	r3, [r7, #12]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000dfc 	.word	0x20000dfc

080041a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d812      	bhi.n	80041ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	1ad2      	subs	r2, r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d302      	bcc.n	80041da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80041d4:	2301      	movs	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e01b      	b.n	8004212 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <prvInsertTimerInActiveList+0x7c>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3304      	adds	r3, #4
 80041e2:	4619      	mov	r1, r3
 80041e4:	4610      	mov	r0, r2
 80041e6:	f7fe f9f5 	bl	80025d4 <vListInsert>
 80041ea:	e012      	b.n	8004212 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d206      	bcs.n	8004202 <prvInsertTimerInActiveList+0x62>
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d302      	bcc.n	8004202 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80041fc:	2301      	movs	r3, #1
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	e007      	b.n	8004212 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004202:	4b07      	ldr	r3, [pc, #28]	; (8004220 <prvInsertTimerInActiveList+0x80>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3304      	adds	r3, #4
 800420a:	4619      	mov	r1, r3
 800420c:	4610      	mov	r0, r2
 800420e:	f7fe f9e1 	bl	80025d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004212:	697b      	ldr	r3, [r7, #20]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000df0 	.word	0x20000df0
 8004220:	20000dec 	.word	0x20000dec

08004224 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	; 0x38
 8004228:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800422a:	e09d      	b.n	8004368 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	da18      	bge.n	8004264 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004232:	1d3b      	adds	r3, r7, #4
 8004234:	3304      	adds	r3, #4
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	61fb      	str	r3, [r7, #28]
}
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800425a:	6850      	ldr	r0, [r2, #4]
 800425c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800425e:	6892      	ldr	r2, [r2, #8]
 8004260:	4611      	mov	r1, r2
 8004262:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	db7d      	blt.n	8004366 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d004      	beq.n	8004280 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	3304      	adds	r3, #4
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe f9e2 	bl	8002644 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004280:	463b      	mov	r3, r7
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff ff6c 	bl	8004160 <prvSampleTimeNow>
 8004288:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b09      	cmp	r3, #9
 800428e:	d86b      	bhi.n	8004368 <prvProcessReceivedCommands+0x144>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <prvProcessReceivedCommands+0x74>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042c1 	.word	0x080042c1
 800429c:	080042c1 	.word	0x080042c1
 80042a0:	080042c1 	.word	0x080042c1
 80042a4:	08004369 	.word	0x08004369
 80042a8:	0800431d 	.word	0x0800431d
 80042ac:	08004355 	.word	0x08004355
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	080042c1 	.word	0x080042c1
 80042b8:	08004369 	.word	0x08004369
 80042bc:	0800431d 	.word	0x0800431d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	18d1      	adds	r1, r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ce:	f7ff ff67 	bl	80041a0 <prvInsertTimerInActiveList>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d047      	beq.n	8004368 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042de:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d13f      	bne.n	8004368 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	441a      	add	r2, r3
 80042f0:	2300      	movs	r3, #0
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2300      	movs	r3, #0
 80042f6:	2100      	movs	r1, #0
 80042f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042fa:	f7ff fe1f 	bl	8003f3c <xTimerGenericCommand>
 80042fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d130      	bne.n	8004368 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	61bb      	str	r3, [r7, #24]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	617b      	str	r3, [r7, #20]
}
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	18d1      	adds	r1, r2, r3
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800434e:	f7ff ff27 	bl	80041a0 <prvInsertTimerInActiveList>
					break;
 8004352:	e009      	b.n	8004368 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d104      	bne.n	8004368 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800435e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004360:	f000 fb68 	bl	8004a34 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004364:	e000      	b.n	8004368 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004366:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004368:	4b07      	ldr	r3, [pc, #28]	; (8004388 <prvProcessReceivedCommands+0x164>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	1d39      	adds	r1, r7, #4
 800436e:	2200      	movs	r2, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe fc29 	bl	8002bc8 <xQueueReceive>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	f47f af57 	bne.w	800422c <prvProcessReceivedCommands+0x8>
	}
}
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	3730      	adds	r7, #48	; 0x30
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000df4 	.word	0x20000df4

0800438c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004392:	e045      	b.n	8004420 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004394:	4b2c      	ldr	r3, [pc, #176]	; (8004448 <prvSwitchTimerLists+0xbc>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800439e:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <prvSwitchTimerLists+0xbc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe f949 	bl	8002644 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d12e      	bne.n	8004420 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4413      	add	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d90e      	bls.n	80043f2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <prvSwitchTimerLists+0xbc>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4610      	mov	r0, r2
 80043ec:	f7fe f8f2 	bl	80025d4 <vListInsert>
 80043f0:	e016      	b.n	8004420 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043f2:	2300      	movs	r3, #0
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	2300      	movs	r3, #0
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	2100      	movs	r1, #0
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7ff fd9d 	bl	8003f3c <xTimerGenericCommand>
 8004402:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <prvSwitchTimerLists+0x94>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	603b      	str	r3, [r7, #0]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <prvSwitchTimerLists+0xbc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1b4      	bne.n	8004394 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800442a:	4b07      	ldr	r3, [pc, #28]	; (8004448 <prvSwitchTimerLists+0xbc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004430:	4b06      	ldr	r3, [pc, #24]	; (800444c <prvSwitchTimerLists+0xc0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a04      	ldr	r2, [pc, #16]	; (8004448 <prvSwitchTimerLists+0xbc>)
 8004436:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <prvSwitchTimerLists+0xc0>)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	6013      	str	r3, [r2, #0]
}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000dec 	.word	0x20000dec
 800444c:	20000df0 	.word	0x20000df0

08004450 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004456:	f000 f929 	bl	80046ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800445a:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <prvCheckForValidListAndQueue+0x60>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d120      	bne.n	80044a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004462:	4814      	ldr	r0, [pc, #80]	; (80044b4 <prvCheckForValidListAndQueue+0x64>)
 8004464:	f7fe f868 	bl	8002538 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004468:	4813      	ldr	r0, [pc, #76]	; (80044b8 <prvCheckForValidListAndQueue+0x68>)
 800446a:	f7fe f865 	bl	8002538 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800446e:	4b13      	ldr	r3, [pc, #76]	; (80044bc <prvCheckForValidListAndQueue+0x6c>)
 8004470:	4a10      	ldr	r2, [pc, #64]	; (80044b4 <prvCheckForValidListAndQueue+0x64>)
 8004472:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004474:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <prvCheckForValidListAndQueue+0x70>)
 8004476:	4a10      	ldr	r2, [pc, #64]	; (80044b8 <prvCheckForValidListAndQueue+0x68>)
 8004478:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800447a:	2300      	movs	r3, #0
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <prvCheckForValidListAndQueue+0x74>)
 8004480:	4a11      	ldr	r2, [pc, #68]	; (80044c8 <prvCheckForValidListAndQueue+0x78>)
 8004482:	2110      	movs	r1, #16
 8004484:	200a      	movs	r0, #10
 8004486:	f7fe f96f 	bl	8002768 <xQueueGenericCreateStatic>
 800448a:	4603      	mov	r3, r0
 800448c:	4a08      	ldr	r2, [pc, #32]	; (80044b0 <prvCheckForValidListAndQueue+0x60>)
 800448e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <prvCheckForValidListAndQueue+0x60>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <prvCheckForValidListAndQueue+0x60>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	490b      	ldr	r1, [pc, #44]	; (80044cc <prvCheckForValidListAndQueue+0x7c>)
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe fd82 	bl	8002fa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044a4:	f000 f932 	bl	800470c <vPortExitCritical>
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000df4 	.word	0x20000df4
 80044b4:	20000dc4 	.word	0x20000dc4
 80044b8:	20000dd8 	.word	0x20000dd8
 80044bc:	20000dec 	.word	0x20000dec
 80044c0:	20000df0 	.word	0x20000df0
 80044c4:	20000ea0 	.word	0x20000ea0
 80044c8:	20000e00 	.word	0x20000e00
 80044cc:	08005030 	.word	0x08005030

080044d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3b04      	subs	r3, #4
 80044e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3b04      	subs	r3, #4
 80044ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f023 0201 	bic.w	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3b04      	subs	r3, #4
 80044fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004500:	4a08      	ldr	r2, [pc, #32]	; (8004524 <pxPortInitialiseStack+0x54>)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3b14      	subs	r3, #20
 800450a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3b20      	subs	r3, #32
 8004516:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004518:	68fb      	ldr	r3, [r7, #12]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr
 8004524:	08004529 	.word	0x08004529

08004528 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800452e:	2300      	movs	r3, #0
 8004530:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <prvTaskExitError+0x54>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453a:	d00a      	beq.n	8004552 <prvTaskExitError+0x2a>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	60fb      	str	r3, [r7, #12]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <prvTaskExitError+0x28>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	60bb      	str	r3, [r7, #8]
}
 8004564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004566:	bf00      	nop
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0fc      	beq.n	8004568 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800456e:	bf00      	nop
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	200000c4 	.word	0x200000c4

08004580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004580:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <pxCurrentTCBConst2>)
 8004582:	6819      	ldr	r1, [r3, #0]
 8004584:	6808      	ldr	r0, [r1, #0]
 8004586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800458a:	f380 8809 	msr	PSP, r0
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f380 8811 	msr	BASEPRI, r0
 800459a:	f04e 0e0d 	orr.w	lr, lr, #13
 800459e:	4770      	bx	lr

080045a0 <pxCurrentTCBConst2>:
 80045a0:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop

080045a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80045a8:	4806      	ldr	r0, [pc, #24]	; (80045c4 <prvPortStartFirstTask+0x1c>)
 80045aa:	6800      	ldr	r0, [r0, #0]
 80045ac:	6800      	ldr	r0, [r0, #0]
 80045ae:	f380 8808 	msr	MSP, r0
 80045b2:	b662      	cpsie	i
 80045b4:	b661      	cpsie	f
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	df00      	svc	0
 80045c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045c2:	bf00      	nop
 80045c4:	e000ed08 	.word	0xe000ed08

080045c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045ce:	4b32      	ldr	r3, [pc, #200]	; (8004698 <xPortStartScheduler+0xd0>)
 80045d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	22ff      	movs	r2, #255	; 0xff
 80045de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	4b2a      	ldr	r3, [pc, #168]	; (800469c <xPortStartScheduler+0xd4>)
 80045f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045f6:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <xPortStartScheduler+0xd8>)
 80045f8:	2207      	movs	r2, #7
 80045fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045fc:	e009      	b.n	8004612 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80045fe:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <xPortStartScheduler+0xd8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3b01      	subs	r3, #1
 8004604:	4a26      	ldr	r2, [pc, #152]	; (80046a0 <xPortStartScheduler+0xd8>)
 8004606:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	b2db      	uxtb	r3, r3
 8004610:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b80      	cmp	r3, #128	; 0x80
 800461c:	d0ef      	beq.n	80045fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <xPortStartScheduler+0xd8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1c3 0307 	rsb	r3, r3, #7
 8004626:	2b04      	cmp	r3, #4
 8004628:	d00a      	beq.n	8004640 <xPortStartScheduler+0x78>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	60bb      	str	r3, [r7, #8]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <xPortStartScheduler+0xd8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	4a16      	ldr	r2, [pc, #88]	; (80046a0 <xPortStartScheduler+0xd8>)
 8004648:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <xPortStartScheduler+0xd8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004652:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <xPortStartScheduler+0xd8>)
 8004654:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800465e:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <xPortStartScheduler+0xdc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a10      	ldr	r2, [pc, #64]	; (80046a4 <xPortStartScheduler+0xdc>)
 8004664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004668:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800466a:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <xPortStartScheduler+0xdc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a0d      	ldr	r2, [pc, #52]	; (80046a4 <xPortStartScheduler+0xdc>)
 8004670:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004674:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004676:	f000 f8b9 	bl	80047ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800467a:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <xPortStartScheduler+0xe0>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004680:	f7ff ff92 	bl	80045a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004684:	f7ff f8b8 	bl	80037f8 <vTaskSwitchContext>
	prvTaskExitError();
 8004688:	f7ff ff4e 	bl	8004528 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	e000e400 	.word	0xe000e400
 800469c:	20000ef0 	.word	0x20000ef0
 80046a0:	20000ef4 	.word	0x20000ef4
 80046a4:	e000ed20 	.word	0xe000ed20
 80046a8:	200000c4 	.word	0x200000c4

080046ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	607b      	str	r3, [r7, #4]
}
 80046c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046c6:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <vPortEnterCritical+0x58>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3301      	adds	r3, #1
 80046cc:	4a0d      	ldr	r2, [pc, #52]	; (8004704 <vPortEnterCritical+0x58>)
 80046ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046d0:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <vPortEnterCritical+0x58>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d10f      	bne.n	80046f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <vPortEnterCritical+0x5c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	603b      	str	r3, [r7, #0]
}
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <vPortEnterCritical+0x4a>
	}
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	200000c4 	.word	0x200000c4
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004712:	4b11      	ldr	r3, [pc, #68]	; (8004758 <vPortExitCritical+0x4c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <vPortExitCritical+0x24>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	607b      	str	r3, [r7, #4]
}
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <vPortExitCritical+0x4c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3b01      	subs	r3, #1
 8004736:	4a08      	ldr	r2, [pc, #32]	; (8004758 <vPortExitCritical+0x4c>)
 8004738:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <vPortExitCritical+0x4c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d105      	bne.n	800474e <vPortExitCritical+0x42>
 8004742:	2300      	movs	r3, #0
 8004744:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f383 8811 	msr	BASEPRI, r3
}
 800474c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr
 8004758:	200000c4 	.word	0x200000c4
 800475c:	00000000 	.word	0x00000000

08004760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004760:	f3ef 8009 	mrs	r0, PSP
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <pxCurrentTCBConst>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004770:	6010      	str	r0, [r2, #0]
 8004772:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004776:	f04f 0050 	mov.w	r0, #80	; 0x50
 800477a:	f380 8811 	msr	BASEPRI, r0
 800477e:	f7ff f83b 	bl	80037f8 <vTaskSwitchContext>
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f380 8811 	msr	BASEPRI, r0
 800478a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800478e:	6819      	ldr	r1, [r3, #0]
 8004790:	6808      	ldr	r0, [r1, #0]
 8004792:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004796:	f380 8809 	msr	PSP, r0
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	4770      	bx	lr

080047a0 <pxCurrentTCBConst>:
 80047a0:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop

080047a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	607b      	str	r3, [r7, #4]
}
 80047c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047c2:	f7fe ff5b 	bl	800367c <xTaskIncrementTick>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <xPortSysTickHandler+0x40>)
 80047ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	2300      	movs	r3, #0
 80047d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f383 8811 	msr	BASEPRI, r3
}
 80047de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <vPortSetupTimerInterrupt+0x30>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <vPortSetupTimerInterrupt+0x34>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047fc:	4b09      	ldr	r3, [pc, #36]	; (8004824 <vPortSetupTimerInterrupt+0x38>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a09      	ldr	r2, [pc, #36]	; (8004828 <vPortSetupTimerInterrupt+0x3c>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	099b      	lsrs	r3, r3, #6
 8004808:	4a08      	ldr	r2, [pc, #32]	; (800482c <vPortSetupTimerInterrupt+0x40>)
 800480a:	3b01      	subs	r3, #1
 800480c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800480e:	4b03      	ldr	r3, [pc, #12]	; (800481c <vPortSetupTimerInterrupt+0x30>)
 8004810:	2207      	movs	r2, #7
 8004812:	601a      	str	r2, [r3, #0]
}
 8004814:	bf00      	nop
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr
 800481c:	e000e010 	.word	0xe000e010
 8004820:	e000e018 	.word	0xe000e018
 8004824:	200000b8 	.word	0x200000b8
 8004828:	10624dd3 	.word	0x10624dd3
 800482c:	e000e014 	.word	0xe000e014

08004830 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004836:	f3ef 8305 	mrs	r3, IPSR
 800483a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b0f      	cmp	r3, #15
 8004840:	d914      	bls.n	800486c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004842:	4a16      	ldr	r2, [pc, #88]	; (800489c <vPortValidateInterruptPriority+0x6c>)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800484c:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <vPortValidateInterruptPriority+0x70>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	7afa      	ldrb	r2, [r7, #11]
 8004852:	429a      	cmp	r2, r3
 8004854:	d20a      	bcs.n	800486c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	607b      	str	r3, [r7, #4]
}
 8004868:	bf00      	nop
 800486a:	e7fe      	b.n	800486a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800486c:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <vPortValidateInterruptPriority+0x74>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <vPortValidateInterruptPriority+0x78>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d90a      	bls.n	8004892 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	603b      	str	r3, [r7, #0]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <vPortValidateInterruptPriority+0x60>
	}
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	e000e3f0 	.word	0xe000e3f0
 80048a0:	20000ef0 	.word	0x20000ef0
 80048a4:	e000ed0c 	.word	0xe000ed0c
 80048a8:	20000ef4 	.word	0x20000ef4

080048ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048b8:	f7fe fe26 	bl	8003508 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048bc:	4b58      	ldr	r3, [pc, #352]	; (8004a20 <pvPortMalloc+0x174>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048c4:	f000 f910 	bl	8004ae8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048c8:	4b56      	ldr	r3, [pc, #344]	; (8004a24 <pvPortMalloc+0x178>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f040 808e 	bne.w	80049f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01d      	beq.n	8004918 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80048dc:	2208      	movs	r2, #8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4413      	add	r3, r2
 80048e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d014      	beq.n	8004918 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f023 0307 	bic.w	r3, r3, #7
 80048f4:	3308      	adds	r3, #8
 80048f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <pvPortMalloc+0x6c>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	617b      	str	r3, [r7, #20]
}
 8004914:	bf00      	nop
 8004916:	e7fe      	b.n	8004916 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d069      	beq.n	80049f2 <pvPortMalloc+0x146>
 800491e:	4b42      	ldr	r3, [pc, #264]	; (8004a28 <pvPortMalloc+0x17c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	d864      	bhi.n	80049f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004928:	4b40      	ldr	r3, [pc, #256]	; (8004a2c <pvPortMalloc+0x180>)
 800492a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800492c:	4b3f      	ldr	r3, [pc, #252]	; (8004a2c <pvPortMalloc+0x180>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004932:	e004      	b.n	800493e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d903      	bls.n	8004950 <pvPortMalloc+0xa4>
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f1      	bne.n	8004934 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004950:	4b33      	ldr	r3, [pc, #204]	; (8004a20 <pvPortMalloc+0x174>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004956:	429a      	cmp	r2, r3
 8004958:	d04b      	beq.n	80049f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2208      	movs	r2, #8
 8004960:	4413      	add	r3, r2
 8004962:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	2308      	movs	r3, #8
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	429a      	cmp	r2, r3
 800497a:	d91f      	bls.n	80049bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800497c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4413      	add	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <pvPortMalloc+0xf8>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	613b      	str	r3, [r7, #16]
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	1ad2      	subs	r2, r2, r3
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049b6:	69b8      	ldr	r0, [r7, #24]
 80049b8:	f000 f8f8 	bl	8004bac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049bc:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <pvPortMalloc+0x17c>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <pvPortMalloc+0x17c>)
 80049c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049ca:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <pvPortMalloc+0x17c>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4b18      	ldr	r3, [pc, #96]	; (8004a30 <pvPortMalloc+0x184>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d203      	bcs.n	80049de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <pvPortMalloc+0x17c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <pvPortMalloc+0x184>)
 80049dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	4b10      	ldr	r3, [pc, #64]	; (8004a24 <pvPortMalloc+0x178>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049f2:	f7fe fd97 	bl	8003524 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <pvPortMalloc+0x16a>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60fb      	str	r3, [r7, #12]
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <pvPortMalloc+0x168>
	return pvReturn;
 8004a16:	69fb      	ldr	r3, [r7, #28]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3728      	adds	r7, #40	; 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20001b00 	.word	0x20001b00
 8004a24:	20001b0c 	.word	0x20001b0c
 8004a28:	20001b04 	.word	0x20001b04
 8004a2c:	20001af8 	.word	0x20001af8
 8004a30:	20001b08 	.word	0x20001b08

08004a34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d048      	beq.n	8004ad8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a46:	2308      	movs	r3, #8
 8004a48:	425b      	negs	r3, r3
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <vPortFree+0xac>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <vPortFree+0x44>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	60fb      	str	r3, [r7, #12]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <vPortFree+0x62>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	60bb      	str	r3, [r7, #8]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <vPortFree+0xac>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d019      	beq.n	8004ad8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d115      	bne.n	8004ad8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <vPortFree+0xac>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004abc:	f7fe fd24 	bl	8003508 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <vPortFree+0xb0>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4413      	add	r3, r2
 8004aca:	4a06      	ldr	r2, [pc, #24]	; (8004ae4 <vPortFree+0xb0>)
 8004acc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ace:	6938      	ldr	r0, [r7, #16]
 8004ad0:	f000 f86c 	bl	8004bac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ad4:	f7fe fd26 	bl	8003524 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ad8:	bf00      	nop
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20001b0c 	.word	0x20001b0c
 8004ae4:	20001b04 	.word	0x20001b04

08004ae8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004aee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004af2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004af4:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <prvHeapInit+0xac>)
 8004af6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00c      	beq.n	8004b1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3307      	adds	r3, #7
 8004b06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0307 	bic.w	r3, r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	4a1f      	ldr	r2, [pc, #124]	; (8004b94 <prvHeapInit+0xac>)
 8004b18:	4413      	add	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b20:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <prvHeapInit+0xb0>)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b26:	4b1c      	ldr	r3, [pc, #112]	; (8004b98 <prvHeapInit+0xb0>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	4413      	add	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b34:	2208      	movs	r2, #8
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0307 	bic.w	r3, r3, #7
 8004b42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a15      	ldr	r2, [pc, #84]	; (8004b9c <prvHeapInit+0xb4>)
 8004b48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b4a:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <prvHeapInit+0xb4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <prvHeapInit+0xb4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	1ad2      	subs	r2, r2, r3
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <prvHeapInit+0xb4>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a0a      	ldr	r2, [pc, #40]	; (8004ba0 <prvHeapInit+0xb8>)
 8004b76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <prvHeapInit+0xbc>)
 8004b7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <prvHeapInit+0xc0>)
 8004b82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b86:	601a      	str	r2, [r3, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000ef8 	.word	0x20000ef8
 8004b98:	20001af8 	.word	0x20001af8
 8004b9c:	20001b00 	.word	0x20001b00
 8004ba0:	20001b08 	.word	0x20001b08
 8004ba4:	20001b04 	.word	0x20001b04
 8004ba8:	20001b0c 	.word	0x20001b0c

08004bac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bb4:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <prvInsertBlockIntoFreeList+0xa8>)
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	e002      	b.n	8004bc0 <prvInsertBlockIntoFreeList+0x14>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d8f7      	bhi.n	8004bba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d108      	bne.n	8004bee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	441a      	add	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	441a      	add	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d118      	bne.n	8004c34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <prvInsertBlockIntoFreeList+0xac>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d00d      	beq.n	8004c2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	441a      	add	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e008      	b.n	8004c3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <prvInsertBlockIntoFreeList+0xac>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e003      	b.n	8004c3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d002      	beq.n	8004c4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr
 8004c54:	20001af8 	.word	0x20001af8
 8004c58:	20001b00 	.word	0x20001b00

08004c5c <__libc_init_array>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	2600      	movs	r6, #0
 8004c60:	4d0c      	ldr	r5, [pc, #48]	; (8004c94 <__libc_init_array+0x38>)
 8004c62:	4c0d      	ldr	r4, [pc, #52]	; (8004c98 <__libc_init_array+0x3c>)
 8004c64:	1b64      	subs	r4, r4, r5
 8004c66:	10a4      	asrs	r4, r4, #2
 8004c68:	42a6      	cmp	r6, r4
 8004c6a:	d109      	bne.n	8004c80 <__libc_init_array+0x24>
 8004c6c:	f000 f8f4 	bl	8004e58 <_init>
 8004c70:	2600      	movs	r6, #0
 8004c72:	4d0a      	ldr	r5, [pc, #40]	; (8004c9c <__libc_init_array+0x40>)
 8004c74:	4c0a      	ldr	r4, [pc, #40]	; (8004ca0 <__libc_init_array+0x44>)
 8004c76:	1b64      	subs	r4, r4, r5
 8004c78:	10a4      	asrs	r4, r4, #2
 8004c7a:	42a6      	cmp	r6, r4
 8004c7c:	d105      	bne.n	8004c8a <__libc_init_array+0x2e>
 8004c7e:	bd70      	pop	{r4, r5, r6, pc}
 8004c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c84:	4798      	blx	r3
 8004c86:	3601      	adds	r6, #1
 8004c88:	e7ee      	b.n	8004c68 <__libc_init_array+0xc>
 8004c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8e:	4798      	blx	r3
 8004c90:	3601      	adds	r6, #1
 8004c92:	e7f2      	b.n	8004c7a <__libc_init_array+0x1e>
 8004c94:	080050f0 	.word	0x080050f0
 8004c98:	080050f0 	.word	0x080050f0
 8004c9c:	080050f0 	.word	0x080050f0
 8004ca0:	080050f4 	.word	0x080050f4

08004ca4 <__retarget_lock_acquire_recursive>:
 8004ca4:	4770      	bx	lr

08004ca6 <__retarget_lock_release_recursive>:
 8004ca6:	4770      	bx	lr

08004ca8 <memcpy>:
 8004ca8:	440a      	add	r2, r1
 8004caa:	4291      	cmp	r1, r2
 8004cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cb0:	d100      	bne.n	8004cb4 <memcpy+0xc>
 8004cb2:	4770      	bx	lr
 8004cb4:	b510      	push	{r4, lr}
 8004cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cba:	4291      	cmp	r1, r2
 8004cbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cc0:	d1f9      	bne.n	8004cb6 <memcpy+0xe>
 8004cc2:	bd10      	pop	{r4, pc}

08004cc4 <memset>:
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	4402      	add	r2, r0
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d100      	bne.n	8004cce <memset+0xa>
 8004ccc:	4770      	bx	lr
 8004cce:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd2:	e7f9      	b.n	8004cc8 <memset+0x4>

08004cd4 <cleanup_glue>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	6809      	ldr	r1, [r1, #0]
 8004cda:	4605      	mov	r5, r0
 8004cdc:	b109      	cbz	r1, 8004ce2 <cleanup_glue+0xe>
 8004cde:	f7ff fff9 	bl	8004cd4 <cleanup_glue>
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cea:	f000 b869 	b.w	8004dc0 <_free_r>
	...

08004cf0 <_reclaim_reent>:
 8004cf0:	4b2c      	ldr	r3, [pc, #176]	; (8004da4 <_reclaim_reent+0xb4>)
 8004cf2:	b570      	push	{r4, r5, r6, lr}
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	4283      	cmp	r3, r0
 8004cfa:	d051      	beq.n	8004da0 <_reclaim_reent+0xb0>
 8004cfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004cfe:	b143      	cbz	r3, 8004d12 <_reclaim_reent+0x22>
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d14a      	bne.n	8004d9c <_reclaim_reent+0xac>
 8004d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d08:	6819      	ldr	r1, [r3, #0]
 8004d0a:	b111      	cbz	r1, 8004d12 <_reclaim_reent+0x22>
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f000 f857 	bl	8004dc0 <_free_r>
 8004d12:	6961      	ldr	r1, [r4, #20]
 8004d14:	b111      	cbz	r1, 8004d1c <_reclaim_reent+0x2c>
 8004d16:	4620      	mov	r0, r4
 8004d18:	f000 f852 	bl	8004dc0 <_free_r>
 8004d1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d1e:	b111      	cbz	r1, 8004d26 <_reclaim_reent+0x36>
 8004d20:	4620      	mov	r0, r4
 8004d22:	f000 f84d 	bl	8004dc0 <_free_r>
 8004d26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d28:	b111      	cbz	r1, 8004d30 <_reclaim_reent+0x40>
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f000 f848 	bl	8004dc0 <_free_r>
 8004d30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004d32:	b111      	cbz	r1, 8004d3a <_reclaim_reent+0x4a>
 8004d34:	4620      	mov	r0, r4
 8004d36:	f000 f843 	bl	8004dc0 <_free_r>
 8004d3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004d3c:	b111      	cbz	r1, 8004d44 <_reclaim_reent+0x54>
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f000 f83e 	bl	8004dc0 <_free_r>
 8004d44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004d46:	b111      	cbz	r1, 8004d4e <_reclaim_reent+0x5e>
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f000 f839 	bl	8004dc0 <_free_r>
 8004d4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004d50:	b111      	cbz	r1, 8004d58 <_reclaim_reent+0x68>
 8004d52:	4620      	mov	r0, r4
 8004d54:	f000 f834 	bl	8004dc0 <_free_r>
 8004d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d5a:	b111      	cbz	r1, 8004d62 <_reclaim_reent+0x72>
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f000 f82f 	bl	8004dc0 <_free_r>
 8004d62:	69a3      	ldr	r3, [r4, #24]
 8004d64:	b1e3      	cbz	r3, 8004da0 <_reclaim_reent+0xb0>
 8004d66:	4620      	mov	r0, r4
 8004d68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d6a:	4798      	blx	r3
 8004d6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004d6e:	b1b9      	cbz	r1, 8004da0 <_reclaim_reent+0xb0>
 8004d70:	4620      	mov	r0, r4
 8004d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d76:	f7ff bfad 	b.w	8004cd4 <cleanup_glue>
 8004d7a:	5949      	ldr	r1, [r1, r5]
 8004d7c:	b941      	cbnz	r1, 8004d90 <_reclaim_reent+0xa0>
 8004d7e:	3504      	adds	r5, #4
 8004d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d82:	2d80      	cmp	r5, #128	; 0x80
 8004d84:	68d9      	ldr	r1, [r3, #12]
 8004d86:	d1f8      	bne.n	8004d7a <_reclaim_reent+0x8a>
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f000 f819 	bl	8004dc0 <_free_r>
 8004d8e:	e7ba      	b.n	8004d06 <_reclaim_reent+0x16>
 8004d90:	680e      	ldr	r6, [r1, #0]
 8004d92:	4620      	mov	r0, r4
 8004d94:	f000 f814 	bl	8004dc0 <_free_r>
 8004d98:	4631      	mov	r1, r6
 8004d9a:	e7ef      	b.n	8004d7c <_reclaim_reent+0x8c>
 8004d9c:	2500      	movs	r5, #0
 8004d9e:	e7ef      	b.n	8004d80 <_reclaim_reent+0x90>
 8004da0:	bd70      	pop	{r4, r5, r6, pc}
 8004da2:	bf00      	nop
 8004da4:	200000c8 	.word	0x200000c8

08004da8 <__malloc_lock>:
 8004da8:	4801      	ldr	r0, [pc, #4]	; (8004db0 <__malloc_lock+0x8>)
 8004daa:	f7ff bf7b 	b.w	8004ca4 <__retarget_lock_acquire_recursive>
 8004dae:	bf00      	nop
 8004db0:	20001bf8 	.word	0x20001bf8

08004db4 <__malloc_unlock>:
 8004db4:	4801      	ldr	r0, [pc, #4]	; (8004dbc <__malloc_unlock+0x8>)
 8004db6:	f7ff bf76 	b.w	8004ca6 <__retarget_lock_release_recursive>
 8004dba:	bf00      	nop
 8004dbc:	20001bf8 	.word	0x20001bf8

08004dc0 <_free_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	2900      	cmp	r1, #0
 8004dc6:	d043      	beq.n	8004e50 <_free_r+0x90>
 8004dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dcc:	1f0c      	subs	r4, r1, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bfb8      	it	lt
 8004dd2:	18e4      	addlt	r4, r4, r3
 8004dd4:	f7ff ffe8 	bl	8004da8 <__malloc_lock>
 8004dd8:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <_free_r+0x94>)
 8004dda:	6813      	ldr	r3, [r2, #0]
 8004ddc:	4610      	mov	r0, r2
 8004dde:	b933      	cbnz	r3, 8004dee <_free_r+0x2e>
 8004de0:	6063      	str	r3, [r4, #4]
 8004de2:	6014      	str	r4, [r2, #0]
 8004de4:	4628      	mov	r0, r5
 8004de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dea:	f7ff bfe3 	b.w	8004db4 <__malloc_unlock>
 8004dee:	42a3      	cmp	r3, r4
 8004df0:	d90a      	bls.n	8004e08 <_free_r+0x48>
 8004df2:	6821      	ldr	r1, [r4, #0]
 8004df4:	1862      	adds	r2, r4, r1
 8004df6:	4293      	cmp	r3, r2
 8004df8:	bf01      	itttt	eq
 8004dfa:	681a      	ldreq	r2, [r3, #0]
 8004dfc:	685b      	ldreq	r3, [r3, #4]
 8004dfe:	1852      	addeq	r2, r2, r1
 8004e00:	6022      	streq	r2, [r4, #0]
 8004e02:	6063      	str	r3, [r4, #4]
 8004e04:	6004      	str	r4, [r0, #0]
 8004e06:	e7ed      	b.n	8004de4 <_free_r+0x24>
 8004e08:	461a      	mov	r2, r3
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	b10b      	cbz	r3, 8004e12 <_free_r+0x52>
 8004e0e:	42a3      	cmp	r3, r4
 8004e10:	d9fa      	bls.n	8004e08 <_free_r+0x48>
 8004e12:	6811      	ldr	r1, [r2, #0]
 8004e14:	1850      	adds	r0, r2, r1
 8004e16:	42a0      	cmp	r0, r4
 8004e18:	d10b      	bne.n	8004e32 <_free_r+0x72>
 8004e1a:	6820      	ldr	r0, [r4, #0]
 8004e1c:	4401      	add	r1, r0
 8004e1e:	1850      	adds	r0, r2, r1
 8004e20:	4283      	cmp	r3, r0
 8004e22:	6011      	str	r1, [r2, #0]
 8004e24:	d1de      	bne.n	8004de4 <_free_r+0x24>
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	4401      	add	r1, r0
 8004e2c:	6011      	str	r1, [r2, #0]
 8004e2e:	6053      	str	r3, [r2, #4]
 8004e30:	e7d8      	b.n	8004de4 <_free_r+0x24>
 8004e32:	d902      	bls.n	8004e3a <_free_r+0x7a>
 8004e34:	230c      	movs	r3, #12
 8004e36:	602b      	str	r3, [r5, #0]
 8004e38:	e7d4      	b.n	8004de4 <_free_r+0x24>
 8004e3a:	6820      	ldr	r0, [r4, #0]
 8004e3c:	1821      	adds	r1, r4, r0
 8004e3e:	428b      	cmp	r3, r1
 8004e40:	bf01      	itttt	eq
 8004e42:	6819      	ldreq	r1, [r3, #0]
 8004e44:	685b      	ldreq	r3, [r3, #4]
 8004e46:	1809      	addeq	r1, r1, r0
 8004e48:	6021      	streq	r1, [r4, #0]
 8004e4a:	6063      	str	r3, [r4, #4]
 8004e4c:	6054      	str	r4, [r2, #4]
 8004e4e:	e7c9      	b.n	8004de4 <_free_r+0x24>
 8004e50:	bd38      	pop	{r3, r4, r5, pc}
 8004e52:	bf00      	nop
 8004e54:	20001b10 	.word	0x20001b10

08004e58 <_init>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	bf00      	nop
 8004e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5e:	bc08      	pop	{r3}
 8004e60:	469e      	mov	lr, r3
 8004e62:	4770      	bx	lr

08004e64 <_fini>:
 8004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e66:	bf00      	nop
 8004e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6a:	bc08      	pop	{r3}
 8004e6c:	469e      	mov	lr, r3
 8004e6e:	4770      	bx	lr
