
did_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000311c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08003228  08003228  00013228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d4  080033d4  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  080033d4  080033d4  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033d4  080033d4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080033dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000184  08003560  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08003560  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afc5  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f19  00000000  00000000  0002b172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  0002d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  0002dc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017388  00000000  00000000  0002e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c48d  00000000  00000000  00045a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d75  00000000  00000000  00051ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8c22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f04  00000000  00000000  000d8c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	08003210 	.word	0x08003210

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	08003210 	.word	0x08003210

0800014c <Delay>:
 * A Delay with a value of ~1ms
 * @Param counts: Number of milliseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void Delay(uint32_t counts) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint16_t j;
	for (i = 0; i < counts; i++) {
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e00c      	b.n	8000174 <Delay+0x28>
		for (j = 0; j < 16000; j++) {
 800015a:	2300      	movs	r3, #0
 800015c:	817b      	strh	r3, [r7, #10]
 800015e:	e002      	b.n	8000166 <Delay+0x1a>
 8000160:	897b      	ldrh	r3, [r7, #10]
 8000162:	3301      	adds	r3, #1
 8000164:	817b      	strh	r3, [r7, #10]
 8000166:	897b      	ldrh	r3, [r7, #10]
 8000168:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800016c:	d3f8      	bcc.n	8000160 <Delay+0x14>
	for (i = 0; i < counts; i++) {
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	3301      	adds	r3, #1
 8000172:	60fb      	str	r3, [r7, #12]
 8000174:	68fa      	ldr	r2, [r7, #12]
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	429a      	cmp	r2, r3
 800017a:	d3ee      	bcc.n	800015a <Delay+0xe>
		}
	}

}
 800017c:	bf00      	nop
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <MicrosecondDelay>:
 * A Delay with a value of ~1us
 * @Param counts: Number of microseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void MicrosecondDelay(uint32_t counts) {
 8000188:	b480      	push	{r7}
 800018a:	b085      	sub	sp, #20
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint8_t j;

	for (i = 0; i < counts; i++) {
 8000190:	2300      	movs	r3, #0
 8000192:	60fb      	str	r3, [r7, #12]
 8000194:	e00b      	b.n	80001ae <MicrosecondDelay+0x26>
		for (j = 0; j < 16; j++) {
 8000196:	2300      	movs	r3, #0
 8000198:	72fb      	strb	r3, [r7, #11]
 800019a:	e002      	b.n	80001a2 <MicrosecondDelay+0x1a>
 800019c:	7afb      	ldrb	r3, [r7, #11]
 800019e:	3301      	adds	r3, #1
 80001a0:	72fb      	strb	r3, [r7, #11]
 80001a2:	7afb      	ldrb	r3, [r7, #11]
 80001a4:	2b0f      	cmp	r3, #15
 80001a6:	d9f9      	bls.n	800019c <MicrosecondDelay+0x14>
	for (i = 0; i < counts; i++) {
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	3301      	adds	r3, #1
 80001ac:	60fb      	str	r3, [r7, #12]
 80001ae:	68fa      	ldr	r2, [r7, #12]
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d3ef      	bcc.n	8000196 <MicrosecondDelay+0xe>
		}
	}
}
 80001b6:	bf00      	nop
 80001b8:	bf00      	nop
 80001ba:	3714      	adds	r7, #20
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr

080001c2 <MoveCursor>:
/**
 * Moves cursor to the position on the screen determined by XY Coordinates
 * @Param x: x-coordinate
 * @Param y: y-coordinate
 */
void MoveCursor(uint8_t x, uint8_t y) {
 80001c2:	b580      	push	{r7, lr}
 80001c4:	b084      	sub	sp, #16
 80001c6:	af00      	add	r7, sp, #0
 80001c8:	4603      	mov	r3, r0
 80001ca:	460a      	mov	r2, r1
 80001cc:	71fb      	strb	r3, [r7, #7]
 80001ce:	4613      	mov	r3, r2
 80001d0:	71bb      	strb	r3, [r7, #6]
	 * Row major:
	 * 0 1 2 3 4
	 * 5 6 7 8 9
	 *
	 */
	uint16_t offset = 40 * y + x;
 80001d2:	79bb      	ldrb	r3, [r7, #6]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	461a      	mov	r2, r3
 80001d8:	0092      	lsls	r2, r2, #2
 80001da:	4413      	add	r3, r2
 80001dc:	00db      	lsls	r3, r3, #3
 80001de:	b29a      	uxth	r2, r3
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	4413      	add	r3, r2
 80001e6:	81fb      	strh	r3, [r7, #14]

	TransmitCommand(0x46);
 80001e8:	2046      	movs	r0, #70	; 0x46
 80001ea:	f000 fb15 	bl	8000818 <TransmitCommand>
	// The CSRW register is 2 bytes long, so the first parameter
	// is the first byte and the second parameter is the second
	// byte
	TransmitCommandParameter(offset & 0xFF);
 80001ee:	89fb      	ldrh	r3, [r7, #14]
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fb2e 	bl	8000854 <TransmitCommandParameter>
	TransmitCommandParameter(offset >> 8);
 80001f8:	89fb      	ldrh	r3, [r7, #14]
 80001fa:	0a1b      	lsrs	r3, r3, #8
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fb27 	bl	8000854 <TransmitCommandParameter>
}
 8000206:	bf00      	nop
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}

0800020e <ClearScreen>:

/**
 * Purpose: Prints 1200 " " characters to clear the screen
 */
void ClearScreen() {
 800020e:	b580      	push	{r7, lr}
 8000210:	b082      	sub	sp, #8
 8000212:	af00      	add	r7, sp, #0
	//Set cursor to start position
	MoveCursor(0, 0);
 8000214:	2100      	movs	r1, #0
 8000216:	2000      	movs	r0, #0
 8000218:	f7ff ffd3 	bl	80001c2 <MoveCursor>

	//replace all characters with spaces
	TransmitCommand(0x42);
 800021c:	2042      	movs	r0, #66	; 0x42
 800021e:	f000 fafb 	bl	8000818 <TransmitCommand>
	for (uint16_t i = 0; i < 1200; i++) {
 8000222:	2300      	movs	r3, #0
 8000224:	80fb      	strh	r3, [r7, #6]
 8000226:	e005      	b.n	8000234 <ClearScreen+0x26>
		TransmitCommandParameter(0x20);
 8000228:	2020      	movs	r0, #32
 800022a:	f000 fb13 	bl	8000854 <TransmitCommandParameter>
	for (uint16_t i = 0; i < 1200; i++) {
 800022e:	88fb      	ldrh	r3, [r7, #6]
 8000230:	3301      	adds	r3, #1
 8000232:	80fb      	strh	r3, [r7, #6]
 8000234:	88fb      	ldrh	r3, [r7, #6]
 8000236:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800023a:	d3f5      	bcc.n	8000228 <ClearScreen+0x1a>
	}
	MoveCursor(0, 0);
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f7ff ffbf 	bl	80001c2 <MoveCursor>
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <SaveCharacterToRAM>:
 * Saves each subcharacter to the SG RAM 1, in locations 0x80 to 0x8F
 * @Param bitmap: An array of the bitmap of that particular subcharacter
 * @Param offset: Some offset number
 * Returns: nothing
 */
void SaveCharacterToRAM(uint8_t *bitmap, uint8_t offset) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	460b      	mov	r3, r1
 8000256:	70fb      	strb	r3, [r7, #3]
	TransmitCommand(0x46);
 8000258:	2046      	movs	r0, #70	; 0x46
 800025a:	f000 fadd 	bl	8000818 <TransmitCommand>
	TransmitCommandParameter(offset);
 800025e:	78fb      	ldrb	r3, [r7, #3]
 8000260:	4618      	mov	r0, r3
 8000262:	f000 faf7 	bl	8000854 <TransmitCommandParameter>
	TransmitCommandParameter(0x48);
 8000266:	2048      	movs	r0, #72	; 0x48
 8000268:	f000 faf4 	bl	8000854 <TransmitCommandParameter>
	TransmitCommand(0x42);
 800026c:	2042      	movs	r0, #66	; 0x42
 800026e:	f000 fad3 	bl	8000818 <TransmitCommand>

	for (int i = 0; i < BYTEPERBITMAP; i++) {
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
 8000276:	e009      	b.n	800028c <SaveCharacterToRAM+0x40>
		TransmitCommandParameter(bitmap[i]);
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	4413      	add	r3, r2
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fae7 	bl	8000854 <TransmitCommandParameter>
	for (int i = 0; i < BYTEPERBITMAP; i++) {
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	3301      	adds	r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	2b0f      	cmp	r3, #15
 8000290:	ddf2      	ble.n	8000278 <SaveCharacterToRAM+0x2c>
	}
}
 8000292:	bf00      	nop
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <CharacterBitMaps>:

/**
 * Writes custom bitmaps to the LCD screen RAM
 */
void CharacterBitMaps(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b0c2      	sub	sp, #264	; 0x108
 80002a0:	af00      	add	r7, sp, #0
	uint8_t bitmap[16][BYTEPERBITMAP] = { { 0x7E, 0x7E, 0x60, 0x60, 0x60, 0x60,
 80002a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002aa:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <CharacterBitMaps+0x78>)
 80002ac:	4618      	mov	r0, r3
 80002ae:	4611      	mov	r1, r2
 80002b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b4:	461a      	mov	r2, r3
 80002b6:	f002 ff95 	bl	80031e4 <memcpy>
			{ 0x00, 0x46, 0x46, 0x46, 0x66, 0x66, 0x66, 0x36, 0x36, 0x36, 0x0E,
					0x0E, 0x0E, 0x06, 0x06, 0x00 }, { 0xC0, 0xE0, 0x60, 0x30,
					0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x04, 0x06, 0x06, 0x06,
					0x07, 0x03 }, { 0x03, 0x07, 0x06, 0x06, 0x0C, 0x0C, 0x18,
					0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x60, 0xE0, 0xC0 } };
	TransmitCommand(0x5C);
 80002ba:	205c      	movs	r0, #92	; 0x5c
 80002bc:	f000 faac 	bl	8000818 <TransmitCommand>
	TransmitCommandParameter(0x00);
 80002c0:	2000      	movs	r0, #0
 80002c2:	f000 fac7 	bl	8000854 <TransmitCommandParameter>
	TransmitCommandParameter(0x40);
 80002c6:	2040      	movs	r0, #64	; 0x40
 80002c8:	f000 fac4 	bl	8000854 <TransmitCommandParameter>
	TransmitCommand(0x4C);
 80002cc:	204c      	movs	r0, #76	; 0x4c
 80002ce:	f000 faa3 	bl	8000818 <TransmitCommand>

	for (uint8_t i = 0; i < 16; i++) {
 80002d2:	2300      	movs	r3, #0
 80002d4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80002d8:	e011      	b.n	80002fe <CharacterBitMaps+0x62>
		SaveCharacterToRAM(bitmap[i], i * BYTEPERBITMAP);
 80002da:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80002de:	1d3a      	adds	r2, r7, #4
 80002e0:	011b      	lsls	r3, r3, #4
 80002e2:	441a      	add	r2, r3
 80002e4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80002e8:	011b      	lsls	r3, r3, #4
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	4610      	mov	r0, r2
 80002f0:	f7ff ffac 	bl	800024c <SaveCharacterToRAM>
	for (uint8_t i = 0; i < 16; i++) {
 80002f4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80002f8:	3301      	adds	r3, #1
 80002fa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80002fe:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000302:	2b0f      	cmp	r3, #15
 8000304:	d9e9      	bls.n	80002da <CharacterBitMaps+0x3e>
	}
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	08003294 	.word	0x08003294

08000318 <OutputString>:
 * @Param Str[]: A string, "array of characters", whatever
 * @Param starting_x: x-coordinate to write the string to
 * @Param starting_y: y-coordinate to write the string to
 * Returns: nothing
 */
void OutputString(char Str[], uint8_t starting_x, uint8_t starting_y) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
 8000324:	4613      	mov	r3, r2
 8000326:	70bb      	strb	r3, [r7, #2]
					{ 0x20, 0x20, 0x20, 0x20 }, { 0x20, 0x20, 0x2E, 0x20 }, {
							0x2E, 0x20, 0x2E, 0x20 }, { 0x87, 0x87, 0x86, 0x86 }, //SPACE, ., :, -
			};

	uint8_t temp;
	uint8_t x = starting_x;
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	73bb      	strb	r3, [r7, #14]

	TransmitCommand(0x4C);                 //Set the cursor direction to "Right"
 800032c:	204c      	movs	r0, #76	; 0x4c
 800032e:	f000 fa73 	bl	8000818 <TransmitCommand>

	for (uint8_t c = 0; Str[c] != '\0'; c++)
 8000332:	2300      	movs	r3, #0
 8000334:	737b      	strb	r3, [r7, #13]
 8000336:	e069      	b.n	800040c <OutputString+0xf4>
	// used to be for (uint8_t c = 0; c < Str[c] != '\0'; c++)
			{
		MoveCursor(x, starting_y);
 8000338:	78ba      	ldrb	r2, [r7, #2]
 800033a:	7bbb      	ldrb	r3, [r7, #14]
 800033c:	4611      	mov	r1, r2
 800033e:	4618      	mov	r0, r3
 8000340:	f7ff ff3f 	bl	80001c2 <MoveCursor>
		temp = (uint8_t) Str[c];
 8000344:	7b7b      	ldrb	r3, [r7, #13]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	73fb      	strb	r3, [r7, #15]
		if (temp == 32) {
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	2b20      	cmp	r3, #32
 8000352:	d102      	bne.n	800035a <OutputString+0x42>
			temp = 36;                  //if character is " "
 8000354:	2324      	movs	r3, #36	; 0x24
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e025      	b.n	80003a6 <OutputString+0x8e>
		} else if (temp == 58) {
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	2b3a      	cmp	r3, #58	; 0x3a
 800035e:	d102      	bne.n	8000366 <OutputString+0x4e>
			temp = 38;                  //if character is ":"
 8000360:	2326      	movs	r3, #38	; 0x26
 8000362:	73fb      	strb	r3, [r7, #15]
 8000364:	e01f      	b.n	80003a6 <OutputString+0x8e>
		} else if (temp == 46) {
 8000366:	7bfb      	ldrb	r3, [r7, #15]
 8000368:	2b2e      	cmp	r3, #46	; 0x2e
 800036a:	d102      	bne.n	8000372 <OutputString+0x5a>
			temp = 37;                  //if character is "."
 800036c:	2325      	movs	r3, #37	; 0x25
 800036e:	73fb      	strb	r3, [r7, #15]
 8000370:	e019      	b.n	80003a6 <OutputString+0x8e>
		} else if (temp == 45) {
 8000372:	7bfb      	ldrb	r3, [r7, #15]
 8000374:	2b2d      	cmp	r3, #45	; 0x2d
 8000376:	d102      	bne.n	800037e <OutputString+0x66>
			temp = 39;                  //if character is "-"
 8000378:	2327      	movs	r3, #39	; 0x27
 800037a:	73fb      	strb	r3, [r7, #15]
 800037c:	e013      	b.n	80003a6 <OutputString+0x8e>
		} else if (temp <= 57) {
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	2b39      	cmp	r3, #57	; 0x39
 8000382:	d803      	bhi.n	800038c <OutputString+0x74>
			temp -= OFFSET_NUMERIC;     //if character is between "0" and "9"
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	3b16      	subs	r3, #22
 8000388:	73fb      	strb	r3, [r7, #15]
 800038a:	e00c      	b.n	80003a6 <OutputString+0x8e>
		} else if (temp <= 90) {
 800038c:	7bfb      	ldrb	r3, [r7, #15]
 800038e:	2b5a      	cmp	r3, #90	; 0x5a
 8000390:	d803      	bhi.n	800039a <OutputString+0x82>
			temp -= OFFSET_CAPITAL;     //if character is between "A" and "Z"
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	3b41      	subs	r3, #65	; 0x41
 8000396:	73fb      	strb	r3, [r7, #15]
 8000398:	e005      	b.n	80003a6 <OutputString+0x8e>
		} else if (temp <= 122) {
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	2b7a      	cmp	r3, #122	; 0x7a
 800039e:	d802      	bhi.n	80003a6 <OutputString+0x8e>
			temp -= OFFSET_LOWCASE;     //if character is between "a" and "z"
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	3b61      	subs	r3, #97	; 0x61
 80003a4:	73fb      	strb	r3, [r7, #15]
		 * |C D|
		 *  - -
		 * (4 subcharacters, in that order)     *
		 ***********************************/

		TransmitCommand(0x42);                      //print subcharacers A and B
 80003a6:	2042      	movs	r0, #66	; 0x42
 80003a8:	f000 fa36 	bl	8000818 <TransmitCommand>
		TransmitCommandParameter(LOOKUPTABLE[temp][0]);
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	4a1d      	ldr	r2, [pc, #116]	; (8000424 <OutputString+0x10c>)
 80003b0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fa4d 	bl	8000854 <TransmitCommandParameter>
		TransmitCommandParameter(LOOKUPTABLE[temp][1]);
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	4a19      	ldr	r2, [pc, #100]	; (8000424 <OutputString+0x10c>)
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	4413      	add	r3, r2
 80003c2:	785b      	ldrb	r3, [r3, #1]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 fa45 	bl	8000854 <TransmitCommandParameter>

		MoveCursor(x, starting_y + 1);
 80003ca:	78bb      	ldrb	r3, [r7, #2]
 80003cc:	3301      	adds	r3, #1
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	4611      	mov	r1, r2
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff fef4 	bl	80001c2 <MoveCursor>

		TransmitCommand(0x42);                 //print the subcharacters C and D
 80003da:	2042      	movs	r0, #66	; 0x42
 80003dc:	f000 fa1c 	bl	8000818 <TransmitCommand>
		TransmitCommandParameter(LOOKUPTABLE[temp][2]);
 80003e0:	7bfb      	ldrb	r3, [r7, #15]
 80003e2:	4a10      	ldr	r2, [pc, #64]	; (8000424 <OutputString+0x10c>)
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	4413      	add	r3, r2
 80003e8:	789b      	ldrb	r3, [r3, #2]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fa32 	bl	8000854 <TransmitCommandParameter>
		TransmitCommandParameter(LOOKUPTABLE[temp][3]);
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <OutputString+0x10c>)
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	4413      	add	r3, r2
 80003f8:	78db      	ldrb	r3, [r3, #3]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 fa2a 	bl	8000854 <TransmitCommandParameter>

		x += 3;
 8000400:	7bbb      	ldrb	r3, [r7, #14]
 8000402:	3303      	adds	r3, #3
 8000404:	73bb      	strb	r3, [r7, #14]
	for (uint8_t c = 0; Str[c] != '\0'; c++)
 8000406:	7b7b      	ldrb	r3, [r7, #13]
 8000408:	3301      	adds	r3, #1
 800040a:	737b      	strb	r3, [r7, #13]
 800040c:	7b7b      	ldrb	r3, [r7, #13]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d18f      	bne.n	8000338 <OutputString+0x20>
	}
}
 8000418:	bf00      	nop
 800041a:	bf00      	nop
 800041c:	3710      	adds	r7, #16
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	200000d4 	.word	0x200000d4

08000428 <OutputPaddedInteger>:
 *                    otherwise, the decimal will be on
 * @Param x: x-coordinate to write the character
 * @Param y: y-coordinate to write the character
 * Returns: nothing
 */
void OutputPaddedInteger(int32_t num, uint8_t dec, uint8_t x, uint8_t y) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	4608      	mov	r0, r1
 8000432:	4611      	mov	r1, r2
 8000434:	461a      	mov	r2, r3
 8000436:	4603      	mov	r3, r0
 8000438:	70fb      	strb	r3, [r7, #3]
 800043a:	460b      	mov	r3, r1
 800043c:	70bb      	strb	r3, [r7, #2]
 800043e:	4613      	mov	r3, r2
 8000440:	707b      	strb	r3, [r7, #1]
	uint8_t i;
	char str[5] = { ' ', ' ', ' ', ' ', '\0' };
 8000442:	4a37      	ldr	r2, [pc, #220]	; (8000520 <OutputPaddedInteger+0xf8>)
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	e892 0003 	ldmia.w	r2, {r0, r1}
 800044c:	6018      	str	r0, [r3, #0]
 800044e:	3304      	adds	r3, #4
 8000450:	7019      	strb	r1, [r3, #0]
	char decplace[2] = { ' ', '\0' };
 8000452:	2320      	movs	r3, #32
 8000454:	81bb      	strh	r3, [r7, #12]

	if (num < 0) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b00      	cmp	r3, #0
 800045a:	da05      	bge.n	8000468 <OutputPaddedInteger+0x40>
		str[0] = '-';
 800045c:	232d      	movs	r3, #45	; 0x2d
 800045e:	743b      	strb	r3, [r7, #16]
		num = -1 * num;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	425b      	negs	r3, r3
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	e004      	b.n	8000472 <OutputPaddedInteger+0x4a>
	} else if (num == 0) {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d101      	bne.n	8000472 <OutputPaddedInteger+0x4a>
		str[3] = '0';
 800046e:	2330      	movs	r3, #48	; 0x30
 8000470:	74fb      	strb	r3, [r7, #19]
	}

	if (num > 999) {
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000478:	db02      	blt.n	8000480 <OutputPaddedInteger+0x58>
		num = 999;
 800047a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800047e:	607b      	str	r3, [r7, #4]
	}

	// Convert the integer digits into chars, one by one
	for (i = 3; num != 0; i--) {
 8000480:	2303      	movs	r3, #3
 8000482:	75fb      	strb	r3, [r7, #23]
 8000484:	e01d      	b.n	80004c2 <OutputPaddedInteger+0x9a>
		str[i] = "0123456789"[num % 10];
 8000486:	6879      	ldr	r1, [r7, #4]
 8000488:	4b26      	ldr	r3, [pc, #152]	; (8000524 <OutputPaddedInteger+0xfc>)
 800048a:	fb83 2301 	smull	r2, r3, r3, r1
 800048e:	109a      	asrs	r2, r3, #2
 8000490:	17cb      	asrs	r3, r1, #31
 8000492:	1ad2      	subs	r2, r2, r3
 8000494:	4613      	mov	r3, r2
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4413      	add	r3, r2
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	1aca      	subs	r2, r1, r3
 800049e:	7dfb      	ldrb	r3, [r7, #23]
 80004a0:	4921      	ldr	r1, [pc, #132]	; (8000528 <OutputPaddedInteger+0x100>)
 80004a2:	5c8a      	ldrb	r2, [r1, r2]
 80004a4:	3318      	adds	r3, #24
 80004a6:	443b      	add	r3, r7
 80004a8:	f803 2c08 	strb.w	r2, [r3, #-8]
		num = num / 10;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <OutputPaddedInteger+0xfc>)
 80004b0:	fb82 1203 	smull	r1, r2, r2, r3
 80004b4:	1092      	asrs	r2, r2, #2
 80004b6:	17db      	asrs	r3, r3, #31
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	607b      	str	r3, [r7, #4]
	for (i = 3; num != 0; i--) {
 80004bc:	7dfb      	ldrb	r3, [r7, #23]
 80004be:	3b01      	subs	r3, #1
 80004c0:	75fb      	strb	r3, [r7, #23]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1de      	bne.n	8000486 <OutputPaddedInteger+0x5e>
	}

	OutputString(str, x, y);
 80004c8:	787a      	ldrb	r2, [r7, #1]
 80004ca:	78b9      	ldrb	r1, [r7, #2]
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff ff21 	bl	8000318 <OutputString>

	if (dec != -1) {
		//Output 1 decimal place
		OutputString(".", x + 12, y);
 80004d6:	78bb      	ldrb	r3, [r7, #2]
 80004d8:	330c      	adds	r3, #12
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	787a      	ldrb	r2, [r7, #1]
 80004de:	4619      	mov	r1, r3
 80004e0:	4812      	ldr	r0, [pc, #72]	; (800052c <OutputPaddedInteger+0x104>)
 80004e2:	f7ff ff19 	bl	8000318 <OutputString>

		dec = dec % 10;
 80004e6:	78fa      	ldrb	r2, [r7, #3]
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <OutputPaddedInteger+0x108>)
 80004ea:	fba3 1302 	umull	r1, r3, r3, r2
 80004ee:	08d9      	lsrs	r1, r3, #3
 80004f0:	460b      	mov	r3, r1
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	440b      	add	r3, r1
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	1ad3      	subs	r3, r2, r3
 80004fa:	70fb      	strb	r3, [r7, #3]

		decplace[0] = "0123456789"[dec];
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <OutputPaddedInteger+0x100>)
 8000500:	5cd3      	ldrb	r3, [r2, r3]
 8000502:	733b      	strb	r3, [r7, #12]
		OutputString(decplace, x + 15, y);
 8000504:	78bb      	ldrb	r3, [r7, #2]
 8000506:	330f      	adds	r3, #15
 8000508:	b2d9      	uxtb	r1, r3
 800050a:	787a      	ldrb	r2, [r7, #1]
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff ff01 	bl	8000318 <OutputString>
	}
}
 8000516:	bf00      	nop
 8000518:	3718      	adds	r7, #24
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	08003398 	.word	0x08003398
 8000524:	66666667 	.word	0x66666667
 8000528:	080033a0 	.word	0x080033a0
 800052c:	08003394 	.word	0x08003394
 8000530:	cccccccd 	.word	0xcccccccd

08000534 <DisplayScreen>:
}

/**
 * Displays all information in a single screen
 */
void DisplayScreen(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
	ClearScreen();
 800053a:	f7ff fe68 	bl	800020e <ClearScreen>

		// **TEMPORARY: DATA IS DISPLAYED 1 BY 1


	// Different code for each page allows for different designs
	switch (current_page) {
 800053e:	4ba7      	ldr	r3, [pc, #668]	; (80007dc <DisplayScreen+0x2a8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d003      	beq.n	800054e <DisplayScreen+0x1a>
 8000546:	2b02      	cmp	r3, #2
 8000548:	f000 80a9 	beq.w	800069e <DisplayScreen+0x16a>
			}
			break;

	}

}
 800054c:	e141      	b.n	80007d2 <DisplayScreen+0x29e>
			for (uint8_t i = 0; i < NUM_ROWS_PAGE1; i++) {
 800054e:	2300      	movs	r3, #0
 8000550:	75fb      	strb	r3, [r7, #23]
 8000552:	e09f      	b.n	8000694 <DisplayScreen+0x160>
				int32_t output = 0;			// Used to store the output data which will be displayed after the switch statement
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]
				switch(i)
 8000558:	7dfb      	ldrb	r3, [r7, #23]
 800055a:	2b03      	cmp	r3, #3
 800055c:	d84f      	bhi.n	80005fe <DisplayScreen+0xca>
 800055e:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <DisplayScreen+0x30>)
 8000560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000564:	08000575 	.word	0x08000575
 8000568:	08000593 	.word	0x08000593
 800056c:	080005bf 	.word	0x080005bf
 8000570:	080005f3 	.word	0x080005f3
						convert.bytes[0] = DisplayDataArray[5].raw_data[0];
 8000574:	4b9a      	ldr	r3, [pc, #616]	; (80007e0 <DisplayScreen+0x2ac>)
 8000576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800057a:	b25b      	sxtb	r3, r3
 800057c:	b2db      	uxtb	r3, r3
 800057e:	713b      	strb	r3, [r7, #4]
						convert.bytes[1] = DisplayDataArray[5].raw_data[1];
 8000580:	4b97      	ldr	r3, [pc, #604]	; (80007e0 <DisplayScreen+0x2ac>)
 8000582:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000586:	b25b      	sxtb	r3, r3
 8000588:	b2db      	uxtb	r3, r3
 800058a:	717b      	strb	r3, [r7, #5]
						output = convert.float_value;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	613b      	str	r3, [r7, #16]
						break;
 8000590:	e035      	b.n	80005fe <DisplayScreen+0xca>
						if (DisplayDataArray[6].raw_data[0] & 0B10000000)
 8000592:	4b93      	ldr	r3, [pc, #588]	; (80007e0 <DisplayScreen+0x2ac>)
 8000594:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000598:	b25b      	sxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	da09      	bge.n	80005b2 <DisplayScreen+0x7e>
							output = ((~DisplayDataArray[6].raw_data[0]) & 0B01111111) - 127;
 800059e:	4b90      	ldr	r3, [pc, #576]	; (80007e0 <DisplayScreen+0x2ac>)
 80005a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005ac:	3b7f      	subs	r3, #127	; 0x7f
 80005ae:	613b      	str	r3, [r7, #16]
						break;
 80005b0:	e025      	b.n	80005fe <DisplayScreen+0xca>
							output = DisplayDataArray[6].raw_data[0];
 80005b2:	4b8b      	ldr	r3, [pc, #556]	; (80007e0 <DisplayScreen+0x2ac>)
 80005b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	613b      	str	r3, [r7, #16]
						break;
 80005bc:	e01f      	b.n	80005fe <DisplayScreen+0xca>
						convert.bytes[0] = DisplayDataArray[2].raw_data[4];
 80005be:	4b88      	ldr	r3, [pc, #544]	; (80007e0 <DisplayScreen+0x2ac>)
 80005c0:	7e9b      	ldrb	r3, [r3, #26]
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	713b      	strb	r3, [r7, #4]
						convert.bytes[1] = DisplayDataArray[2].raw_data[5];
 80005c8:	4b85      	ldr	r3, [pc, #532]	; (80007e0 <DisplayScreen+0x2ac>)
 80005ca:	7edb      	ldrb	r3, [r3, #27]
 80005cc:	b25b      	sxtb	r3, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	717b      	strb	r3, [r7, #5]
						convert.bytes[2] = DisplayDataArray[2].raw_data[6];
 80005d2:	4b83      	ldr	r3, [pc, #524]	; (80007e0 <DisplayScreen+0x2ac>)
 80005d4:	7f1b      	ldrb	r3, [r3, #28]
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	71bb      	strb	r3, [r7, #6]
						convert.bytes[3] = DisplayDataArray[2].raw_data[7];
 80005dc:	4b80      	ldr	r3, [pc, #512]	; (80007e0 <DisplayScreen+0x2ac>)
 80005de:	7f5b      	ldrb	r3, [r3, #29]
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	71fb      	strb	r3, [r7, #7]
						output = convert.float_value * ((int8_t)18/5);
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	613b      	str	r3, [r7, #16]
						break;
 80005f0:	e005      	b.n	80005fe <DisplayScreen+0xca>
						output = DisplayDataArray[6].raw_data[0];
 80005f2:	4b7b      	ldr	r3, [pc, #492]	; (80007e0 <DisplayScreen+0x2ac>)
 80005f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	613b      	str	r3, [r7, #16]
						break;
 80005fc:	bf00      	nop
				OutputString(DisplayLayoutPage1[i].name, 0,	3*DisplayLayoutPage1[i].ypos);
 80005fe:	7dfb      	ldrb	r3, [r7, #23]
 8000600:	4a78      	ldr	r2, [pc, #480]	; (80007e4 <DisplayScreen+0x2b0>)
 8000602:	011b      	lsls	r3, r3, #4
 8000604:	4413      	add	r3, r2
 8000606:	6818      	ldr	r0, [r3, #0]
 8000608:	7dfb      	ldrb	r3, [r7, #23]
 800060a:	4a76      	ldr	r2, [pc, #472]	; (80007e4 <DisplayScreen+0x2b0>)
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	4413      	add	r3, r2
 8000610:	330c      	adds	r3, #12
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	0052      	lsls	r2, r2, #1
 8000618:	4413      	add	r3, r2
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	2100      	movs	r1, #0
 8000620:	f7ff fe7a 	bl	8000318 <OutputString>
				OutputPaddedInteger(output, -1, 3*DisplayLayoutPage1[i].data_xpos, 3*DisplayLayoutPage1[i].ypos);
 8000624:	7dfb      	ldrb	r3, [r7, #23]
 8000626:	4a6f      	ldr	r2, [pc, #444]	; (80007e4 <DisplayScreen+0x2b0>)
 8000628:	011b      	lsls	r3, r3, #4
 800062a:	4413      	add	r3, r2
 800062c:	330a      	adds	r3, #10
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	0052      	lsls	r2, r2, #1
 8000634:	4413      	add	r3, r2
 8000636:	b2da      	uxtb	r2, r3
 8000638:	7dfb      	ldrb	r3, [r7, #23]
 800063a:	496a      	ldr	r1, [pc, #424]	; (80007e4 <DisplayScreen+0x2b0>)
 800063c:	011b      	lsls	r3, r3, #4
 800063e:	440b      	add	r3, r1
 8000640:	330c      	adds	r3, #12
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	0049      	lsls	r1, r1, #1
 8000648:	440b      	add	r3, r1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	21ff      	movs	r1, #255	; 0xff
 800064e:	6938      	ldr	r0, [r7, #16]
 8000650:	f7ff feea 	bl	8000428 <OutputPaddedInteger>
				OutputString(DisplayLayoutPage1[i].unit, 3*DisplayLayoutPage1[i].unit_xpos, 3*DisplayLayoutPage1[i].ypos);
 8000654:	7dfb      	ldrb	r3, [r7, #23]
 8000656:	4a63      	ldr	r2, [pc, #396]	; (80007e4 <DisplayScreen+0x2b0>)
 8000658:	011b      	lsls	r3, r3, #4
 800065a:	4413      	add	r3, r2
 800065c:	3304      	adds	r3, #4
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	7dfb      	ldrb	r3, [r7, #23]
 8000662:	4a60      	ldr	r2, [pc, #384]	; (80007e4 <DisplayScreen+0x2b0>)
 8000664:	011b      	lsls	r3, r3, #4
 8000666:	4413      	add	r3, r2
 8000668:	330b      	adds	r3, #11
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	0052      	lsls	r2, r2, #1
 8000670:	4413      	add	r3, r2
 8000672:	b2d9      	uxtb	r1, r3
 8000674:	7dfb      	ldrb	r3, [r7, #23]
 8000676:	4a5b      	ldr	r2, [pc, #364]	; (80007e4 <DisplayScreen+0x2b0>)
 8000678:	011b      	lsls	r3, r3, #4
 800067a:	4413      	add	r3, r2
 800067c:	330c      	adds	r3, #12
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	4413      	add	r3, r2
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	f7ff fe45 	bl	8000318 <OutputString>
			for (uint8_t i = 0; i < NUM_ROWS_PAGE1; i++) {
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	3301      	adds	r3, #1
 8000692:	75fb      	strb	r3, [r7, #23]
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	2b03      	cmp	r3, #3
 8000698:	f67f af5c 	bls.w	8000554 <DisplayScreen+0x20>
			break;
 800069c:	e099      	b.n	80007d2 <DisplayScreen+0x29e>
			for (uint8_t i = 0; i < NUM_ROWS_PAGE2; i++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	73fb      	strb	r3, [r7, #15]
 80006a2:	e091      	b.n	80007c8 <DisplayScreen+0x294>
				int32_t output = 0;			// Used to store the output data which will be displayed after the switch statement
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
				switch(i)
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d855      	bhi.n	800075a <DisplayScreen+0x226>
 80006ae:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <DisplayScreen+0x180>)
 80006b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b4:	080006c5 	.word	0x080006c5
 80006b8:	080006f3 	.word	0x080006f3
 80006bc:	08000721 	.word	0x08000721
 80006c0:	0800073f 	.word	0x0800073f
						convert.bytes[0] = DisplayDataArray[2].raw_data[0];
 80006c4:	4b46      	ldr	r3, [pc, #280]	; (80007e0 <DisplayScreen+0x2ac>)
 80006c6:	7d9b      	ldrb	r3, [r3, #22]
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	703b      	strb	r3, [r7, #0]
						convert.bytes[1] = DisplayDataArray[2].raw_data[1];
 80006ce:	4b44      	ldr	r3, [pc, #272]	; (80007e0 <DisplayScreen+0x2ac>)
 80006d0:	7ddb      	ldrb	r3, [r3, #23]
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	707b      	strb	r3, [r7, #1]
						convert.bytes[2] = DisplayDataArray[2].raw_data[2];
 80006d8:	4b41      	ldr	r3, [pc, #260]	; (80007e0 <DisplayScreen+0x2ac>)
 80006da:	7e1b      	ldrb	r3, [r3, #24]
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	70bb      	strb	r3, [r7, #2]
						convert.bytes[3] = DisplayDataArray[2].raw_data[3];
 80006e2:	4b3f      	ldr	r3, [pc, #252]	; (80007e0 <DisplayScreen+0x2ac>)
 80006e4:	7e5b      	ldrb	r3, [r3, #25]
 80006e6:	b25b      	sxtb	r3, r3
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	70fb      	strb	r3, [r7, #3]
						output = convert.float_value;
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	60bb      	str	r3, [r7, #8]
						break;
 80006f0:	e033      	b.n	800075a <DisplayScreen+0x226>
						convert.bytes[0] = DisplayDataArray[2].raw_data[0];
 80006f2:	4b3b      	ldr	r3, [pc, #236]	; (80007e0 <DisplayScreen+0x2ac>)
 80006f4:	7d9b      	ldrb	r3, [r3, #22]
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	703b      	strb	r3, [r7, #0]
						convert.bytes[1] = DisplayDataArray[2].raw_data[1];
 80006fc:	4b38      	ldr	r3, [pc, #224]	; (80007e0 <DisplayScreen+0x2ac>)
 80006fe:	7ddb      	ldrb	r3, [r3, #23]
 8000700:	b25b      	sxtb	r3, r3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	707b      	strb	r3, [r7, #1]
						convert.bytes[2] = DisplayDataArray[2].raw_data[2];
 8000706:	4b36      	ldr	r3, [pc, #216]	; (80007e0 <DisplayScreen+0x2ac>)
 8000708:	7e1b      	ldrb	r3, [r3, #24]
 800070a:	b25b      	sxtb	r3, r3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	70bb      	strb	r3, [r7, #2]
						convert.bytes[3] = DisplayDataArray[2].raw_data[3];
 8000710:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <DisplayScreen+0x2ac>)
 8000712:	7e5b      	ldrb	r3, [r3, #25]
 8000714:	b25b      	sxtb	r3, r3
 8000716:	b2db      	uxtb	r3, r3
 8000718:	70fb      	strb	r3, [r7, #3]
						output = convert.float_value;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	60bb      	str	r3, [r7, #8]
						break;
 800071e:	e01c      	b.n	800075a <DisplayScreen+0x226>
						if (DisplayDataArray[4].raw_data[0] & 0B00000001)
 8000720:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <DisplayScreen+0x2ac>)
 8000722:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000726:	b25b      	sxtb	r3, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	2b00      	cmp	r3, #0
 8000730:	d002      	beq.n	8000738 <DisplayScreen+0x204>
							output = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
						break;
 8000736:	e010      	b.n	800075a <DisplayScreen+0x226>
							output = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
						break;
 800073c:	e00d      	b.n	800075a <DisplayScreen+0x226>
						if (DisplayDataArray[0].raw_data[0] & 0B0000010)
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <DisplayScreen+0x2ac>)
 8000740:	789b      	ldrb	r3, [r3, #2]
 8000742:	b25b      	sxtb	r3, r3
 8000744:	b2db      	uxtb	r3, r3
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <DisplayScreen+0x220>
							output = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
						break;
 8000752:	e001      	b.n	8000758 <DisplayScreen+0x224>
							output = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
						break;
 8000758:	bf00      	nop
				OutputString(DisplayLayoutPage2[i].name, 0,	DisplayLayoutPage2[i].ypos);
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <DisplayScreen+0x2b4>)
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	4413      	add	r3, r2
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <DisplayScreen+0x2b4>)
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	4413      	add	r3, r2
 800076c:	330c      	adds	r3, #12
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f7ff fdd0 	bl	8000318 <OutputString>
				OutputPaddedInteger(output, -1, DisplayLayoutPage2[i].data_xpos, DisplayLayoutPage2[i].ypos);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	4a1b      	ldr	r2, [pc, #108]	; (80007e8 <DisplayScreen+0x2b4>)
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	4413      	add	r3, r2
 8000780:	330a      	adds	r3, #10
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	4918      	ldr	r1, [pc, #96]	; (80007e8 <DisplayScreen+0x2b4>)
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	440b      	add	r3, r1
 800078c:	330c      	adds	r3, #12
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	21ff      	movs	r1, #255	; 0xff
 8000792:	68b8      	ldr	r0, [r7, #8]
 8000794:	f7ff fe48 	bl	8000428 <OutputPaddedInteger>
				OutputString(DisplayLayoutPage2[i].unit, DisplayLayoutPage2[i].unit_xpos, DisplayLayoutPage2[i].ypos);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <DisplayScreen+0x2b4>)
 800079c:	011b      	lsls	r3, r3, #4
 800079e:	4413      	add	r3, r2
 80007a0:	3304      	adds	r3, #4
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <DisplayScreen+0x2b4>)
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	4413      	add	r3, r2
 80007ac:	330b      	adds	r3, #11
 80007ae:	7819      	ldrb	r1, [r3, #0]
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <DisplayScreen+0x2b4>)
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	4413      	add	r3, r2
 80007b8:	330c      	adds	r3, #12
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	f7ff fdab 	bl	8000318 <OutputString>
			for (uint8_t i = 0; i < NUM_ROWS_PAGE2; i++) {
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	3301      	adds	r3, #1
 80007c6:	73fb      	strb	r3, [r7, #15]
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	f67f af6a 	bls.w	80006a4 <DisplayScreen+0x170>
			break;
 80007d0:	bf00      	nop
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000084 	.word	0x20000084
 80007e4:	20000004 	.word	0x20000004
 80007e8:	20000044 	.word	0x20000044

080007ec <WriteByteToDataBus>:
/**
 * Write a byte of data through C3 to C10(Data Buses)
 * @Param byte: 1 byte code
 * Returns: nothing
 */
void WriteByteToDataBus(uint8_t byte) {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = byte << 3;
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	00da      	lsls	r2, r3, #3
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <WriteByteToDataBus+0x28>)
 80007fc:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = ((uint8_t) (~byte)) << 3;
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	43db      	mvns	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	00da      	lsls	r2, r3, #3
 8000806:	4b03      	ldr	r3, [pc, #12]	; (8000814 <WriteByteToDataBus+0x28>)
 8000808:	615a      	str	r2, [r3, #20]
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40011000 	.word	0x40011000

08000818 <TransmitCommand>:
/**
 * Writes a byte of command code through ports C3 to C10(Data Buses)
 * @Param command_code: 1 byte command code
 * returns: nothing
 */
void TransmitCommand(uint8_t command_code) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = 0x1UL << 0;                   //SET C0 to HIGH
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <TransmitCommand+0x38>)
 8000824:	2201      	movs	r2, #1
 8000826:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = 0x1UL << 1;                    //SET C1 to LOW
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <TransmitCommand+0x38>)
 800082a:	2202      	movs	r2, #2
 800082c:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(command_code);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ffdb 	bl	80007ec <WriteByteToDataBus>
	MicrosecondDelay(1);
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff fca6 	bl	8000188 <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;                   //SET C1 to HIGH
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <TransmitCommand+0x38>)
 800083e:	2202      	movs	r2, #2
 8000840:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff fca0 	bl	8000188 <MicrosecondDelay>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40011000 	.word	0x40011000

08000854 <TransmitCommandParameter>:
/**
 * Writes a byte of parameter code through ports C3 to C10(Data Buses)
 * @Param parameter_code: 1 byte parameter code
 * returns: nothing
 */
void TransmitCommandParameter(uint8_t parameter_code) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	GPIOC->BRR = 0x1UL << 0;                    //SET C0 to LOW
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <TransmitCommandParameter+0x38>)
 8000860:	2201      	movs	r2, #1
 8000862:	615a      	str	r2, [r3, #20]
	GPIOC->BRR = 0x1UL << 1;                    //SET C1 to LOW
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <TransmitCommandParameter+0x38>)
 8000866:	2202      	movs	r2, #2
 8000868:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(parameter_code);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ffbd 	bl	80007ec <WriteByteToDataBus>
	MicrosecondDelay(1);
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff fc88 	bl	8000188 <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;                   //SET C1 to HIGH
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <TransmitCommandParameter+0x38>)
 800087a:	2202      	movs	r2, #2
 800087c:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 800087e:	2001      	movs	r0, #1
 8000880:	f7ff fc82 	bl	8000188 <MicrosecondDelay>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40011000 	.word	0x40011000

08000890 <ScreenSetup>:
}

/**
 * Initialise screen settings and character bit maps
 */
void ScreenSetup(void) {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	// system setup (section 6-2-1 on raio datasheet)
	TransmitCommand(0x40);
 8000894:	2040      	movs	r0, #64	; 0x40
 8000896:	f7ff ffbf 	bl	8000818 <TransmitCommand>
	Delay(5);
 800089a:	2005      	movs	r0, #5
 800089c:	f7ff fc56 	bl	800014c <Delay>
	// 0 0 IV 1 W/S M2 M1 M0
	TransmitCommandParameter(0x34);
 80008a0:	2034      	movs	r0, #52	; 0x34
 80008a2:	f7ff ffd7 	bl	8000854 <TransmitCommandParameter>
	// WF 0 0 0 0 FX FX FX
	TransmitCommandParameter(0x87);
 80008a6:	2087      	movs	r0, #135	; 0x87
 80008a8:	f7ff ffd4 	bl	8000854 <TransmitCommandParameter>
	// 0 0 0 0 FY FY FY FY
	TransmitCommandParameter(0xF);
 80008ac:	200f      	movs	r0, #15
 80008ae:	f7ff ffd1 	bl	8000854 <TransmitCommandParameter>
	// C/R (horizontal bytes per line)
	TransmitCommandParameter(39);
 80008b2:	2027      	movs	r0, #39	; 0x27
 80008b4:	f7ff ffce 	bl	8000854 <TransmitCommandParameter>
	// TC/R (horizontal bytes per line, incl blanking)
	TransmitCommandParameter(47);
 80008b8:	202f      	movs	r0, #47	; 0x2f
 80008ba:	f7ff ffcb 	bl	8000854 <TransmitCommandParameter>
	// L/F (lines per frame)
	TransmitCommandParameter(239);
 80008be:	20ef      	movs	r0, #239	; 0xef
 80008c0:	f7ff ffc8 	bl	8000854 <TransmitCommandParameter>
	// APL (horizontal address range, LSB)
	TransmitCommandParameter(40);
 80008c4:	2028      	movs	r0, #40	; 0x28
 80008c6:	f7ff ffc5 	bl	8000854 <TransmitCommandParameter>
	// APH (horizontal address range, MSB)
	TransmitCommandParameter(0);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff ffc2 	bl	8000854 <TransmitCommandParameter>

	// scroll parameters
	TransmitCommand(0x44);
 80008d0:	2044      	movs	r0, #68	; 0x44
 80008d2:	f7ff ffa1 	bl	8000818 <TransmitCommand>
	TransmitCommandParameter(0); // SAD 1L
 80008d6:	2000      	movs	r0, #0
 80008d8:	f7ff ffbc 	bl	8000854 <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 1H
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff ffb9 	bl	8000854 <TransmitCommandParameter>
	TransmitCommandParameter(240); // SL1
 80008e2:	20f0      	movs	r0, #240	; 0xf0
 80008e4:	f7ff ffb6 	bl	8000854 <TransmitCommandParameter>
	TransmitCommandParameter(176); // SAD 2L
 80008e8:	20b0      	movs	r0, #176	; 0xb0
 80008ea:	f7ff ffb3 	bl	8000854 <TransmitCommandParameter>
	TransmitCommandParameter(4); // SAD 2H
 80008ee:	2004      	movs	r0, #4
 80008f0:	f7ff ffb0 	bl	8000854 <TransmitCommandParameter>
	TransmitCommandParameter(240); // SL2
 80008f4:	20f0      	movs	r0, #240	; 0xf0
 80008f6:	f7ff ffad 	bl	8000854 <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 3L
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff ffaa 	bl	8000854 <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 3H
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff ffa7 	bl	8000854 <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 4
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff ffa4 	bl	8000854 <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 4
 800090c:	2000      	movs	r0, #0
 800090e:	f7ff ffa1 	bl	8000854 <TransmitCommandParameter>

	TransmitCommand(0x5B);
 8000912:	205b      	movs	r0, #91	; 0x5b
 8000914:	f7ff ff80 	bl	8000818 <TransmitCommand>
	TransmitCommandParameter(0);
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff ff9b 	bl	8000854 <TransmitCommandParameter>

	// set horizontal scroll position
	TransmitCommand(0x5A);
 800091e:	205a      	movs	r0, #90	; 0x5a
 8000920:	f7ff ff7a 	bl	8000818 <TransmitCommand>
	TransmitCommandParameter(0);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff ff95 	bl	8000854 <TransmitCommandParameter>

	// set display overlay format
	TransmitCommand(0x5B);
 800092a:	205b      	movs	r0, #91	; 0x5b
 800092c:	f7ff ff74 	bl	8000818 <TransmitCommand>
	TransmitCommandParameter(0);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff8f 	bl	8000854 <TransmitCommandParameter>

	// turn off the display and configure cursor
	TransmitCommand(0x58);
 8000936:	2058      	movs	r0, #88	; 0x58
 8000938:	f7ff ff6e 	bl	8000818 <TransmitCommand>
	TransmitCommandParameter(0x57);
 800093c:	2057      	movs	r0, #87	; 0x57
 800093e:	f7ff ff89 	bl	8000854 <TransmitCommandParameter>

	// set cursor size & type
	TransmitCommand(0x5D);
 8000942:	205d      	movs	r0, #93	; 0x5d
 8000944:	f7ff ff68 	bl	8000818 <TransmitCommand>
	TransmitCommandParameter(4);
 8000948:	2004      	movs	r0, #4
 800094a:	f7ff ff83 	bl	8000854 <TransmitCommandParameter>
	TransmitCommandParameter(0x84);
 800094e:	2084      	movs	r0, #132	; 0x84
 8000950:	f7ff ff80 	bl	8000854 <TransmitCommandParameter>

	// set cursor direction
	TransmitCommand(0x4C);
 8000954:	204c      	movs	r0, #76	; 0x4c
 8000956:	f7ff ff5f 	bl	8000818 <TransmitCommand>

	// turn on the display and configure cursor
	TransmitCommand(0x59);
 800095a:	2059      	movs	r0, #89	; 0x59
 800095c:	f7ff ff5c 	bl	8000818 <TransmitCommand>
	TransmitCommandParameter(0x7);
 8000960:	2007      	movs	r0, #7
 8000962:	f7ff ff77 	bl	8000854 <TransmitCommandParameter>

	CharacterBitMaps();
 8000966:	f7ff fc99 	bl	800029c <CharacterBitMaps>

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <CanFilterSetup>:
 * @brief Initialize CAN node for sending and receiving
 * @param: CAN filter structure
 * @retval: nothing
 */
void CanFilterSetup()
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	// Use mask and list mode to filter IDs from the CAN ID BOM

	// Filter for 0x500 and 0x600 IDs
    CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <CanFilterSetup+0x94>)
 8000976:	f24a 0220 	movw	r2, #40992	; 0xa020
 800097a:	601a      	str	r2, [r3, #0]
    CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <CanFilterSetup+0x94>)
 800097e:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 8000982:	609a      	str	r2, [r3, #8]

    CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <CanFilterSetup+0x94>)
 8000986:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 800098a:	605a      	str	r2, [r3, #4]
    CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <CanFilterSetup+0x94>)
 800098e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000992:	60da      	str	r2, [r3, #12]

    CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <CanFilterSetup+0x94>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
    CAN_filter0.FilterBank = (uint32_t) 0;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <CanFilterSetup+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
    CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <CanFilterSetup+0x94>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
    CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <CanFilterSetup+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
    CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <CanFilterSetup+0x94>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	621a      	str	r2, [r3, #32]

    // Remaining IDs filtered with list mode
    CAN_filter1.FilterIdHigh = (uint16_t) (0x401 << 5);
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <CanFilterSetup+0x98>)
 80009b4:	f248 0220 	movw	r2, #32800	; 0x8020
 80009b8:	601a      	str	r2, [r3, #0]
    CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <CanFilterSetup+0x98>)
 80009bc:	f248 0220 	movw	r2, #32800	; 0x8020
 80009c0:	609a      	str	r2, [r3, #8]

    CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <CanFilterSetup+0x98>)
 80009c4:	f248 0220 	movw	r2, #32800	; 0x8020
 80009c8:	605a      	str	r2, [r3, #4]
    CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <CanFilterSetup+0x98>)
 80009cc:	f248 0220 	movw	r2, #32800	; 0x8020
 80009d0:	60da      	str	r2, [r3, #12]

    CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <CanFilterSetup+0x98>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
    CAN_filter1.FilterBank = (uint32_t) 1;
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <CanFilterSetup+0x98>)
 80009da:	2201      	movs	r2, #1
 80009dc:	615a      	str	r2, [r3, #20]
    CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <CanFilterSetup+0x98>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	619a      	str	r2, [r3, #24]
    CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <CanFilterSetup+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
    CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <CanFilterSetup+0x98>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	621a      	str	r2, [r3, #32]

	// Configure reception filters
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 80009f0:	4904      	ldr	r1, [pc, #16]	; (8000a04 <CanFilterSetup+0x94>)
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <CanFilterSetup+0x9c>)
 80009f4:	f000 fcc3 	bl	800137e <HAL_CAN_ConfigFilter>
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 80009f8:	4903      	ldr	r1, [pc, #12]	; (8000a08 <CanFilterSetup+0x98>)
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <CanFilterSetup+0x9c>)
 80009fc:	f000 fcbf 	bl	800137e <HAL_CAN_ConfigFilter>

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200001c8 	.word	0x200001c8
 8000a08:	200001f0 	.word	0x200001f0
 8000a0c:	200001a0 	.word	0x200001a0

08000a10 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_CAN_Init+0x64>)
 8000a16:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <MX_CAN_Init+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_CAN_Init+0x64>)
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_CAN_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_CAN_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_CAN_Init+0x64>)
 8000a2e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a32:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_CAN_Init+0x64>)
 8000a36:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000a3a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <MX_CAN_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_CAN_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_CAN_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_CAN_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_CAN_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_CAN_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_CAN_Init+0x64>)
 8000a62:	f000 fb91 	bl	8001188 <HAL_CAN_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000a6c:	f000 f9f5 	bl	8000e5a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200001a0 	.word	0x200001a0
 8000a78:	40006400 	.word	0x40006400

08000a7c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a29      	ldr	r2, [pc, #164]	; (8000b3c <HAL_CAN_MspInit+0xc0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d14b      	bne.n	8000b34 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <HAL_CAN_MspInit+0xc4>)
 8000a9e:	69db      	ldr	r3, [r3, #28]
 8000aa0:	4a27      	ldr	r2, [pc, #156]	; (8000b40 <HAL_CAN_MspInit+0xc4>)
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa6:	61d3      	str	r3, [r2, #28]
 8000aa8:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <HAL_CAN_MspInit+0xc4>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <HAL_CAN_MspInit+0xc4>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <HAL_CAN_MspInit+0xc4>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <HAL_CAN_MspInit+0xc4>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4818      	ldr	r0, [pc, #96]	; (8000b44 <HAL_CAN_MspInit+0xc8>)
 8000ae2:	f001 f9c3 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4812      	ldr	r0, [pc, #72]	; (8000b44 <HAL_CAN_MspInit+0xc8>)
 8000afc:	f001 f9b6 	bl	8001e6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_CAN_MspInit+0xcc>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
 8000b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_CAN_MspInit+0xcc>)
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2014      	movs	r0, #20
 8000b2a:	f001 f968 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000b2e:	2014      	movs	r0, #20
 8000b30:	f001 f981 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40006400 	.word	0x40006400
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40010c00 	.word	0x40010c00
 8000b48:	40010000 	.word	0x40010000

08000b4c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <MX_GPIO_Init+0xb4>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a26      	ldr	r2, [pc, #152]	; (8000c00 <MX_GPIO_Init+0xb4>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <MX_GPIO_Init+0xb4>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_GPIO_Init+0xb4>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a20      	ldr	r2, [pc, #128]	; (8000c00 <MX_GPIO_Init+0xb4>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <MX_GPIO_Init+0xb4>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_GPIO_Init+0xb4>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <MX_GPIO_Init+0xb4>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_GPIO_Init+0xb4>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000bae:	4815      	ldr	r0, [pc, #84]	; (8000c04 <MX_GPIO_Init+0xb8>)
 8000bb0:	f001 fae0 	bl	8002174 <HAL_GPIO_WritePin>
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_Pin|A6_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2160      	movs	r1, #96	; 0x60
 8000bb8:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_GPIO_Init+0xbc>)
 8000bba:	f001 fadb 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 8000bbe:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000bc2:	613b      	str	r3, [r7, #16]
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480b      	ldr	r0, [pc, #44]	; (8000c04 <MX_GPIO_Init+0xb8>)
 8000bd8:	f001 f948 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin|A6_Pin;
 8000bdc:	2360      	movs	r3, #96	; 0x60
 8000bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_GPIO_Init+0xbc>)
 8000bf4:	f001 f93a 	bl	8001e6c <HAL_GPIO_Init>

}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40011000 	.word	0x40011000
 8000c08:	40010800 	.word	0x40010800

08000c0c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// CAN interrupt callback function
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	// Set message flag to 1 so that the update display task can execute
	receive_flag = 0x01;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	20000218 	.word	0x20000218

08000c28 <HAL_TIM_PeriodElapsedCallback>:

// TIM5 interrupt function for period elapsing (HAL page 1018)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	// EXPECTED PERIOD: the callback will be invoked every X seconds

	// Check if the correct timer is triggering the interrupt
	if (htim == &htim2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d103      	bne.n	8000c40 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		// Blink on board LED
		// Prescalar of 6400 and autoreload of 10000 for a 1 second on 1 second off
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c38:	2120      	movs	r1, #32
 8000c3a:	4804      	ldr	r0, [pc, #16]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c3c:	f001 fab2 	bl	80021a4 <HAL_GPIO_TogglePin>
	}

	// current_page = 1;
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000240 	.word	0x20000240
 8000c4c:	40010800 	.word	0x40010800

08000c50 <blink_A6>:

// Blink LED function for testing
void blink_A6(int num, int delay)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < num; i++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	e014      	b.n	8000c8a <blink_A6+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <blink_A6+0x4c>)
 8000c66:	f001 fa85 	bl	8002174 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 fa67 	bl	8001140 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	4809      	ldr	r0, [pc, #36]	; (8000c9c <blink_A6+0x4c>)
 8000c78:	f001 fa7c 	bl	8002174 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fa5e 	bl	8001140 <HAL_Delay>
	for (int i = 0; i < num; i++)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3301      	adds	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	dbe6      	blt.n	8000c60 <blink_A6+0x10>
	}
}
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40010800 	.word	0x40010800

08000ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca6:	f000 f9e9 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000caa:	f000 f895 	bl	8000dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cae:	f7ff ff4d 	bl	8000b4c <MX_GPIO_Init>
  MX_CAN_Init();
 8000cb2:	f7ff fead 	bl	8000a10 <MX_CAN_Init>
  MX_TIM2_Init();
 8000cb6:	f000 f949 	bl	8000f4c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start timer for using interrupts (HAL page 1015)
  HAL_TIM_Base_Start_IT(&htim2);
 8000cba:	4840      	ldr	r0, [pc, #256]	; (8000dbc <main+0x11c>)
 8000cbc:	f001 fec4 	bl	8002a48 <HAL_TIM_Base_Start_IT>

  // CAN initialization
  CanFilterSetup();
 8000cc0:	f7ff fe56 	bl	8000970 <CanFilterSetup>
  HAL_CAN_Start(&hcan);
 8000cc4:	483e      	ldr	r0, [pc, #248]	; (8000dc0 <main+0x120>)
 8000cc6:	f000 fc23 	bl	8001510 <HAL_CAN_Start>

  // LCD initialization
  ScreenSetup();
 8000cca:	f7ff fde1 	bl	8000890 <ScreenSetup>
  ClearScreen();
 8000cce:	f7ff fa9e 	bl	800020e <ClearScreen>
  DisplayScreen();
 8000cd2:	f7ff fc2f 	bl	8000534 <DisplayScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	blink_A6(1,5000);
 8000cd6:	f241 3188 	movw	r1, #5000	; 0x1388
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f7ff ffb8 	bl	8000c50 <blink_A6>

	// uint32_t t = __HAL_TIM_GET_COUNTER(&htim5);

	if (receive_flag == 0x01)
 8000ce0:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <main+0x124>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d1f6      	bne.n	8000cd6 <main+0x36>
	{
		// Set the flag to 0 to allow the next interrupt to be recognized
		receive_flag = 0x00;
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <main+0x124>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]

		// Check if message is available
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4833      	ldr	r0, [pc, #204]	; (8000dc0 <main+0x120>)
 8000cf2:	f000 fd62 	bl	80017ba <HAL_CAN_GetRxFifoFillLevel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0ec      	beq.n	8000cd6 <main+0x36>
		{
			// Populate CAN header and data variables
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &CAN_rx_header, CAN_rx_data);
 8000cfc:	4b32      	ldr	r3, [pc, #200]	; (8000dc8 <main+0x128>)
 8000cfe:	4a33      	ldr	r2, [pc, #204]	; (8000dcc <main+0x12c>)
 8000d00:	2100      	movs	r1, #0
 8000d02:	482f      	ldr	r0, [pc, #188]	; (8000dc0 <main+0x120>)
 8000d04:	f000 fc48 	bl	8001598 <HAL_CAN_GetRxMessage>

			// Find the matching data that needs to be updated
			for (uint8_t struct_index = 0; struct_index < NUM_CAN_IDS; struct_index++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	e04b      	b.n	8000da6 <main+0x106>
			{
				if (DisplayDataArray[struct_index].can_id == CAN_rx_header.StdId)
 8000d0e:	79fa      	ldrb	r2, [r7, #7]
 8000d10:	492f      	ldr	r1, [pc, #188]	; (8000dd0 <main+0x130>)
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	440b      	add	r3, r1
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <main+0x12c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d13b      	bne.n	8000da0 <main+0x100>
				{
					// Populate data for the specific CAN ID in DisplayDataArray identified in the loop above
					for (int data_index = 0; data_index < 8; data_index++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	e013      	b.n	8000d56 <main+0xb6>
					{
						DisplayDataArray[struct_index].raw_data[data_index] = CAN_rx_data[data_index];
 8000d2e:	4a26      	ldr	r2, [pc, #152]	; (8000dc8 <main+0x128>)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	79fa      	ldrb	r2, [r7, #7]
 8000d38:	b258      	sxtb	r0, r3
 8000d3a:	4925      	ldr	r1, [pc, #148]	; (8000dd0 <main+0x130>)
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	18ca      	adds	r2, r1, r3
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	701a      	strb	r2, [r3, #0]
					for (int data_index = 0; data_index < 8; data_index++)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2b07      	cmp	r3, #7
 8000d5a:	dde8      	ble.n	8000d2e <main+0x8e>
					}

					// Check for next page button press
					if (CAN_rx_header.StdId == 0x400)
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <main+0x12c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d64:	d11c      	bne.n	8000da0 <main+0x100>
					{
						// Check the first bit of the first byte
						if (DisplayDataArray[0].raw_data[0] & 0B0000001)
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <main+0x130>)
 8000d68:	789b      	ldrb	r3, [r3, #2]
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d014      	beq.n	8000da0 <main+0x100>
						{
							// Increase page by 1 or bring back to first page
							if (++current_page > PAGE_NUM_MAX)
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <main+0x134>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <main+0x134>)
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <main+0x134>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d90a      	bls.n	8000da0 <main+0x100>
							{
								current_page++;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <main+0x134>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <main+0x134>)
 8000d94:	701a      	strb	r2, [r3, #0]

								// --- TESTING START
								blink_A6(1,10000); // stay on when page change is pressed
 8000d96:	f242 7110 	movw	r1, #10000	; 0x2710
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff ff58 	bl	8000c50 <blink_A6>
			for (uint8_t struct_index = 0; struct_index < NUM_CAN_IDS; struct_index++)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	3301      	adds	r3, #1
 8000da4:	71fb      	strb	r3, [r7, #7]
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b07      	cmp	r3, #7
 8000daa:	d9b0      	bls.n	8000d0e <main+0x6e>
						}
					}
				}
			}
			// Display screen with updated parameters
			DisplayScreen();
 8000dac:	f7ff fbc2 	bl	8000534 <DisplayScreen>

			// --- TESTING START
			blink_A6(5,200);
 8000db0:	21c8      	movs	r1, #200	; 0xc8
 8000db2:	2005      	movs	r0, #5
 8000db4:	f7ff ff4c 	bl	8000c50 <blink_A6>
	blink_A6(1,5000);
 8000db8:	e78d      	b.n	8000cd6 <main+0x36>
 8000dba:	bf00      	nop
 8000dbc:	20000240 	.word	0x20000240
 8000dc0:	200001a0 	.word	0x200001a0
 8000dc4:	20000218 	.word	0x20000218
 8000dc8:	20000238 	.word	0x20000238
 8000dcc:	2000021c 	.word	0x2000021c
 8000dd0:	20000084 	.word	0x20000084
 8000dd4:	20000000 	.word	0x20000000

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b090      	sub	sp, #64	; 0x40
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0318 	add.w	r3, r7, #24
 8000de2:	2228      	movs	r2, #40	; 0x28
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 fa0a 	bl	8003200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e02:	2310      	movs	r3, #16
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e06:	2302      	movs	r3, #2
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e0e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 f9dd 	bl	80021d8 <HAL_RCC_OscConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e24:	f000 f819 	bl	8000e5a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e28:	230f      	movs	r3, #15
 8000e2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2102      	movs	r1, #2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 fc4a 	bl	80026dc <HAL_RCC_ClockConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e4e:	f000 f804 	bl	8000e5a <Error_Handler>
  }
}
 8000e52:	bf00      	nop
 8000e54:	3740      	adds	r7, #64	; 0x40
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5e:	b672      	cpsid	i
}
 8000e60:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <Error_Handler+0x8>

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_MspInit+0x5c>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <HAL_MspInit+0x5c>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6193      	str	r3, [r2, #24]
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_MspInit+0x5c>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_MspInit+0x5c>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_MspInit+0x5c>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_MspInit+0x5c>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_MspInit+0x60>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_MspInit+0x60>)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0e:	f000 f8fb 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f1e:	f000 fc73 	bl	8001808 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200001a0 	.word	0x200001a0

08000f2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <TIM2_IRQHandler+0x10>)
 8000f32:	f001 fddb 	bl	8002aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000240 	.word	0x20000240

08000f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_TIM2_Init+0x98>)
 8000f6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5000-1;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <MX_TIM2_Init+0x98>)
 8000f72:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_TIM2_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000-1;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_TIM2_Init+0x98>)
 8000f80:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000f84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <MX_TIM2_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_TIM2_Init+0x98>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f92:	4814      	ldr	r0, [pc, #80]	; (8000fe4 <MX_TIM2_Init+0x98>)
 8000f94:	f001 fd08 	bl	80029a8 <HAL_TIM_Base_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f9e:	f7ff ff5c 	bl	8000e5a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	4619      	mov	r1, r3
 8000fae:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <MX_TIM2_Init+0x98>)
 8000fb0:	f001 fea4 	bl	8002cfc <HAL_TIM_ConfigClockSource>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fba:	f7ff ff4e 	bl	8000e5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <MX_TIM2_Init+0x98>)
 8000fcc:	f002 f876 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fd6:	f7ff ff40 	bl	8000e5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000240 	.word	0x20000240

08000fe8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff8:	d113      	bne.n	8001022 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_TIM_Base_MspInit+0x44>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <HAL_TIM_Base_MspInit+0x44>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_TIM_Base_MspInit+0x44>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	201c      	movs	r0, #28
 8001018:	f000 fef1 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800101c:	201c      	movs	r0, #28
 800101e:	f000 ff0a 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000

08001030 <Reset_Handler>:
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <LoopFillZerobss+0x12>)
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <LoopFillZerobss+0x16>)
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <LoopFillZerobss+0x1a>)
 8001036:	2300      	movs	r3, #0
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:
 800103a:	58d4      	ldr	r4, [r2, r3]
 800103c:	50c4      	str	r4, [r0, r3]
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:
 8001040:	18c4      	adds	r4, r0, r3
 8001042:	428c      	cmp	r4, r1
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <LoopFillZerobss+0x1e>)
 8001048:	4c0a      	ldr	r4, [pc, #40]	; (8001074 <LoopFillZerobss+0x22>)
 800104a:	2300      	movs	r3, #0
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:
 8001052:	42a2      	cmp	r2, r4
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>
 8001056:	f7ff ff73 	bl	8000f40 <SystemInit>
 800105a:	f002 f89f 	bl	800319c <__libc_init_array>
 800105e:	f7ff fe1f 	bl	8000ca0 <main>
 8001062:	4770      	bx	lr
 8001064:	20000000 	.word	0x20000000
 8001068:	20000184 	.word	0x20000184
 800106c:	080033dc 	.word	0x080033dc
 8001070:	20000184 	.word	0x20000184
 8001074:	2000028c 	.word	0x2000028c

08001078 <ADC1_2_IRQHandler>:
 8001078:	e7fe      	b.n	8001078 <ADC1_2_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_Init+0x28>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_Init+0x28>)
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 feab 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fee4 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40022000 	.word	0x40022000

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fec3 	bl	8001e52 <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 fe8b 	bl	8001dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000178 	.word	0x20000178
 8001100:	20000180 	.word	0x20000180
 8001104:	2000017c 	.word	0x2000017c

08001108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_IncTick+0x1c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_IncTick+0x20>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a03      	ldr	r2, [pc, #12]	; (8001128 <HAL_IncTick+0x20>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	20000180 	.word	0x20000180
 8001128:	20000288 	.word	0x20000288

0800112c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b02      	ldr	r3, [pc, #8]	; (800113c <HAL_GetTick+0x10>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	20000288 	.word	0x20000288

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff fff0 	bl	800112c <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d005      	beq.n	8001166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_Delay+0x44>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001166:	bf00      	nop
 8001168:	f7ff ffe0 	bl	800112c <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f7      	bhi.n	8001168 <HAL_Delay+0x28>
  {
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000180 	.word	0x20000180

08001188 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0ed      	b.n	8001376 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff fc68 	bl	8000a7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0201 	orr.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011bc:	f7ff ffb6 	bl	800112c <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011c2:	e012      	b.n	80011ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011c4:	f7ff ffb2 	bl	800112c <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b0a      	cmp	r3, #10
 80011d0:	d90b      	bls.n	80011ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2205      	movs	r2, #5
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e0c5      	b.n	8001376 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0e5      	beq.n	80011c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0202 	bic.w	r2, r2, #2
 8001206:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001208:	f7ff ff90 	bl	800112c <HAL_GetTick>
 800120c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800120e:	e012      	b.n	8001236 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001210:	f7ff ff8c 	bl	800112c <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b0a      	cmp	r3, #10
 800121c:	d90b      	bls.n	8001236 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2205      	movs	r2, #5
 800122e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e09f      	b.n	8001376 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1e5      	bne.n	8001210 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7e1b      	ldrb	r3, [r3, #24]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e007      	b.n	800126e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7e5b      	ldrb	r3, [r3, #25]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e007      	b.n	8001298 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001296:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7e9b      	ldrb	r3, [r3, #26]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0220 	orr.w	r2, r2, #32
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e007      	b.n	80012c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0220 	bic.w	r2, r2, #32
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7edb      	ldrb	r3, [r3, #27]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0210 	bic.w	r2, r2, #16
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e007      	b.n	80012ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0210 	orr.w	r2, r2, #16
 80012ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7f1b      	ldrb	r3, [r3, #28]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d108      	bne.n	8001306 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0208 	orr.w	r2, r2, #8
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	e007      	b.n	8001316 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0208 	bic.w	r2, r2, #8
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7f5b      	ldrb	r3, [r3, #29]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d108      	bne.n	8001330 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0204 	orr.w	r2, r2, #4
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e007      	b.n	8001340 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0204 	bic.w	r2, r2, #4
 800133e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	ea42 0103 	orr.w	r1, r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	1e5a      	subs	r2, r3, #1
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800137e:	b480      	push	{r7}
 8001380:	b087      	sub	sp, #28
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001394:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001396:	7cfb      	ldrb	r3, [r7, #19]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d003      	beq.n	80013a4 <HAL_CAN_ConfigFilter+0x26>
 800139c:	7cfb      	ldrb	r3, [r7, #19]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	f040 80aa 	bne.w	80014f8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013aa:	f043 0201 	orr.w	r2, r3, #1
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	2201      	movs	r2, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d123      	bne.n	8001426 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	401a      	ands	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001400:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3248      	adds	r2, #72	; 0x48
 8001406:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800141a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800141c:	6979      	ldr	r1, [r7, #20]
 800141e:	3348      	adds	r3, #72	; 0x48
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d122      	bne.n	8001474 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	431a      	orrs	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800144e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3248      	adds	r2, #72	; 0x48
 8001454:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001468:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800146a:	6979      	ldr	r1, [r7, #20]
 800146c:	3348      	adds	r3, #72	; 0x48
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d109      	bne.n	8001490 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43db      	mvns	r3, r3
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800148e:	e007      	b.n	80014a0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	431a      	orrs	r2, r3
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d109      	bne.n	80014bc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80014ba:	e007      	b.n	80014cc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d107      	bne.n	80014e4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	431a      	orrs	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014ea:	f023 0201 	bic.w	r2, r3, #1
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e006      	b.n	8001506 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
  }
}
 8001506:	4618      	mov	r0, r3
 8001508:	371c      	adds	r7, #28
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d12e      	bne.n	8001582 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2202      	movs	r2, #2
 8001528:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800153c:	f7ff fdf6 	bl	800112c <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001542:	e012      	b.n	800156a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001544:	f7ff fdf2 	bl	800112c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b0a      	cmp	r3, #10
 8001550:	d90b      	bls.n	800156a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2205      	movs	r2, #5
 8001562:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e012      	b.n	8001590 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1e5      	bne.n	8001544 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e006      	b.n	8001590 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
  }
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d003      	beq.n	80015bc <HAL_CAN_GetRxMessage+0x24>
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	f040 80f3 	bne.w	80017a2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10e      	bne.n	80015e0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d116      	bne.n	80015fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0e7      	b.n	80017b0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d107      	bne.n	80015fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0d8      	b.n	80017b0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	331b      	adds	r3, #27
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	4413      	add	r3, r2
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0204 	and.w	r2, r3, #4
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10c      	bne.n	8001636 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	331b      	adds	r3, #27
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	4413      	add	r3, r2
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	0d5b      	lsrs	r3, r3, #21
 800162c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e00b      	b.n	800164e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	331b      	adds	r3, #27
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	331b      	adds	r3, #27
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	4413      	add	r3, r2
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0202 	and.w	r2, r3, #2
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	331b      	adds	r3, #27
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	4413      	add	r3, r2
 8001670:	3304      	adds	r3, #4
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 020f 	and.w	r2, r3, #15
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	331b      	adds	r3, #27
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	4413      	add	r3, r2
 8001688:	3304      	adds	r3, #4
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	b2da      	uxtb	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	331b      	adds	r3, #27
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	4413      	add	r3, r2
 80016a0:	3304      	adds	r3, #4
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	0c1b      	lsrs	r3, r3, #16
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0a1a      	lsrs	r2, r3, #8
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0c1a      	lsrs	r2, r3, #16
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	3302      	adds	r3, #2
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	4413      	add	r3, r2
 8001700:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0e1a      	lsrs	r2, r3, #24
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	3303      	adds	r3, #3
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4413      	add	r3, r2
 800171a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	3304      	adds	r3, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	4413      	add	r3, r2
 8001732:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	0a1a      	lsrs	r2, r3, #8
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	3305      	adds	r3, #5
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	4413      	add	r3, r2
 800174c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	0c1a      	lsrs	r2, r3, #16
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	3306      	adds	r3, #6
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	4413      	add	r3, r2
 8001766:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0e1a      	lsrs	r2, r3, #24
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	3307      	adds	r3, #7
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d108      	bne.n	800178e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0220 	orr.w	r2, r2, #32
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	e007      	b.n	800179e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0220 	orr.w	r2, r2, #32
 800179c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	e006      	b.n	80017b0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
  }
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ce:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017d0:	7afb      	ldrb	r3, [r7, #11]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d002      	beq.n	80017dc <HAL_CAN_GetRxFifoFillLevel+0x22>
 80017d6:	7afb      	ldrb	r3, [r7, #11]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d10f      	bne.n	80017fc <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e005      	b.n	80017fc <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80017fc:	68fb      	ldr	r3, [r7, #12]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d07c      	beq.n	8001948 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d023      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2201      	movs	r2, #1
 800185e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f983 	bl	8001b76 <HAL_CAN_TxMailbox0CompleteCallback>
 8001870:	e016      	b.n	80018a0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
 8001884:	e00c      	b.n	80018a0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
 8001898:	e002      	b.n	80018a0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f986 	bl	8001bac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d024      	beq.n	80018f4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f962 	bl	8001b88 <HAL_CAN_TxMailbox1CompleteCallback>
 80018c4:	e016      	b.n	80018f4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d004      	beq.n	80018da <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
 80018d8:	e00c      	b.n	80018f4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d004      	beq.n	80018ee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
 80018ec:	e002      	b.n	80018f4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f965 	bl	8001bbe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d024      	beq.n	8001948 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001906:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f941 	bl	8001b9a <HAL_CAN_TxMailbox2CompleteCallback>
 8001918:	e016      	b.n	8001948 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
 800192c:	e00c      	b.n	8001948 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
 8001940:	e002      	b.n	8001948 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f944 	bl	8001bd0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00c      	beq.n	800196c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001962:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2210      	movs	r2, #16
 800196a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2208      	movs	r2, #8
 8001986:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f92a 	bl	8001be2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff f930 	bl	8000c0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00c      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2210      	movs	r2, #16
 80019ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2208      	movs	r2, #8
 80019ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f90a 	bl	8001c06 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d009      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f8f2 	bl	8001bf4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2210      	movs	r2, #16
 8001a2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f8f3 	bl	8001c18 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00b      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f8eb 	bl	8001c2a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d07b      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d072      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d008      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	f043 0302 	orr.w	r3, r3, #2
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d008      	beq.n	8001abc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d043      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d03e      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ad6:	2b60      	cmp	r3, #96	; 0x60
 8001ad8:	d02b      	beq.n	8001b32 <HAL_CAN_IRQHandler+0x32a>
 8001ada:	2b60      	cmp	r3, #96	; 0x60
 8001adc:	d82e      	bhi.n	8001b3c <HAL_CAN_IRQHandler+0x334>
 8001ade:	2b50      	cmp	r3, #80	; 0x50
 8001ae0:	d022      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x320>
 8001ae2:	2b50      	cmp	r3, #80	; 0x50
 8001ae4:	d82a      	bhi.n	8001b3c <HAL_CAN_IRQHandler+0x334>
 8001ae6:	2b40      	cmp	r3, #64	; 0x40
 8001ae8:	d019      	beq.n	8001b1e <HAL_CAN_IRQHandler+0x316>
 8001aea:	2b40      	cmp	r3, #64	; 0x40
 8001aec:	d826      	bhi.n	8001b3c <HAL_CAN_IRQHandler+0x334>
 8001aee:	2b30      	cmp	r3, #48	; 0x30
 8001af0:	d010      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x30c>
 8001af2:	2b30      	cmp	r3, #48	; 0x30
 8001af4:	d822      	bhi.n	8001b3c <HAL_CAN_IRQHandler+0x334>
 8001af6:	2b10      	cmp	r3, #16
 8001af8:	d002      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x2f8>
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	d005      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001afe:	e01d      	b.n	8001b3c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	f043 0308 	orr.w	r3, r3, #8
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b08:	e019      	b.n	8001b3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	f043 0310 	orr.w	r3, r3, #16
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b12:	e014      	b.n	8001b3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	f043 0320 	orr.w	r3, r3, #32
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b1c:	e00f      	b.n	8001b3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b26:	e00a      	b.n	8001b3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b30:	e005      	b.n	8001b3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b3a:	e000      	b.n	8001b3e <HAL_CAN_IRQHandler+0x336>
            break;
 8001b3c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699a      	ldr	r2, [r3, #24]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b4c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2204      	movs	r2, #4
 8001b54:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f867 	bl	8001c3c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3728      	adds	r7, #40	; 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
	...

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4906      	ldr	r1, [pc, #24]	; (8001ce8 <__NVIC_EnableIRQ+0x34>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100

08001cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0a      	blt.n	8001d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	490c      	ldr	r1, [pc, #48]	; (8001d38 <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d14:	e00a      	b.n	8001d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4908      	ldr	r1, [pc, #32]	; (8001d3c <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	761a      	strb	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f1c3 0307 	rsb	r3, r3, #7
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	bf28      	it	cs
 8001d5e:	2304      	movcs	r3, #4
 8001d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d902      	bls.n	8001d70 <NVIC_EncodePriority+0x30>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3b03      	subs	r3, #3
 8001d6e:	e000      	b.n	8001d72 <NVIC_EncodePriority+0x32>
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43d9      	mvns	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	4313      	orrs	r3, r2
         );
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff90 	bl	8001cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff2d 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff42 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff90 	bl	8001d40 <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5f 	bl	8001cec <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff35 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffa2 	bl	8001da4 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b08b      	sub	sp, #44	; 0x2c
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7e:	e169      	b.n	8002154 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e80:	2201      	movs	r2, #1
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	f040 8158 	bne.w	800214e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4a9a      	ldr	r2, [pc, #616]	; (800210c <HAL_GPIO_Init+0x2a0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d05e      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a98      	ldr	r2, [pc, #608]	; (800210c <HAL_GPIO_Init+0x2a0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d875      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001eae:	4a98      	ldr	r2, [pc, #608]	; (8002110 <HAL_GPIO_Init+0x2a4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d058      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001eb4:	4a96      	ldr	r2, [pc, #600]	; (8002110 <HAL_GPIO_Init+0x2a4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d86f      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001eba:	4a96      	ldr	r2, [pc, #600]	; (8002114 <HAL_GPIO_Init+0x2a8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d052      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001ec0:	4a94      	ldr	r2, [pc, #592]	; (8002114 <HAL_GPIO_Init+0x2a8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d869      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001ec6:	4a94      	ldr	r2, [pc, #592]	; (8002118 <HAL_GPIO_Init+0x2ac>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d04c      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001ecc:	4a92      	ldr	r2, [pc, #584]	; (8002118 <HAL_GPIO_Init+0x2ac>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d863      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001ed2:	4a92      	ldr	r2, [pc, #584]	; (800211c <HAL_GPIO_Init+0x2b0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d046      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001ed8:	4a90      	ldr	r2, [pc, #576]	; (800211c <HAL_GPIO_Init+0x2b0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d85d      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001ede:	2b12      	cmp	r3, #18
 8001ee0:	d82a      	bhi.n	8001f38 <HAL_GPIO_Init+0xcc>
 8001ee2:	2b12      	cmp	r3, #18
 8001ee4:	d859      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001ee6:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <HAL_GPIO_Init+0x80>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f67 	.word	0x08001f67
 8001ef0:	08001f41 	.word	0x08001f41
 8001ef4:	08001f53 	.word	0x08001f53
 8001ef8:	08001f95 	.word	0x08001f95
 8001efc:	08001f9b 	.word	0x08001f9b
 8001f00:	08001f9b 	.word	0x08001f9b
 8001f04:	08001f9b 	.word	0x08001f9b
 8001f08:	08001f9b 	.word	0x08001f9b
 8001f0c:	08001f9b 	.word	0x08001f9b
 8001f10:	08001f9b 	.word	0x08001f9b
 8001f14:	08001f9b 	.word	0x08001f9b
 8001f18:	08001f9b 	.word	0x08001f9b
 8001f1c:	08001f9b 	.word	0x08001f9b
 8001f20:	08001f9b 	.word	0x08001f9b
 8001f24:	08001f9b 	.word	0x08001f9b
 8001f28:	08001f9b 	.word	0x08001f9b
 8001f2c:	08001f9b 	.word	0x08001f9b
 8001f30:	08001f49 	.word	0x08001f49
 8001f34:	08001f5d 	.word	0x08001f5d
 8001f38:	4a79      	ldr	r2, [pc, #484]	; (8002120 <HAL_GPIO_Init+0x2b4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f3e:	e02c      	b.n	8001f9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	623b      	str	r3, [r7, #32]
          break;
 8001f46:	e029      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	623b      	str	r3, [r7, #32]
          break;
 8001f50:	e024      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	3308      	adds	r3, #8
 8001f58:	623b      	str	r3, [r7, #32]
          break;
 8001f5a:	e01f      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	330c      	adds	r3, #12
 8001f62:	623b      	str	r3, [r7, #32]
          break;
 8001f64:	e01a      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	623b      	str	r3, [r7, #32]
          break;
 8001f72:	e013      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	611a      	str	r2, [r3, #16]
          break;
 8001f86:	e009      	b.n	8001f9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f88:	2308      	movs	r3, #8
 8001f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	615a      	str	r2, [r3, #20]
          break;
 8001f92:	e003      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
          break;
 8001f98:	e000      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          break;
 8001f9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2bff      	cmp	r3, #255	; 0xff
 8001fa0:	d801      	bhi.n	8001fa6 <HAL_GPIO_Init+0x13a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	e001      	b.n	8001faa <HAL_GPIO_Init+0x13e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2bff      	cmp	r3, #255	; 0xff
 8001fb0:	d802      	bhi.n	8001fb8 <HAL_GPIO_Init+0x14c>
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	e002      	b.n	8001fbe <HAL_GPIO_Init+0x152>
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	3b08      	subs	r3, #8
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	210f      	movs	r1, #15
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	401a      	ands	r2, r3
 8001fd0:	6a39      	ldr	r1, [r7, #32]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80b1 	beq.w	800214e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fec:	4b4d      	ldr	r3, [pc, #308]	; (8002124 <HAL_GPIO_Init+0x2b8>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a4c      	ldr	r2, [pc, #304]	; (8002124 <HAL_GPIO_Init+0x2b8>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <HAL_GPIO_Init+0x2b8>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002004:	4a48      	ldr	r2, [pc, #288]	; (8002128 <HAL_GPIO_Init+0x2bc>)
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a40      	ldr	r2, [pc, #256]	; (800212c <HAL_GPIO_Init+0x2c0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <HAL_GPIO_Init+0x1ec>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3f      	ldr	r2, [pc, #252]	; (8002130 <HAL_GPIO_Init+0x2c4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00d      	beq.n	8002054 <HAL_GPIO_Init+0x1e8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3e      	ldr	r2, [pc, #248]	; (8002134 <HAL_GPIO_Init+0x2c8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <HAL_GPIO_Init+0x1e4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3d      	ldr	r2, [pc, #244]	; (8002138 <HAL_GPIO_Init+0x2cc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d101      	bne.n	800204c <HAL_GPIO_Init+0x1e0>
 8002048:	2303      	movs	r3, #3
 800204a:	e006      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 800204c:	2304      	movs	r3, #4
 800204e:	e004      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 8002050:	2302      	movs	r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 8002058:	2300      	movs	r3, #0
 800205a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4093      	lsls	r3, r2
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800206a:	492f      	ldr	r1, [pc, #188]	; (8002128 <HAL_GPIO_Init+0x2bc>)
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_GPIO_Init+0x2d0>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	492c      	ldr	r1, [pc, #176]	; (800213c <HAL_GPIO_Init+0x2d0>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002092:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_GPIO_Init+0x2d0>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	43db      	mvns	r3, r3
 800209a:	4928      	ldr	r1, [pc, #160]	; (800213c <HAL_GPIO_Init+0x2d0>)
 800209c:	4013      	ands	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_GPIO_Init+0x2d0>)
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4922      	ldr	r1, [pc, #136]	; (800213c <HAL_GPIO_Init+0x2d0>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <HAL_GPIO_Init+0x2d0>)
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	491e      	ldr	r1, [pc, #120]	; (800213c <HAL_GPIO_Init+0x2d0>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_GPIO_Init+0x2d0>)
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	4918      	ldr	r1, [pc, #96]	; (800213c <HAL_GPIO_Init+0x2d0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <HAL_GPIO_Init+0x2d0>)
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	4914      	ldr	r1, [pc, #80]	; (800213c <HAL_GPIO_Init+0x2d0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d021      	beq.n	8002140 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <HAL_GPIO_Init+0x2d0>)
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	490e      	ldr	r1, [pc, #56]	; (800213c <HAL_GPIO_Init+0x2d0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	60cb      	str	r3, [r1, #12]
 8002108:	e021      	b.n	800214e <HAL_GPIO_Init+0x2e2>
 800210a:	bf00      	nop
 800210c:	10320000 	.word	0x10320000
 8002110:	10310000 	.word	0x10310000
 8002114:	10220000 	.word	0x10220000
 8002118:	10210000 	.word	0x10210000
 800211c:	10120000 	.word	0x10120000
 8002120:	10110000 	.word	0x10110000
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000
 800212c:	40010800 	.word	0x40010800
 8002130:	40010c00 	.word	0x40010c00
 8002134:	40011000 	.word	0x40011000
 8002138:	40011400 	.word	0x40011400
 800213c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_GPIO_Init+0x304>)
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	43db      	mvns	r3, r3
 8002148:	4909      	ldr	r1, [pc, #36]	; (8002170 <HAL_GPIO_Init+0x304>)
 800214a:	4013      	ands	r3, r2
 800214c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	3301      	adds	r3, #1
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	f47f ae8e 	bne.w	8001e80 <HAL_GPIO_Init+0x14>
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	372c      	adds	r7, #44	; 0x2c
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4013      	ands	r3, r2
 80021bc:	041a      	lsls	r2, r3, #16
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	43d9      	mvns	r1, r3
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	400b      	ands	r3, r1
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	611a      	str	r2, [r3, #16]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e272      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8087 	beq.w	8002306 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f8:	4b92      	ldr	r3, [pc, #584]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b04      	cmp	r3, #4
 8002202:	d00c      	beq.n	800221e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002204:	4b8f      	ldr	r3, [pc, #572]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	d112      	bne.n	8002236 <HAL_RCC_OscConfig+0x5e>
 8002210:	4b8c      	ldr	r3, [pc, #560]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221c:	d10b      	bne.n	8002236 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d06c      	beq.n	8002304 <HAL_RCC_OscConfig+0x12c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d168      	bne.n	8002304 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e24c      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x76>
 8002240:	4b80      	ldr	r3, [pc, #512]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a7f      	ldr	r2, [pc, #508]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	e02e      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x98>
 8002256:	4b7b      	ldr	r3, [pc, #492]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7a      	ldr	r2, [pc, #488]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800225c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b78      	ldr	r3, [pc, #480]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a77      	ldr	r2, [pc, #476]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e01d      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0xbc>
 800227a:	4b72      	ldr	r3, [pc, #456]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a71      	ldr	r2, [pc, #452]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b6f      	ldr	r3, [pc, #444]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a6e      	ldr	r2, [pc, #440]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e00b      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 8002294:	4b6b      	ldr	r3, [pc, #428]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a6a      	ldr	r2, [pc, #424]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800229a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b68      	ldr	r3, [pc, #416]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a67      	ldr	r2, [pc, #412]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d013      	beq.n	80022dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7fe ff3a 	bl	800112c <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022bc:	f7fe ff36 	bl	800112c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	; 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e200      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b5d      	ldr	r3, [pc, #372]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0xe4>
 80022da:	e014      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe ff26 	bl	800112c <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7fe ff22 	bl	800112c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1ec      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	4b53      	ldr	r3, [pc, #332]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x10c>
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d063      	beq.n	80023da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002312:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800231e:	4b49      	ldr	r3, [pc, #292]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b08      	cmp	r3, #8
 8002328:	d11c      	bne.n	8002364 <HAL_RCC_OscConfig+0x18c>
 800232a:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d116      	bne.n	8002364 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	4b43      	ldr	r3, [pc, #268]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_RCC_OscConfig+0x176>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e1c0      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4939      	ldr	r1, [pc, #228]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	e03a      	b.n	80023da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236c:	4b36      	ldr	r3, [pc, #216]	; (8002448 <HAL_RCC_OscConfig+0x270>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7fe fedb 	bl	800112c <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237a:	f7fe fed7 	bl	800112c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e1a1      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4927      	ldr	r1, [pc, #156]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]
 80023ac:	e015      	b.n	80023da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_RCC_OscConfig+0x270>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe feba 	bl	800112c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023bc:	f7fe feb6 	bl	800112c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e180      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d03a      	beq.n	800245c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d019      	beq.n	8002422 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_RCC_OscConfig+0x274>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7fe fe9a 	bl	800112c <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fc:	f7fe fe96 	bl	800112c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e160      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800241a:	2001      	movs	r0, #1
 800241c:	f000 faa6 	bl	800296c <RCC_Delay>
 8002420:	e01c      	b.n	800245c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_RCC_OscConfig+0x274>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7fe fe80 	bl	800112c <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242e:	e00f      	b.n	8002450 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7fe fe7c 	bl	800112c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d908      	bls.n	8002450 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e146      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	42420000 	.word	0x42420000
 800244c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	4b92      	ldr	r3, [pc, #584]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e9      	bne.n	8002430 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a6 	beq.w	80025b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246e:	4b8b      	ldr	r3, [pc, #556]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10d      	bne.n	8002496 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4b88      	ldr	r3, [pc, #544]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4a87      	ldr	r2, [pc, #540]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	61d3      	str	r3, [r2, #28]
 8002486:	4b85      	ldr	r3, [pc, #532]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b82      	ldr	r3, [pc, #520]	; (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a2:	4b7f      	ldr	r3, [pc, #508]	; (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7e      	ldr	r2, [pc, #504]	; (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7fe fe3d 	bl	800112c <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7fe fe39 	bl	800112c <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	; 0x64
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e103      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b75      	ldr	r3, [pc, #468]	; (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x312>
 80024dc:	4b6f      	ldr	r3, [pc, #444]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a6e      	ldr	r2, [pc, #440]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6213      	str	r3, [r2, #32]
 80024e8:	e02d      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x334>
 80024f2:	4b6a      	ldr	r3, [pc, #424]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a69      	ldr	r2, [pc, #420]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	4b67      	ldr	r3, [pc, #412]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a66      	ldr	r2, [pc, #408]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6213      	str	r3, [r2, #32]
 800250a:	e01c      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b05      	cmp	r3, #5
 8002512:	d10c      	bne.n	800252e <HAL_RCC_OscConfig+0x356>
 8002514:	4b61      	ldr	r3, [pc, #388]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a60      	ldr	r2, [pc, #384]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	6213      	str	r3, [r2, #32]
 8002520:	4b5e      	ldr	r3, [pc, #376]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4a5d      	ldr	r2, [pc, #372]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6213      	str	r3, [r2, #32]
 800252c:	e00b      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 800252e:	4b5b      	ldr	r3, [pc, #364]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a5a      	ldr	r2, [pc, #360]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6213      	str	r3, [r2, #32]
 800253a:	4b58      	ldr	r3, [pc, #352]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a57      	ldr	r2, [pc, #348]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d015      	beq.n	800257a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7fe fded 	bl	800112c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7fe fde9 	bl	800112c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	; 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0b1      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256c:	4b4b      	ldr	r3, [pc, #300]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ee      	beq.n	8002556 <HAL_RCC_OscConfig+0x37e>
 8002578:	e014      	b.n	80025a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7fe fdd7 	bl	800112c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe fdd3 	bl	800112c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e09b      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002598:	4b40      	ldr	r3, [pc, #256]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1ee      	bne.n	8002582 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d105      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025aa:	4b3c      	ldr	r3, [pc, #240]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a3b      	ldr	r2, [pc, #236]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8087 	beq.w	80026ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c0:	4b36      	ldr	r3, [pc, #216]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d061      	beq.n	8002690 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d146      	bne.n	8002662 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d4:	4b33      	ldr	r3, [pc, #204]	; (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7fe fda7 	bl	800112c <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7fe fda3 	bl	800112c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e06d      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002608:	d108      	bne.n	800261c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	4921      	ldr	r1, [pc, #132]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a19      	ldr	r1, [r3, #32]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	430b      	orrs	r3, r1
 800262e:	491b      	ldr	r1, [pc, #108]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fe fd77 	bl	800112c <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002642:	f7fe fd73 	bl	800112c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e03d      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x46a>
 8002660:	e035      	b.n	80026ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fd60 	bl	800112c <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fd5c 	bl	800112c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e026      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x498>
 800268e:	e01e      	b.n	80026ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e019      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
 800269c:	40021000 	.word	0x40021000
 80026a0:	40007000 	.word	0x40007000
 80026a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_OscConfig+0x500>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0d0      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d910      	bls.n	8002720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b67      	ldr	r3, [pc, #412]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 0207 	bic.w	r2, r3, #7
 8002706:	4965      	ldr	r1, [pc, #404]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b63      	ldr	r3, [pc, #396]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0b8      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002738:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a58      	ldr	r2, [pc, #352]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002742:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002750:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a52      	ldr	r2, [pc, #328]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800275a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b50      	ldr	r3, [pc, #320]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	494d      	ldr	r1, [pc, #308]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d040      	beq.n	80027fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d115      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e073      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e06b      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ba:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4936      	ldr	r1, [pc, #216]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027cc:	f7fe fcae 	bl	800112c <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7fe fcaa 	bl	800112c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e053      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 020c 	and.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1eb      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d210      	bcs.n	800282c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 0207 	bic.w	r2, r3, #7
 8002812:	4922      	ldr	r1, [pc, #136]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e032      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4916      	ldr	r1, [pc, #88]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490e      	ldr	r1, [pc, #56]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800286a:	f000 f821 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 800286e:	4602      	mov	r2, r0
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	490a      	ldr	r1, [pc, #40]	; (80028a4 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_ClockConfig+0x1d0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fc0c 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40022000 	.word	0x40022000
 80028a0:	40021000 	.word	0x40021000
 80028a4:	080033c4 	.word	0x080033c4
 80028a8:	20000178 	.word	0x20000178
 80028ac:	2000017c 	.word	0x2000017c

080028b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	b490      	push	{r4, r7}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028b6:	4b29      	ldr	r3, [pc, #164]	; (800295c <HAL_RCC_GetSysClockFreq+0xac>)
 80028b8:	1d3c      	adds	r4, r7, #4
 80028ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028c0:	f240 2301 	movw	r3, #513	; 0x201
 80028c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x40>
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x46>
 80028ee:	e02b      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028f0:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028f2:	623b      	str	r3, [r7, #32]
      break;
 80028f4:	e02b      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	0c9b      	lsrs	r3, r3, #18
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	3328      	adds	r3, #40	; 0x28
 8002900:	443b      	add	r3, r7
 8002902:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002906:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d012      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	0c5b      	lsrs	r3, r3, #17
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	3328      	adds	r3, #40	; 0x28
 800291e:	443b      	add	r3, r7
 8002920:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002924:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb4>)
 800292a:	fb03 f202 	mul.w	r2, r3, r2
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
 8002936:	e004      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <HAL_RCC_GetSysClockFreq+0xb8>)
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	623b      	str	r3, [r7, #32]
      break;
 8002946:	e002      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb4>)
 800294a:	623b      	str	r3, [r7, #32]
      break;
 800294c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294e:	6a3b      	ldr	r3, [r7, #32]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bc90      	pop	{r4, r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	080033b4 	.word	0x080033b4
 8002960:	40021000 	.word	0x40021000
 8002964:	007a1200 	.word	0x007a1200
 8002968:	003d0900 	.word	0x003d0900

0800296c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <RCC_Delay+0x34>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <RCC_Delay+0x38>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	0a5b      	lsrs	r3, r3, #9
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002988:	bf00      	nop
  }
  while (Delay --);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1e5a      	subs	r2, r3, #1
 800298e:	60fa      	str	r2, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f9      	bne.n	8002988 <RCC_Delay+0x1c>
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	20000178 	.word	0x20000178
 80029a4:	10624dd3 	.word	0x10624dd3

080029a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e041      	b.n	8002a3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe fb0a 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f000 fa70 	bl	8002ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d001      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e03a      	b.n	8002ad6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <HAL_TIM_Base_Start_IT+0x98>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00e      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x58>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8a:	d009      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x58>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x58>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a13      	ldr	r2, [pc, #76]	; (8002ae8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d111      	bne.n	8002ac4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d010      	beq.n	8002ad4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac2:	e007      	b.n	8002ad4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800

08002aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d122      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0202 	mvn.w	r2, #2
 8002b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f9b1 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f9a4 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f9b3 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d122      	bne.n	8002b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d11b      	bne.n	8002b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0204 	mvn.w	r2, #4
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f987 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f97a 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f989 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d122      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0208 	mvn.w	r2, #8
 8002bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f95d 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f950 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f95f 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d122      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b10      	cmp	r3, #16
 8002c0a:	d11b      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0210 	mvn.w	r2, #16
 8002c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2208      	movs	r2, #8
 8002c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f933 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002c30:	e005      	b.n	8002c3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f926 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f935 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d10e      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d107      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0201 	mvn.w	r2, #1
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fd ffdc 	bl	8000c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	2b80      	cmp	r3, #128	; 0x80
 8002c7c:	d10e      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	d107      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fa77 	bl	800318a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b40      	cmp	r3, #64	; 0x40
 8002cb6:	d107      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f8f9 	bl	8002eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d107      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0220 	mvn.w	r2, #32
 8002cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa42 	bl	8003178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_TIM_ConfigClockSource+0x18>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e0b3      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x180>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4c:	d03e      	beq.n	8002dcc <HAL_TIM_ConfigClockSource+0xd0>
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d52:	f200 8087 	bhi.w	8002e64 <HAL_TIM_ConfigClockSource+0x168>
 8002d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5a:	f000 8085 	beq.w	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d62:	d87f      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x168>
 8002d64:	2b70      	cmp	r3, #112	; 0x70
 8002d66:	d01a      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0xa2>
 8002d68:	2b70      	cmp	r3, #112	; 0x70
 8002d6a:	d87b      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x168>
 8002d6c:	2b60      	cmp	r3, #96	; 0x60
 8002d6e:	d050      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x116>
 8002d70:	2b60      	cmp	r3, #96	; 0x60
 8002d72:	d877      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x168>
 8002d74:	2b50      	cmp	r3, #80	; 0x50
 8002d76:	d03c      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0xf6>
 8002d78:	2b50      	cmp	r3, #80	; 0x50
 8002d7a:	d873      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x168>
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d058      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x136>
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d86f      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x168>
 8002d84:	2b30      	cmp	r3, #48	; 0x30
 8002d86:	d064      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x156>
 8002d88:	2b30      	cmp	r3, #48	; 0x30
 8002d8a:	d86b      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x168>
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d060      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x156>
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d867      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x168>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d05c      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x156>
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d05a      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d9c:	e062      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6899      	ldr	r1, [r3, #8]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f000 f966 	bl	800307e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	609a      	str	r2, [r3, #8]
      break;
 8002dca:	e04e      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6899      	ldr	r1, [r3, #8]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f000 f94f 	bl	800307e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dee:	609a      	str	r2, [r3, #8]
      break;
 8002df0:	e03b      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f000 f8c6 	bl	8002f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2150      	movs	r1, #80	; 0x50
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f91d 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e10:	e02b      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f000 f8e4 	bl	8002fec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2160      	movs	r1, #96	; 0x60
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f90d 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e30:	e01b      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f000 f8a6 	bl	8002f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2140      	movs	r1, #64	; 0x40
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f8fd 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e50:	e00b      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f000 f8f4 	bl	800304a <TIM_ITRx_SetConfig>
        break;
 8002e62:	e002      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e64:	bf00      	nop
 8002e66:	e000      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <TIM_Base_SetConfig+0xb8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <TIM_Base_SetConfig+0x30>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eea:	d007      	beq.n	8002efc <TIM_Base_SetConfig+0x30>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <TIM_Base_SetConfig+0xbc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <TIM_Base_SetConfig+0x30>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a25      	ldr	r2, [pc, #148]	; (8002f8c <TIM_Base_SetConfig+0xc0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d108      	bne.n	8002f0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <TIM_Base_SetConfig+0xb8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00b      	beq.n	8002f2e <TIM_Base_SetConfig+0x62>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1c:	d007      	beq.n	8002f2e <TIM_Base_SetConfig+0x62>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <TIM_Base_SetConfig+0xbc>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d003      	beq.n	8002f2e <TIM_Base_SetConfig+0x62>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a18      	ldr	r2, [pc, #96]	; (8002f8c <TIM_Base_SetConfig+0xc0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d108      	bne.n	8002f40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a07      	ldr	r2, [pc, #28]	; (8002f84 <TIM_Base_SetConfig+0xb8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d103      	bne.n	8002f74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	615a      	str	r2, [r3, #20]
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800

08002f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f023 0201 	bic.w	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f023 030a 	bic.w	r3, r3, #10
 8002fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	621a      	str	r2, [r3, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f023 0210 	bic.w	r2, r3, #16
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003016:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	031b      	lsls	r3, r3, #12
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003028:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	621a      	str	r2, [r3, #32]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	f043 0307 	orr.w	r3, r3, #7
 800306c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	609a      	str	r2, [r3, #8]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800307e:	b480      	push	{r7}
 8003080:	b087      	sub	sp, #28
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003098:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	609a      	str	r2, [r3, #8]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e046      	b.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00e      	beq.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003120:	d009      	beq.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a10      	ldr	r2, [pc, #64]	; (8003174 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d10c      	bne.n	8003150 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800313c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	4313      	orrs	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800

08003178 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <__libc_init_array>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	2600      	movs	r6, #0
 80031a0:	4d0c      	ldr	r5, [pc, #48]	; (80031d4 <__libc_init_array+0x38>)
 80031a2:	4c0d      	ldr	r4, [pc, #52]	; (80031d8 <__libc_init_array+0x3c>)
 80031a4:	1b64      	subs	r4, r4, r5
 80031a6:	10a4      	asrs	r4, r4, #2
 80031a8:	42a6      	cmp	r6, r4
 80031aa:	d109      	bne.n	80031c0 <__libc_init_array+0x24>
 80031ac:	f000 f830 	bl	8003210 <_init>
 80031b0:	2600      	movs	r6, #0
 80031b2:	4d0a      	ldr	r5, [pc, #40]	; (80031dc <__libc_init_array+0x40>)
 80031b4:	4c0a      	ldr	r4, [pc, #40]	; (80031e0 <__libc_init_array+0x44>)
 80031b6:	1b64      	subs	r4, r4, r5
 80031b8:	10a4      	asrs	r4, r4, #2
 80031ba:	42a6      	cmp	r6, r4
 80031bc:	d105      	bne.n	80031ca <__libc_init_array+0x2e>
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c4:	4798      	blx	r3
 80031c6:	3601      	adds	r6, #1
 80031c8:	e7ee      	b.n	80031a8 <__libc_init_array+0xc>
 80031ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ce:	4798      	blx	r3
 80031d0:	3601      	adds	r6, #1
 80031d2:	e7f2      	b.n	80031ba <__libc_init_array+0x1e>
 80031d4:	080033d4 	.word	0x080033d4
 80031d8:	080033d4 	.word	0x080033d4
 80031dc:	080033d4 	.word	0x080033d4
 80031e0:	080033d8 	.word	0x080033d8

080031e4 <memcpy>:
 80031e4:	440a      	add	r2, r1
 80031e6:	4291      	cmp	r1, r2
 80031e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80031ec:	d100      	bne.n	80031f0 <memcpy+0xc>
 80031ee:	4770      	bx	lr
 80031f0:	b510      	push	{r4, lr}
 80031f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031f6:	4291      	cmp	r1, r2
 80031f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031fc:	d1f9      	bne.n	80031f2 <memcpy+0xe>
 80031fe:	bd10      	pop	{r4, pc}

08003200 <memset>:
 8003200:	4603      	mov	r3, r0
 8003202:	4402      	add	r2, r0
 8003204:	4293      	cmp	r3, r2
 8003206:	d100      	bne.n	800320a <memset+0xa>
 8003208:	4770      	bx	lr
 800320a:	f803 1b01 	strb.w	r1, [r3], #1
 800320e:	e7f9      	b.n	8003204 <memset+0x4>

08003210 <_init>:
 8003210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003212:	bf00      	nop
 8003214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003216:	bc08      	pop	{r3}
 8003218:	469e      	mov	lr, r3
 800321a:	4770      	bx	lr

0800321c <_fini>:
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	bf00      	nop
 8003220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003222:	bc08      	pop	{r3}
 8003224:	469e      	mov	lr, r3
 8003226:	4770      	bx	lr
