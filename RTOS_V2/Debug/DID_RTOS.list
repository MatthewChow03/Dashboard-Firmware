
DID_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006150  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08006340  08006340  00016340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006688  08006688  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08006688  08006688  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006688  08006688  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006688  08006688  00016688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800668c  0800668c  0001668c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08006690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b34  200001ec  0800687c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d20  0800687c  00021d20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b97d  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b24  00000000  00000000  0003bb92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  00040a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbd4  00000000  00000000  00041c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d94  00000000  00000000  0005d834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a214f  00000000  00000000  000735c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115717  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b0  00000000  00000000  0011576c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001ec 	.word	0x200001ec
 800020c:	00000000 	.word	0x00000000
 8000210:	08006328 	.word	0x08006328

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001f0 	.word	0x200001f0
 800022c:	08006328 	.word	0x08006328

08000230 <Delay>:
 * A Delay with a value of ~1ms
 * @Param counts: Number of milliseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void Delay(uint32_t counts) {
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint16_t j;
	for (i = 0; i < counts; i++) {
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	e00c      	b.n	8000258 <Delay+0x28>
		for (j = 0; j < 16000; j++) {
 800023e:	2300      	movs	r3, #0
 8000240:	817b      	strh	r3, [r7, #10]
 8000242:	e002      	b.n	800024a <Delay+0x1a>
 8000244:	897b      	ldrh	r3, [r7, #10]
 8000246:	3301      	adds	r3, #1
 8000248:	817b      	strh	r3, [r7, #10]
 800024a:	897b      	ldrh	r3, [r7, #10]
 800024c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000250:	d3f8      	bcc.n	8000244 <Delay+0x14>
	for (i = 0; i < counts; i++) {
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	3301      	adds	r3, #1
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	429a      	cmp	r2, r3
 800025e:	d3ee      	bcc.n	800023e <Delay+0xe>
		}
	}

}
 8000260:	bf00      	nop
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <MicrosecondDelay>:
 * A Delay with a value of ~1us
 * @Param counts: Number of microseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void MicrosecondDelay(uint32_t counts) {
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint8_t j;

	for (i = 0; i < counts; i++) {
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	e00b      	b.n	8000292 <MicrosecondDelay+0x26>
		for (j = 0; j < 16; j++) {
 800027a:	2300      	movs	r3, #0
 800027c:	72fb      	strb	r3, [r7, #11]
 800027e:	e002      	b.n	8000286 <MicrosecondDelay+0x1a>
 8000280:	7afb      	ldrb	r3, [r7, #11]
 8000282:	3301      	adds	r3, #1
 8000284:	72fb      	strb	r3, [r7, #11]
 8000286:	7afb      	ldrb	r3, [r7, #11]
 8000288:	2b0f      	cmp	r3, #15
 800028a:	d9f9      	bls.n	8000280 <MicrosecondDelay+0x14>
	for (i = 0; i < counts; i++) {
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	3301      	adds	r3, #1
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	68fa      	ldr	r2, [r7, #12]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	429a      	cmp	r2, r3
 8000298:	d3ef      	bcc.n	800027a <MicrosecondDelay+0xe>
		}
	}
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr

080002a6 <MoveCursor>:
/**
 * Moves cursor to the position on the screen determined by XY Coordinates
 * @Param x: x-coordinate
 * @Param y: y-coordinate
 */
void MoveCursor(uint8_t x, uint8_t y) {
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b084      	sub	sp, #16
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	4603      	mov	r3, r0
 80002ae:	460a      	mov	r2, r1
 80002b0:	71fb      	strb	r3, [r7, #7]
 80002b2:	4613      	mov	r3, r2
 80002b4:	71bb      	strb	r3, [r7, #6]
	 * Row major:
	 * 0 1 2 3 4 
	 * 5 6 7 8 9 
	 *  
	 */
	uint16_t offset = 40 * y + x;
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	0092      	lsls	r2, r2, #2
 80002be:	4413      	add	r3, r2
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	4413      	add	r3, r2
 80002ca:	81fb      	strh	r3, [r7, #14]

	TransmitCommand(0x46);
 80002cc:	2046      	movs	r0, #70	; 0x46
 80002ce:	f000 fae7 	bl	80008a0 <TransmitCommand>
	// The CSRW register is 2 bytes long, so the first parameter 
	// is the first byte and the second parameter is the second
	// byte
	TransmitCommandParameter(offset & 0xFF);
 80002d2:	89fb      	ldrh	r3, [r7, #14]
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fb00 	bl	80008dc <TransmitCommandParameter>
	TransmitCommandParameter(offset >> 8);
 80002dc:	89fb      	ldrh	r3, [r7, #14]
 80002de:	0a1b      	lsrs	r3, r3, #8
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 faf9 	bl	80008dc <TransmitCommandParameter>
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <ClearScreen>:

/**
 * Purpose: Prints 1200 " " characters to clear the screen
 */
void ClearScreen() {
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b082      	sub	sp, #8
 80002f6:	af00      	add	r7, sp, #0
	//Set cursor to start position
	MoveCursor(0, 0);
 80002f8:	2100      	movs	r1, #0
 80002fa:	2000      	movs	r0, #0
 80002fc:	f7ff ffd3 	bl	80002a6 <MoveCursor>

	//replace all characters with spaces
	TransmitCommand(0x42);
 8000300:	2042      	movs	r0, #66	; 0x42
 8000302:	f000 facd 	bl	80008a0 <TransmitCommand>
	for (uint16_t i = 0; i < 1200; i++) {
 8000306:	2300      	movs	r3, #0
 8000308:	80fb      	strh	r3, [r7, #6]
 800030a:	e005      	b.n	8000318 <ClearScreen+0x26>
		TransmitCommandParameter(0x20);
 800030c:	2020      	movs	r0, #32
 800030e:	f000 fae5 	bl	80008dc <TransmitCommandParameter>
	for (uint16_t i = 0; i < 1200; i++) {
 8000312:	88fb      	ldrh	r3, [r7, #6]
 8000314:	3301      	adds	r3, #1
 8000316:	80fb      	strh	r3, [r7, #6]
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800031e:	d3f5      	bcc.n	800030c <ClearScreen+0x1a>
	}
	MoveCursor(0, 0);
 8000320:	2100      	movs	r1, #0
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffbf 	bl	80002a6 <MoveCursor>
}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <SaveCharacterToRAM>:
 * Saves each subcharacter to the SG RAM 1, in locations 0x80 to 0x8F
 * @Param bitmap: An array of the bitmap of that particular subcharacter
 * @Param offset: Some offset number
 * Returns: nothing
 */
void SaveCharacterToRAM(uint8_t *bitmap, uint8_t offset) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
	TransmitCommand(0x46);
 800033c:	2046      	movs	r0, #70	; 0x46
 800033e:	f000 faaf 	bl	80008a0 <TransmitCommand>
	TransmitCommandParameter(offset);
 8000342:	78fb      	ldrb	r3, [r7, #3]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fac9 	bl	80008dc <TransmitCommandParameter>
	TransmitCommandParameter(0x48);
 800034a:	2048      	movs	r0, #72	; 0x48
 800034c:	f000 fac6 	bl	80008dc <TransmitCommandParameter>
	TransmitCommand(0x42);
 8000350:	2042      	movs	r0, #66	; 0x42
 8000352:	f000 faa5 	bl	80008a0 <TransmitCommand>

	for (int i = 0; i < BYTEPERBITMAP; i++) {
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	e009      	b.n	8000370 <SaveCharacterToRAM+0x40>
		TransmitCommandParameter(bitmap[i]);
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	4413      	add	r3, r2
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fab9 	bl	80008dc <TransmitCommandParameter>
	for (int i = 0; i < BYTEPERBITMAP; i++) {
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	3301      	adds	r3, #1
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	2b0f      	cmp	r3, #15
 8000374:	ddf2      	ble.n	800035c <SaveCharacterToRAM+0x2c>
	}
}
 8000376:	bf00      	nop
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <CharacterBitMaps>:

/**
 * Writes custom bitmaps to the LCD screen RAM
 */
void CharacterBitMaps(void) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b0c2      	sub	sp, #264	; 0x108
 8000384:	af00      	add	r7, sp, #0
	uint8_t bitmap[16][BYTEPERBITMAP] = { { 0x7E, 0x7E, 0x60, 0x60, 0x60, 0x60,
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4a19      	ldr	r2, [pc, #100]	; (80003f0 <CharacterBitMaps+0x70>)
 800038a:	4618      	mov	r0, r3
 800038c:	4611      	mov	r1, r2
 800038e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000392:	461a      	mov	r2, r3
 8000394:	f005 fef0 	bl	8006178 <memcpy>
			{ 0x00, 0x46, 0x46, 0x46, 0x66, 0x66, 0x66, 0x36, 0x36, 0x36, 0x0E,
					0x0E, 0x0E, 0x06, 0x06, 0x00 }, { 0xC0, 0xE0, 0x60, 0x30,
					0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x04, 0x06, 0x06, 0x06,
					0x07, 0x03 }, { 0x03, 0x07, 0x06, 0x06, 0x0C, 0x0C, 0x18,
					0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x60, 0xE0, 0xC0 } };
	TransmitCommand(0x5C);
 8000398:	205c      	movs	r0, #92	; 0x5c
 800039a:	f000 fa81 	bl	80008a0 <TransmitCommand>
	TransmitCommandParameter(0x00);
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fa9c 	bl	80008dc <TransmitCommandParameter>
	TransmitCommandParameter(0x40);
 80003a4:	2040      	movs	r0, #64	; 0x40
 80003a6:	f000 fa99 	bl	80008dc <TransmitCommandParameter>
	TransmitCommand(0x4C);
 80003aa:	204c      	movs	r0, #76	; 0x4c
 80003ac:	f000 fa78 	bl	80008a0 <TransmitCommand>

	for (uint8_t i = 0; i < 16; i++) {
 80003b0:	2300      	movs	r3, #0
 80003b2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80003b6:	e011      	b.n	80003dc <CharacterBitMaps+0x5c>
		SaveCharacterToRAM(bitmap[i], i * BYTEPERBITMAP);
 80003b8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003bc:	1d3a      	adds	r2, r7, #4
 80003be:	011b      	lsls	r3, r3, #4
 80003c0:	441a      	add	r2, r3
 80003c2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003c6:	011b      	lsls	r3, r3, #4
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	4610      	mov	r0, r2
 80003ce:	f7ff ffaf 	bl	8000330 <SaveCharacterToRAM>
	for (uint8_t i = 0; i < 16; i++) {
 80003d2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003d6:	3301      	adds	r3, #1
 80003d8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80003dc:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003e0:	2b0f      	cmp	r3, #15
 80003e2:	d9e9      	bls.n	80003b8 <CharacterBitMaps+0x38>
	}
}
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	080063ac 	.word	0x080063ac

080003f4 <OutputString>:
 * @Param Str[]: A string, "array of characters", whatever
 * @Param starting_x: x-coordinate to write the string to
 * @Param starting_y: y-coordinate to write the string to
 * Returns: nothing
 */
void OutputString(char Str[], uint8_t starting_x, uint8_t starting_y) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	70fb      	strb	r3, [r7, #3]
 8000400:	4613      	mov	r3, r2
 8000402:	70bb      	strb	r3, [r7, #2]
					{ 0x20, 0x20, 0x20, 0x20 }, { 0x20, 0x20, 0x2E, 0x20 }, {
							0x2E, 0x20, 0x2E, 0x20 }, { 0x87, 0x87, 0x86, 0x86 }, //SPACE, ., :, -
			};

	uint8_t temp;
	uint8_t x = starting_x;
 8000404:	78fb      	ldrb	r3, [r7, #3]
 8000406:	73bb      	strb	r3, [r7, #14]

	TransmitCommand(0x4C);                 //Set the cursor direction to "Right"
 8000408:	204c      	movs	r0, #76	; 0x4c
 800040a:	f000 fa49 	bl	80008a0 <TransmitCommand>

	for (uint8_t c = 0; Str[c] != '\0'; c++)
 800040e:	2300      	movs	r3, #0
 8000410:	737b      	strb	r3, [r7, #13]
 8000412:	e069      	b.n	80004e8 <OutputString+0xf4>
	// used to be for (uint8_t c = 0; c < Str[c] != '\0'; c++)
			{
		MoveCursor(x, starting_y);
 8000414:	78ba      	ldrb	r2, [r7, #2]
 8000416:	7bbb      	ldrb	r3, [r7, #14]
 8000418:	4611      	mov	r1, r2
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff43 	bl	80002a6 <MoveCursor>
		temp = (uint8_t) Str[c];
 8000420:	7b7b      	ldrb	r3, [r7, #13]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	73fb      	strb	r3, [r7, #15]
		if (temp == 32) {
 800042a:	7bfb      	ldrb	r3, [r7, #15]
 800042c:	2b20      	cmp	r3, #32
 800042e:	d102      	bne.n	8000436 <OutputString+0x42>
			temp = 36;                  //if character is " "
 8000430:	2324      	movs	r3, #36	; 0x24
 8000432:	73fb      	strb	r3, [r7, #15]
 8000434:	e025      	b.n	8000482 <OutputString+0x8e>
		} else if (temp == 58) {
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	2b3a      	cmp	r3, #58	; 0x3a
 800043a:	d102      	bne.n	8000442 <OutputString+0x4e>
			temp = 38;                  //if character is ":"
 800043c:	2326      	movs	r3, #38	; 0x26
 800043e:	73fb      	strb	r3, [r7, #15]
 8000440:	e01f      	b.n	8000482 <OutputString+0x8e>
		} else if (temp == 46) {
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	2b2e      	cmp	r3, #46	; 0x2e
 8000446:	d102      	bne.n	800044e <OutputString+0x5a>
			temp = 37;                  //if character is "."
 8000448:	2325      	movs	r3, #37	; 0x25
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e019      	b.n	8000482 <OutputString+0x8e>
		} else if (temp == 45) {
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	2b2d      	cmp	r3, #45	; 0x2d
 8000452:	d102      	bne.n	800045a <OutputString+0x66>
			temp = 39;                  //if character is "-"
 8000454:	2327      	movs	r3, #39	; 0x27
 8000456:	73fb      	strb	r3, [r7, #15]
 8000458:	e013      	b.n	8000482 <OutputString+0x8e>
		} else if (temp <= 57) {
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	2b39      	cmp	r3, #57	; 0x39
 800045e:	d803      	bhi.n	8000468 <OutputString+0x74>
			temp -= OFFSET_NUMERIC;     //if character is between "0" and "9"
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	3b16      	subs	r3, #22
 8000464:	73fb      	strb	r3, [r7, #15]
 8000466:	e00c      	b.n	8000482 <OutputString+0x8e>
		} else if (temp <= 90) {
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	2b5a      	cmp	r3, #90	; 0x5a
 800046c:	d803      	bhi.n	8000476 <OutputString+0x82>
			temp -= OFFSET_CAPITAL;     //if character is between "A" and "Z"
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	3b41      	subs	r3, #65	; 0x41
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	e005      	b.n	8000482 <OutputString+0x8e>
		} else if (temp <= 122) {
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	2b7a      	cmp	r3, #122	; 0x7a
 800047a:	d802      	bhi.n	8000482 <OutputString+0x8e>
			temp -= OFFSET_LOWCASE;     //if character is between "a" and "z"
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3b61      	subs	r3, #97	; 0x61
 8000480:	73fb      	strb	r3, [r7, #15]
		 * |C D|
		 *  - -
		 * (4 subcharacters, in that order)     *
		 ***********************************/

		TransmitCommand(0x42);                      //print subcharacers A and B
 8000482:	2042      	movs	r0, #66	; 0x42
 8000484:	f000 fa0c 	bl	80008a0 <TransmitCommand>
		TransmitCommandParameter(LOOKUPTABLE[temp][0]);
 8000488:	7bfb      	ldrb	r3, [r7, #15]
 800048a:	4a1d      	ldr	r2, [pc, #116]	; (8000500 <OutputString+0x10c>)
 800048c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fa23 	bl	80008dc <TransmitCommandParameter>
		TransmitCommandParameter(LOOKUPTABLE[temp][1]);
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	4a19      	ldr	r2, [pc, #100]	; (8000500 <OutputString+0x10c>)
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	4413      	add	r3, r2
 800049e:	785b      	ldrb	r3, [r3, #1]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fa1b 	bl	80008dc <TransmitCommandParameter>

		MoveCursor(x, starting_y + 1);
 80004a6:	78bb      	ldrb	r3, [r7, #2]
 80004a8:	3301      	adds	r3, #1
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	7bbb      	ldrb	r3, [r7, #14]
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff fef8 	bl	80002a6 <MoveCursor>

		TransmitCommand(0x42);                 //print the subcharacters C and D
 80004b6:	2042      	movs	r0, #66	; 0x42
 80004b8:	f000 f9f2 	bl	80008a0 <TransmitCommand>
		TransmitCommandParameter(LOOKUPTABLE[temp][2]);
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	4a10      	ldr	r2, [pc, #64]	; (8000500 <OutputString+0x10c>)
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	4413      	add	r3, r2
 80004c4:	789b      	ldrb	r3, [r3, #2]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fa08 	bl	80008dc <TransmitCommandParameter>
		TransmitCommandParameter(LOOKUPTABLE[temp][3]);
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <OutputString+0x10c>)
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	4413      	add	r3, r2
 80004d4:	78db      	ldrb	r3, [r3, #3]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 fa00 	bl	80008dc <TransmitCommandParameter>

		x += 3;
 80004dc:	7bbb      	ldrb	r3, [r7, #14]
 80004de:	3303      	adds	r3, #3
 80004e0:	73bb      	strb	r3, [r7, #14]
	for (uint8_t c = 0; Str[c] != '\0'; c++)
 80004e2:	7b7b      	ldrb	r3, [r7, #13]
 80004e4:	3301      	adds	r3, #1
 80004e6:	737b      	strb	r3, [r7, #13]
 80004e8:	7b7b      	ldrb	r3, [r7, #13]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d18f      	bne.n	8000414 <OutputString+0x20>
	}
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200000d4 	.word	0x200000d4

08000504 <OutputPaddedInteger>:
 *                    otherwise, the decimal will be on
 * @Param x: x-coordinate to write the character
 * @Param y: y-coordinate to write the character
 * Returns: nothing
 */
void OutputPaddedInteger(int32_t num, uint8_t dec, uint8_t x, uint8_t y) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	4608      	mov	r0, r1
 800050e:	4611      	mov	r1, r2
 8000510:	461a      	mov	r2, r3
 8000512:	4603      	mov	r3, r0
 8000514:	70fb      	strb	r3, [r7, #3]
 8000516:	460b      	mov	r3, r1
 8000518:	70bb      	strb	r3, [r7, #2]
 800051a:	4613      	mov	r3, r2
 800051c:	707b      	strb	r3, [r7, #1]
	uint8_t i;
	char str[5] = { ' ', ' ', ' ', ' ', '\0' };
 800051e:	4a37      	ldr	r2, [pc, #220]	; (80005fc <OutputPaddedInteger+0xf8>)
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000528:	6018      	str	r0, [r3, #0]
 800052a:	3304      	adds	r3, #4
 800052c:	7019      	strb	r1, [r3, #0]
	char decplace[2] = { ' ', '\0' };
 800052e:	2320      	movs	r3, #32
 8000530:	81bb      	strh	r3, [r7, #12]

	if (num < 0) {
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b00      	cmp	r3, #0
 8000536:	da05      	bge.n	8000544 <OutputPaddedInteger+0x40>
		str[0] = '-';
 8000538:	232d      	movs	r3, #45	; 0x2d
 800053a:	743b      	strb	r3, [r7, #16]
		num = -1 * num;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	425b      	negs	r3, r3
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	e004      	b.n	800054e <OutputPaddedInteger+0x4a>
	} else if (num == 0) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d101      	bne.n	800054e <OutputPaddedInteger+0x4a>
		str[3] = '0';
 800054a:	2330      	movs	r3, #48	; 0x30
 800054c:	74fb      	strb	r3, [r7, #19]
	}

	if (num > 999) {
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000554:	db02      	blt.n	800055c <OutputPaddedInteger+0x58>
		num = 999;
 8000556:	f240 33e7 	movw	r3, #999	; 0x3e7
 800055a:	607b      	str	r3, [r7, #4]
	}

	// Convert the integer digits into chars, one by one
	for (i = 3; num != 0; i--) {
 800055c:	2303      	movs	r3, #3
 800055e:	75fb      	strb	r3, [r7, #23]
 8000560:	e01e      	b.n	80005a0 <OutputPaddedInteger+0x9c>
		str[i] = "0123456789"[num % 10];
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <OutputPaddedInteger+0xfc>)
 8000566:	fb83 2301 	smull	r2, r3, r3, r1
 800056a:	109a      	asrs	r2, r3, #2
 800056c:	17cb      	asrs	r3, r1, #31
 800056e:	1ad2      	subs	r2, r2, r3
 8000570:	4613      	mov	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4413      	add	r3, r2
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	1aca      	subs	r2, r1, r3
 800057a:	7dfb      	ldrb	r3, [r7, #23]
 800057c:	4921      	ldr	r1, [pc, #132]	; (8000604 <OutputPaddedInteger+0x100>)
 800057e:	5c8a      	ldrb	r2, [r1, r2]
 8000580:	f107 0118 	add.w	r1, r7, #24
 8000584:	440b      	add	r3, r1
 8000586:	f803 2c08 	strb.w	r2, [r3, #-8]
		num = num / 10;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <OutputPaddedInteger+0xfc>)
 800058e:	fb82 1203 	smull	r1, r2, r2, r3
 8000592:	1092      	asrs	r2, r2, #2
 8000594:	17db      	asrs	r3, r3, #31
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	607b      	str	r3, [r7, #4]
	for (i = 3; num != 0; i--) {
 800059a:	7dfb      	ldrb	r3, [r7, #23]
 800059c:	3b01      	subs	r3, #1
 800059e:	75fb      	strb	r3, [r7, #23]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1dd      	bne.n	8000562 <OutputPaddedInteger+0x5e>
	}

	OutputString(str, x, y);
 80005a6:	787a      	ldrb	r2, [r7, #1]
 80005a8:	78b9      	ldrb	r1, [r7, #2]
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff20 	bl	80003f4 <OutputString>

	if (dec != -1) {
		//Output 1 decimal place
		OutputString(".", x + 12, y);
 80005b4:	78bb      	ldrb	r3, [r7, #2]
 80005b6:	330c      	adds	r3, #12
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	787a      	ldrb	r2, [r7, #1]
 80005bc:	4619      	mov	r1, r3
 80005be:	4812      	ldr	r0, [pc, #72]	; (8000608 <OutputPaddedInteger+0x104>)
 80005c0:	f7ff ff18 	bl	80003f4 <OutputString>

		dec = dec % 10;
 80005c4:	78fa      	ldrb	r2, [r7, #3]
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <OutputPaddedInteger+0x108>)
 80005c8:	fba3 1302 	umull	r1, r3, r3, r2
 80005cc:	08d9      	lsrs	r1, r3, #3
 80005ce:	460b      	mov	r3, r1
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	440b      	add	r3, r1
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	70fb      	strb	r3, [r7, #3]

		decplace[0] = "0123456789"[dec];
 80005da:	78fb      	ldrb	r3, [r7, #3]
 80005dc:	4a09      	ldr	r2, [pc, #36]	; (8000604 <OutputPaddedInteger+0x100>)
 80005de:	5cd3      	ldrb	r3, [r2, r3]
 80005e0:	733b      	strb	r3, [r7, #12]
		OutputString(decplace, x + 15, y);
 80005e2:	78bb      	ldrb	r3, [r7, #2]
 80005e4:	330f      	adds	r3, #15
 80005e6:	b2d9      	uxtb	r1, r3
 80005e8:	787a      	ldrb	r2, [r7, #1]
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff00 	bl	80003f4 <OutputString>
	}
}
 80005f4:	bf00      	nop
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	080064b0 	.word	0x080064b0
 8000600:	66666667 	.word	0x66666667
 8000604:	080064b8 	.word	0x080064b8
 8000608:	080064ac 	.word	0x080064ac
 800060c:	cccccccd 	.word	0xcccccccd

08000610 <DisplayScreen>:
}

/**
 * Displays all information in a single screen
 */
void DisplayScreen(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
	ClearScreen();
 8000616:	f7ff fe6c 	bl	80002f2 <ClearScreen>

		// **TEMPORARY: DATA IS DISPLAYED 1 BY 1


	// Different code for each page allows for different designs
	switch (current_page) {
 800061a:	4b92      	ldr	r3, [pc, #584]	; (8000864 <DisplayScreen+0x254>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d003      	beq.n	800062a <DisplayScreen+0x1a>
 8000622:	2b02      	cmp	r3, #2
 8000624:	f000 8084 	beq.w	8000730 <DisplayScreen+0x120>
			}
			break;

	}

}
 8000628:	e117      	b.n	800085a <DisplayScreen+0x24a>
			for (uint8_t i = 0; i < NUM_ROWS_PAGE1; i++) {
 800062a:	2300      	movs	r3, #0
 800062c:	75fb      	strb	r3, [r7, #23]
 800062e:	e07b      	b.n	8000728 <DisplayScreen+0x118>
				int32_t output = 0;			// Used to store the output data which will be displayed after the switch statement
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
				switch(i)
 8000634:	7dfb      	ldrb	r3, [r7, #23]
 8000636:	2b03      	cmp	r3, #3
 8000638:	d83f      	bhi.n	80006ba <DisplayScreen+0xaa>
 800063a:	a201      	add	r2, pc, #4	; (adr r2, 8000640 <DisplayScreen+0x30>)
 800063c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000640:	08000651 	.word	0x08000651
 8000644:	0800066f 	.word	0x0800066f
 8000648:	0800067b 	.word	0x0800067b
 800064c:	080006af 	.word	0x080006af
						convert.bytes[0] = DisplayDataArray[5].raw_data[0];
 8000650:	4b85      	ldr	r3, [pc, #532]	; (8000868 <DisplayScreen+0x258>)
 8000652:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000656:	b25b      	sxtb	r3, r3
 8000658:	b2db      	uxtb	r3, r3
 800065a:	713b      	strb	r3, [r7, #4]
						convert.bytes[1] = DisplayDataArray[5].raw_data[1];
 800065c:	4b82      	ldr	r3, [pc, #520]	; (8000868 <DisplayScreen+0x258>)
 800065e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000662:	b25b      	sxtb	r3, r3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	717b      	strb	r3, [r7, #5]
						output = convert.float_value;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	613b      	str	r3, [r7, #16]
						break;
 800066c:	e025      	b.n	80006ba <DisplayScreen+0xaa>
						output = DisplayDataArray[6].raw_data[0];
 800066e:	4b7e      	ldr	r3, [pc, #504]	; (8000868 <DisplayScreen+0x258>)
 8000670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000674:	b25b      	sxtb	r3, r3
 8000676:	613b      	str	r3, [r7, #16]
						break;
 8000678:	e01f      	b.n	80006ba <DisplayScreen+0xaa>
						convert.bytes[0] = DisplayDataArray[2].raw_data[4];
 800067a:	4b7b      	ldr	r3, [pc, #492]	; (8000868 <DisplayScreen+0x258>)
 800067c:	7e9b      	ldrb	r3, [r3, #26]
 800067e:	b25b      	sxtb	r3, r3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	713b      	strb	r3, [r7, #4]
						convert.bytes[1] = DisplayDataArray[2].raw_data[5];
 8000684:	4b78      	ldr	r3, [pc, #480]	; (8000868 <DisplayScreen+0x258>)
 8000686:	7edb      	ldrb	r3, [r3, #27]
 8000688:	b25b      	sxtb	r3, r3
 800068a:	b2db      	uxtb	r3, r3
 800068c:	717b      	strb	r3, [r7, #5]
						convert.bytes[2] = DisplayDataArray[2].raw_data[6];
 800068e:	4b76      	ldr	r3, [pc, #472]	; (8000868 <DisplayScreen+0x258>)
 8000690:	7f1b      	ldrb	r3, [r3, #28]
 8000692:	b25b      	sxtb	r3, r3
 8000694:	b2db      	uxtb	r3, r3
 8000696:	71bb      	strb	r3, [r7, #6]
						convert.bytes[3] = DisplayDataArray[2].raw_data[7];
 8000698:	4b73      	ldr	r3, [pc, #460]	; (8000868 <DisplayScreen+0x258>)
 800069a:	7f5b      	ldrb	r3, [r3, #29]
 800069c:	b25b      	sxtb	r3, r3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	71fb      	strb	r3, [r7, #7]
						output = convert.float_value * ((int8_t)18/5);
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	613b      	str	r3, [r7, #16]
						break;
 80006ac:	e005      	b.n	80006ba <DisplayScreen+0xaa>
						output = DisplayDataArray[6].raw_data[0];
 80006ae:	4b6e      	ldr	r3, [pc, #440]	; (8000868 <DisplayScreen+0x258>)
 80006b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	613b      	str	r3, [r7, #16]
						break;
 80006b8:	bf00      	nop
				OutputString(DisplayLayoutPage1[i].name, 0,	DisplayLayoutPage1[i].ypos);
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
 80006bc:	4a6b      	ldr	r2, [pc, #428]	; (800086c <DisplayScreen+0x25c>)
 80006be:	011b      	lsls	r3, r3, #4
 80006c0:	4413      	add	r3, r2
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
 80006c6:	4a69      	ldr	r2, [pc, #420]	; (800086c <DisplayScreen+0x25c>)
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	4413      	add	r3, r2
 80006cc:	330c      	adds	r3, #12
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f7ff fe8e 	bl	80003f4 <OutputString>
				OutputPaddedInteger(output, -1, DisplayLayoutPage1[i].data_xpos, DisplayLayoutPage1[i].ypos);
 80006d8:	7dfb      	ldrb	r3, [r7, #23]
 80006da:	4a64      	ldr	r2, [pc, #400]	; (800086c <DisplayScreen+0x25c>)
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	4413      	add	r3, r2
 80006e0:	330a      	adds	r3, #10
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	7dfb      	ldrb	r3, [r7, #23]
 80006e6:	4961      	ldr	r1, [pc, #388]	; (800086c <DisplayScreen+0x25c>)
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	440b      	add	r3, r1
 80006ec:	330c      	adds	r3, #12
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	21ff      	movs	r1, #255	; 0xff
 80006f2:	6938      	ldr	r0, [r7, #16]
 80006f4:	f7ff ff06 	bl	8000504 <OutputPaddedInteger>
				OutputString(DisplayLayoutPage1[i].unit, DisplayLayoutPage1[i].unit_xpos, DisplayLayoutPage1[i].ypos);
 80006f8:	7dfb      	ldrb	r3, [r7, #23]
 80006fa:	4a5c      	ldr	r2, [pc, #368]	; (800086c <DisplayScreen+0x25c>)
 80006fc:	011b      	lsls	r3, r3, #4
 80006fe:	4413      	add	r3, r2
 8000700:	3304      	adds	r3, #4
 8000702:	6818      	ldr	r0, [r3, #0]
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	4a59      	ldr	r2, [pc, #356]	; (800086c <DisplayScreen+0x25c>)
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	4413      	add	r3, r2
 800070c:	330b      	adds	r3, #11
 800070e:	7819      	ldrb	r1, [r3, #0]
 8000710:	7dfb      	ldrb	r3, [r7, #23]
 8000712:	4a56      	ldr	r2, [pc, #344]	; (800086c <DisplayScreen+0x25c>)
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	4413      	add	r3, r2
 8000718:	330c      	adds	r3, #12
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	f7ff fe69 	bl	80003f4 <OutputString>
			for (uint8_t i = 0; i < NUM_ROWS_PAGE1; i++) {
 8000722:	7dfb      	ldrb	r3, [r7, #23]
 8000724:	3301      	adds	r3, #1
 8000726:	75fb      	strb	r3, [r7, #23]
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	2b03      	cmp	r3, #3
 800072c:	d980      	bls.n	8000630 <DisplayScreen+0x20>
			break;
 800072e:	e094      	b.n	800085a <DisplayScreen+0x24a>
			for (uint8_t i = 0; i < NUM_ROWS_PAGE2; i++) {
 8000730:	2300      	movs	r3, #0
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	e08c      	b.n	8000850 <DisplayScreen+0x240>
				int32_t output = 0;			// Used to store the output data which will be displayed after the switch statement
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
				switch(i)
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d850      	bhi.n	80007e2 <DisplayScreen+0x1d2>
 8000740:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <DisplayScreen+0x138>)
 8000742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000746:	bf00      	nop
 8000748:	08000759 	.word	0x08000759
 800074c:	08000787 	.word	0x08000787
 8000750:	080007b5 	.word	0x080007b5
 8000754:	080007cd 	.word	0x080007cd
						convert.bytes[0] = DisplayDataArray[2].raw_data[0];
 8000758:	4b43      	ldr	r3, [pc, #268]	; (8000868 <DisplayScreen+0x258>)
 800075a:	7d9b      	ldrb	r3, [r3, #22]
 800075c:	b25b      	sxtb	r3, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	703b      	strb	r3, [r7, #0]
						convert.bytes[1] = DisplayDataArray[2].raw_data[1];
 8000762:	4b41      	ldr	r3, [pc, #260]	; (8000868 <DisplayScreen+0x258>)
 8000764:	7ddb      	ldrb	r3, [r3, #23]
 8000766:	b25b      	sxtb	r3, r3
 8000768:	b2db      	uxtb	r3, r3
 800076a:	707b      	strb	r3, [r7, #1]
						convert.bytes[2] = DisplayDataArray[2].raw_data[2];
 800076c:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <DisplayScreen+0x258>)
 800076e:	7e1b      	ldrb	r3, [r3, #24]
 8000770:	b25b      	sxtb	r3, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	70bb      	strb	r3, [r7, #2]
						convert.bytes[3] = DisplayDataArray[2].raw_data[3];
 8000776:	4b3c      	ldr	r3, [pc, #240]	; (8000868 <DisplayScreen+0x258>)
 8000778:	7e5b      	ldrb	r3, [r3, #25]
 800077a:	b25b      	sxtb	r3, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	70fb      	strb	r3, [r7, #3]
						output = convert.float_value;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	60bb      	str	r3, [r7, #8]
						break;
 8000784:	e02d      	b.n	80007e2 <DisplayScreen+0x1d2>
						convert.bytes[0] = DisplayDataArray[2].raw_data[0];
 8000786:	4b38      	ldr	r3, [pc, #224]	; (8000868 <DisplayScreen+0x258>)
 8000788:	7d9b      	ldrb	r3, [r3, #22]
 800078a:	b25b      	sxtb	r3, r3
 800078c:	b2db      	uxtb	r3, r3
 800078e:	703b      	strb	r3, [r7, #0]
						convert.bytes[1] = DisplayDataArray[2].raw_data[1];
 8000790:	4b35      	ldr	r3, [pc, #212]	; (8000868 <DisplayScreen+0x258>)
 8000792:	7ddb      	ldrb	r3, [r3, #23]
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	707b      	strb	r3, [r7, #1]
						convert.bytes[2] = DisplayDataArray[2].raw_data[2];
 800079a:	4b33      	ldr	r3, [pc, #204]	; (8000868 <DisplayScreen+0x258>)
 800079c:	7e1b      	ldrb	r3, [r3, #24]
 800079e:	b25b      	sxtb	r3, r3
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	70bb      	strb	r3, [r7, #2]
						convert.bytes[3] = DisplayDataArray[2].raw_data[3];
 80007a4:	4b30      	ldr	r3, [pc, #192]	; (8000868 <DisplayScreen+0x258>)
 80007a6:	7e5b      	ldrb	r3, [r3, #25]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	70fb      	strb	r3, [r7, #3]
						output = convert.float_value;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	60bb      	str	r3, [r7, #8]
						break;
 80007b2:	e016      	b.n	80007e2 <DisplayScreen+0x1d2>
						if (DisplayDataArray[4].raw_data[0] && 0B00000001)
 80007b4:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <DisplayScreen+0x258>)
 80007b6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <DisplayScreen+0x1b6>
							output = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
						break;
 80007c4:	e00d      	b.n	80007e2 <DisplayScreen+0x1d2>
							output = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
						break;
 80007ca:	e00a      	b.n	80007e2 <DisplayScreen+0x1d2>
						if (DisplayDataArray[0].raw_data[0] && 0B0000010)
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <DisplayScreen+0x258>)
 80007ce:	789b      	ldrb	r3, [r3, #2]
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <DisplayScreen+0x1cc>
							output = 1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	60bb      	str	r3, [r7, #8]
						break;
 80007da:	e001      	b.n	80007e0 <DisplayScreen+0x1d0>
							output = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
						break;
 80007e0:	bf00      	nop
				OutputString(DisplayLayoutPage2[i].name, 0,	DisplayLayoutPage2[i].ypos);
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	4a22      	ldr	r2, [pc, #136]	; (8000870 <DisplayScreen+0x260>)
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	4413      	add	r3, r2
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	4a20      	ldr	r2, [pc, #128]	; (8000870 <DisplayScreen+0x260>)
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	4413      	add	r3, r2
 80007f4:	330c      	adds	r3, #12
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f7ff fdfa 	bl	80003f4 <OutputString>
				OutputPaddedInteger(output, -1, DisplayLayoutPage2[i].data_xpos, DisplayLayoutPage2[i].ypos);
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <DisplayScreen+0x260>)
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	4413      	add	r3, r2
 8000808:	330a      	adds	r3, #10
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	4918      	ldr	r1, [pc, #96]	; (8000870 <DisplayScreen+0x260>)
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	440b      	add	r3, r1
 8000814:	330c      	adds	r3, #12
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	21ff      	movs	r1, #255	; 0xff
 800081a:	68b8      	ldr	r0, [r7, #8]
 800081c:	f7ff fe72 	bl	8000504 <OutputPaddedInteger>
				OutputString(DisplayLayoutPage2[i].unit, DisplayLayoutPage2[i].unit_xpos, DisplayLayoutPage2[i].ypos);
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <DisplayScreen+0x260>)
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	4413      	add	r3, r2
 8000828:	3304      	adds	r3, #4
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	4a10      	ldr	r2, [pc, #64]	; (8000870 <DisplayScreen+0x260>)
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	4413      	add	r3, r2
 8000834:	330b      	adds	r3, #11
 8000836:	7819      	ldrb	r1, [r3, #0]
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <DisplayScreen+0x260>)
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	4413      	add	r3, r2
 8000840:	330c      	adds	r3, #12
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	f7ff fdd5 	bl	80003f4 <OutputString>
			for (uint8_t i = 0; i < NUM_ROWS_PAGE2; i++) {
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	3301      	adds	r3, #1
 800084e:	73fb      	strb	r3, [r7, #15]
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b03      	cmp	r3, #3
 8000854:	f67f af6f 	bls.w	8000736 <DisplayScreen+0x126>
			break;
 8000858:	bf00      	nop
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000000 	.word	0x20000000
 8000868:	20000084 	.word	0x20000084
 800086c:	20000004 	.word	0x20000004
 8000870:	20000044 	.word	0x20000044

08000874 <WriteByteToDataBus>:
/**
 * Write a byte of data through C3 to C10(Data Buses)
 * @Param byte: 1 byte code
 * Returns: nothing
 */
void WriteByteToDataBus(uint8_t byte) {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = byte << 3;
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	00da      	lsls	r2, r3, #3
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <WriteByteToDataBus+0x28>)
 8000884:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = ((uint8_t) (~byte)) << 3;
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	43db      	mvns	r3, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	00da      	lsls	r2, r3, #3
 800088e:	4b03      	ldr	r3, [pc, #12]	; (800089c <WriteByteToDataBus+0x28>)
 8000890:	615a      	str	r2, [r3, #20]
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	40011000 	.word	0x40011000

080008a0 <TransmitCommand>:
/**
 * Writes a byte of command code through ports C3 to C10(Data Buses)
 * @Param command_code: 1 byte command code
 * returns: nothing
 */
void TransmitCommand(uint8_t command_code) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = 0x1UL << 0;                   //SET C0 to HIGH
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <TransmitCommand+0x38>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = 0x1UL << 1;                    //SET C1 to LOW
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <TransmitCommand+0x38>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(command_code);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ffdb 	bl	8000874 <WriteByteToDataBus>
	MicrosecondDelay(1);
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff fcd4 	bl	800026c <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;                   //SET C1 to HIGH
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <TransmitCommand+0x38>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff fcce 	bl	800026c <MicrosecondDelay>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40011000 	.word	0x40011000

080008dc <TransmitCommandParameter>:
/**
 * Writes a byte of parameter code through ports C3 to C10(Data Buses)
 * @Param parameter_code: 1 byte parameter code
 * returns: nothing
 */
void TransmitCommandParameter(uint8_t parameter_code) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	GPIOC->BRR = 0x1UL << 0;                    //SET C0 to LOW
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <TransmitCommandParameter+0x38>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	615a      	str	r2, [r3, #20]
	GPIOC->BRR = 0x1UL << 1;                    //SET C1 to LOW
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <TransmitCommandParameter+0x38>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(parameter_code);
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ffbd 	bl	8000874 <WriteByteToDataBus>
	MicrosecondDelay(1);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff fcb6 	bl	800026c <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;                   //SET C1 to HIGH
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <TransmitCommandParameter+0x38>)
 8000902:	2202      	movs	r2, #2
 8000904:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff fcb0 	bl	800026c <MicrosecondDelay>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40011000 	.word	0x40011000

08000918 <ScreenSetup>:
}

/**
 * Initialise screen settings and character bit maps
 */
void ScreenSetup(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	// system setup (section 6-2-1 on raio datasheet)
	TransmitCommand(0x40);
 800091c:	2040      	movs	r0, #64	; 0x40
 800091e:	f7ff ffbf 	bl	80008a0 <TransmitCommand>
	Delay(5);
 8000922:	2005      	movs	r0, #5
 8000924:	f7ff fc84 	bl	8000230 <Delay>
	// 0 0 IV 1 W/S M2 M1 M0
	TransmitCommandParameter(0x34);
 8000928:	2034      	movs	r0, #52	; 0x34
 800092a:	f7ff ffd7 	bl	80008dc <TransmitCommandParameter>
	// WF 0 0 0 0 FX FX FX
	TransmitCommandParameter(0x87);
 800092e:	2087      	movs	r0, #135	; 0x87
 8000930:	f7ff ffd4 	bl	80008dc <TransmitCommandParameter>
	// 0 0 0 0 FY FY FY FY
	TransmitCommandParameter(0xF);
 8000934:	200f      	movs	r0, #15
 8000936:	f7ff ffd1 	bl	80008dc <TransmitCommandParameter>
	// C/R (horizontal bytes per line)
	TransmitCommandParameter(39);
 800093a:	2027      	movs	r0, #39	; 0x27
 800093c:	f7ff ffce 	bl	80008dc <TransmitCommandParameter>
	// TC/R (horizontal bytes per line, incl blanking)
	TransmitCommandParameter(47);
 8000940:	202f      	movs	r0, #47	; 0x2f
 8000942:	f7ff ffcb 	bl	80008dc <TransmitCommandParameter>
	// L/F (lines per frame)
	TransmitCommandParameter(239);
 8000946:	20ef      	movs	r0, #239	; 0xef
 8000948:	f7ff ffc8 	bl	80008dc <TransmitCommandParameter>
	// APL (horizontal address range, LSB)
	TransmitCommandParameter(40);
 800094c:	2028      	movs	r0, #40	; 0x28
 800094e:	f7ff ffc5 	bl	80008dc <TransmitCommandParameter>
	// APH (horizontal address range, MSB)
	TransmitCommandParameter(0);
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff ffc2 	bl	80008dc <TransmitCommandParameter>

	// scroll parameters
	TransmitCommand(0x44);
 8000958:	2044      	movs	r0, #68	; 0x44
 800095a:	f7ff ffa1 	bl	80008a0 <TransmitCommand>
	TransmitCommandParameter(0); // SAD 1L
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ffbc 	bl	80008dc <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 1H
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff ffb9 	bl	80008dc <TransmitCommandParameter>
	TransmitCommandParameter(240); // SL1
 800096a:	20f0      	movs	r0, #240	; 0xf0
 800096c:	f7ff ffb6 	bl	80008dc <TransmitCommandParameter>
	TransmitCommandParameter(176); // SAD 2L
 8000970:	20b0      	movs	r0, #176	; 0xb0
 8000972:	f7ff ffb3 	bl	80008dc <TransmitCommandParameter>
	TransmitCommandParameter(4); // SAD 2H
 8000976:	2004      	movs	r0, #4
 8000978:	f7ff ffb0 	bl	80008dc <TransmitCommandParameter>
	TransmitCommandParameter(240); // SL2
 800097c:	20f0      	movs	r0, #240	; 0xf0
 800097e:	f7ff ffad 	bl	80008dc <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 3L
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff ffaa 	bl	80008dc <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 3H
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff ffa7 	bl	80008dc <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 4
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff ffa4 	bl	80008dc <TransmitCommandParameter>
	TransmitCommandParameter(0); // SAD 4
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ffa1 	bl	80008dc <TransmitCommandParameter>

	TransmitCommand(0x5B);
 800099a:	205b      	movs	r0, #91	; 0x5b
 800099c:	f7ff ff80 	bl	80008a0 <TransmitCommand>
	TransmitCommandParameter(0);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff9b 	bl	80008dc <TransmitCommandParameter>

	// set horizontal scroll position
	TransmitCommand(0x5A);
 80009a6:	205a      	movs	r0, #90	; 0x5a
 80009a8:	f7ff ff7a 	bl	80008a0 <TransmitCommand>
	TransmitCommandParameter(0);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff ff95 	bl	80008dc <TransmitCommandParameter>

	// set display overlay format
	TransmitCommand(0x5B);
 80009b2:	205b      	movs	r0, #91	; 0x5b
 80009b4:	f7ff ff74 	bl	80008a0 <TransmitCommand>
	TransmitCommandParameter(0);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff ff8f 	bl	80008dc <TransmitCommandParameter>

	// turn off the display and configure cursor
	TransmitCommand(0x58);
 80009be:	2058      	movs	r0, #88	; 0x58
 80009c0:	f7ff ff6e 	bl	80008a0 <TransmitCommand>
	TransmitCommandParameter(0x57);
 80009c4:	2057      	movs	r0, #87	; 0x57
 80009c6:	f7ff ff89 	bl	80008dc <TransmitCommandParameter>

	// set cursor size & type
	TransmitCommand(0x5D);
 80009ca:	205d      	movs	r0, #93	; 0x5d
 80009cc:	f7ff ff68 	bl	80008a0 <TransmitCommand>
	TransmitCommandParameter(4);
 80009d0:	2004      	movs	r0, #4
 80009d2:	f7ff ff83 	bl	80008dc <TransmitCommandParameter>
	TransmitCommandParameter(0x84);
 80009d6:	2084      	movs	r0, #132	; 0x84
 80009d8:	f7ff ff80 	bl	80008dc <TransmitCommandParameter>

	// set cursor direction
	TransmitCommand(0x4C);
 80009dc:	204c      	movs	r0, #76	; 0x4c
 80009de:	f7ff ff5f 	bl	80008a0 <TransmitCommand>

	// turn on the display and configure cursor
	TransmitCommand(0x59);
 80009e2:	2059      	movs	r0, #89	; 0x59
 80009e4:	f7ff ff5c 	bl	80008a0 <TransmitCommand>
	TransmitCommandParameter(0x7);
 80009e8:	2007      	movs	r0, #7
 80009ea:	f7ff ff77 	bl	80008dc <TransmitCommandParameter>

	CharacterBitMaps();
 80009ee:	f7ff fcc7 	bl	8000380 <CharacterBitMaps>

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <CanFilterSetup>:
/**
 * @brief Initialize CAN node for sending and receiving
 * @param: CAN filter structure
 * @retval: nothing
 */
void CanFilterSetup() {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	// Use mask and list mode to filter IDs from the CAN ID BOM

	// Filter for 0x500 and 0x600 IDs
	CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <CanFilterSetup+0x94>)
 80009fe:	f24a 0220 	movw	r2, #40992	; 0xa020
 8000a02:	601a      	str	r2, [r3, #0]
	CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 8000a04:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <CanFilterSetup+0x94>)
 8000a06:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 8000a0a:	609a      	str	r2, [r3, #8]

	CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <CanFilterSetup+0x94>)
 8000a0e:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 8000a12:	605a      	str	r2, [r3, #4]
	CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <CanFilterSetup+0x94>)
 8000a16:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000a1a:	60da      	str	r2, [r3, #12]

	CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <CanFilterSetup+0x94>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
	CAN_filter0.FilterBank = (uint32_t) 0;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <CanFilterSetup+0x94>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
	CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <CanFilterSetup+0x94>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
	CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <CanFilterSetup+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
	CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <CanFilterSetup+0x94>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	621a      	str	r2, [r3, #32]

	// Remaining IDs filtered with list mode
	CAN_filter1.FilterIdHigh = (uint16_t) (0x401 << 5);
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <CanFilterSetup+0x98>)
 8000a3c:	f248 0220 	movw	r2, #32800	; 0x8020
 8000a40:	601a      	str	r2, [r3, #0]
	CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <CanFilterSetup+0x98>)
 8000a44:	f248 0220 	movw	r2, #32800	; 0x8020
 8000a48:	609a      	str	r2, [r3, #8]

	CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <CanFilterSetup+0x98>)
 8000a4c:	f248 0220 	movw	r2, #32800	; 0x8020
 8000a50:	605a      	str	r2, [r3, #4]
	CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <CanFilterSetup+0x98>)
 8000a54:	f248 0220 	movw	r2, #32800	; 0x8020
 8000a58:	60da      	str	r2, [r3, #12]

	CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <CanFilterSetup+0x98>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
	CAN_filter1.FilterBank = (uint32_t) 1;
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <CanFilterSetup+0x98>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	615a      	str	r2, [r3, #20]
	CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <CanFilterSetup+0x98>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	619a      	str	r2, [r3, #24]
	CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <CanFilterSetup+0x98>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
	CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <CanFilterSetup+0x98>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	621a      	str	r2, [r3, #32]

	// Configure reception filters
	HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 8000a78:	4904      	ldr	r1, [pc, #16]	; (8000a8c <CanFilterSetup+0x94>)
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <CanFilterSetup+0x9c>)
 8000a7c:	f000 fcd1 	bl	8001422 <HAL_CAN_ConfigFilter>
	HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 8000a80:	4903      	ldr	r1, [pc, #12]	; (8000a90 <CanFilterSetup+0x98>)
 8000a82:	4804      	ldr	r0, [pc, #16]	; (8000a94 <CanFilterSetup+0x9c>)
 8000a84:	f000 fccd 	bl	8001422 <HAL_CAN_ConfigFilter>

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20001c44 	.word	0x20001c44
 8000a90:	20001c1c 	.word	0x20001c1c
 8000a94:	20001bd4 	.word	0x20001bd4

08000a98 <MX_CAN_Init>:
/* USER CODE END 0 */

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_CAN_Init+0x64>)
 8000a9e:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <MX_CAN_Init+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 12;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_CAN_Init+0x64>)
 8000aa4:	220c      	movs	r2, #12
 8000aa6:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_CAN_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_CAN_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_CAN_Init+0x64>)
 8000ab6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000aba:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_CAN_Init+0x64>)
 8000abe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ac2:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <MX_CAN_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_CAN_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_CAN_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_CAN_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <MX_CAN_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_CAN_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_CAN_Init+0x64>)
 8000aea:	f000 fb9f 	bl	800122c <HAL_CAN_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_CAN_Init+0x60>
		Error_Handler();
 8000af4:	f000 fa7e 	bl	8000ff4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20001bd4 	.word	0x20001bd4
 8000b00:	40006400 	.word	0x40006400

08000b04 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN1) {
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a29      	ldr	r2, [pc, #164]	; (8000bc4 <HAL_CAN_MspInit+0xc0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d14b      	bne.n	8000bbc <HAL_CAN_MspInit+0xb8>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		__HAL_RCC_CAN1_CLK_ENABLE();
 8000b24:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <HAL_CAN_MspInit+0xc4>)
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	4a27      	ldr	r2, [pc, #156]	; (8000bc8 <HAL_CAN_MspInit+0xc4>)
 8000b2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2e:	61d3      	str	r3, [r2, #28]
 8000b30:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <HAL_CAN_MspInit+0xc4>)
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <HAL_CAN_MspInit+0xc4>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <HAL_CAN_MspInit+0xc4>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <HAL_CAN_MspInit+0xc4>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
		/**CAN GPIO Configuration
		 PB8     ------> CAN_RX
		 PB9     ------> CAN_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b58:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4818      	ldr	r0, [pc, #96]	; (8000bcc <HAL_CAN_MspInit+0xc8>)
 8000b6a:	f001 f9a3 	bl	8001eb4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b72:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4812      	ldr	r0, [pc, #72]	; (8000bcc <HAL_CAN_MspInit+0xc8>)
 8000b84:	f001 f996 	bl	8001eb4 <HAL_GPIO_Init>

		__HAL_AFIO_REMAP_CAN1_2();
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_CAN_MspInit+0xcc>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_CAN_MspInit+0xcc>)
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	6053      	str	r3, [r2, #4]

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2105      	movs	r1, #5
 8000bb0:	2014      	movs	r0, #20
 8000bb2:	f001 f954 	bl	8001e5e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000bb6:	2014      	movs	r0, #20
 8000bb8:	f001 f96d 	bl	8001e96 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN CAN1_MspInit 1 */

		/* USER CODE END CAN1_MspInit 1 */
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40006400 	.word	0x40006400
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	40010000 	.word	0x40010000

08000bd4 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0

	messageReceiveHandle = osThreadNew(messageReceiveTask, NULL,
 8000bd8:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <MX_FREERTOS_Init+0x64>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4817      	ldr	r0, [pc, #92]	; (8000c3c <MX_FREERTOS_Init+0x68>)
 8000bde:	f002 fa21 	bl	8003024 <osThreadNew>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a16      	ldr	r2, [pc, #88]	; (8000c40 <MX_FREERTOS_Init+0x6c>)
 8000be6:	6013      	str	r3, [r2, #0]
			&messageReceive_attributes);

	updateDisplayHandle = osThreadNew(updateDisplayTask, NULL,
 8000be8:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <MX_FREERTOS_Init+0x70>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4816      	ldr	r0, [pc, #88]	; (8000c48 <MX_FREERTOS_Init+0x74>)
 8000bee:	f002 fa19 	bl	8003024 <osThreadNew>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <MX_FREERTOS_Init+0x78>)
 8000bf6:	6013      	str	r3, [r2, #0]
			&updateDisplay_attributes);

	updateEventFlagHandle = osThreadNew(updateEventFlagsTask, NULL,
 8000bf8:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <MX_FREERTOS_Init+0x7c>)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4815      	ldr	r0, [pc, #84]	; (8000c54 <MX_FREERTOS_Init+0x80>)
 8000bfe:	f002 fa11 	bl	8003024 <osThreadNew>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <MX_FREERTOS_Init+0x84>)
 8000c06:	6013      	str	r3, [r2, #0]
			&updateEventFlag_attributes);

	pageChangeHandle = osThreadNew(pageChangeTask, NULL,
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <MX_FREERTOS_Init+0x88>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4814      	ldr	r0, [pc, #80]	; (8000c60 <MX_FREERTOS_Init+0x8c>)
 8000c0e:	f002 fa09 	bl	8003024 <osThreadNew>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <MX_FREERTOS_Init+0x90>)
 8000c16:	6013      	str	r3, [r2, #0]
			&pageChange_attributes);

	pageTimeoutHandle = osThreadNew(pageTimeoutTask, NULL,
 8000c18:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <MX_FREERTOS_Init+0x94>)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4813      	ldr	r0, [pc, #76]	; (8000c6c <MX_FREERTOS_Init+0x98>)
 8000c1e:	f002 fa01 	bl	8003024 <osThreadNew>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <MX_FREERTOS_Init+0x9c>)
 8000c26:	6013      	str	r3, [r2, #0]
			&pageTimeout_attributes);

	stateEventFlagsHandle = osEventFlagsNew(&stateEventFlags_attributes);
 8000c28:	4812      	ldr	r0, [pc, #72]	; (8000c74 <MX_FREERTOS_Init+0xa0>)
 8000c2a:	f002 fad3 	bl	80031d4 <osEventFlagsNew>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <MX_FREERTOS_Init+0xa4>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	0800654c 	.word	0x0800654c
 8000c3c:	08000c7d 	.word	0x08000c7d
 8000c40:	20001c14 	.word	0x20001c14
 8000c44:	08006570 	.word	0x08006570
 8000c48:	08000d3d 	.word	0x08000d3d
 8000c4c:	20001c0c 	.word	0x20001c0c
 8000c50:	08006594 	.word	0x08006594
 8000c54:	08000d71 	.word	0x08000d71
 8000c58:	20001c10 	.word	0x20001c10
 8000c5c:	080065b8 	.word	0x080065b8
 8000c60:	08000ded 	.word	0x08000ded
 8000c64:	20001c08 	.word	0x20001c08
 8000c68:	080065dc 	.word	0x080065dc
 8000c6c:	08000e11 	.word	0x08000e11
 8000c70:	20001bfc 	.word	0x20001bfc
 8000c74:	08006600 	.word	0x08006600
 8000c78:	20001c00 	.word	0x20001c00

08000c7c <messageReceiveTask>:
/**
 * @brief  Reads CAN message ID received and updates the corresponding structure for the global data array.
 *         Currently, parses the data for specific IDs that require manipulation of the rx_data.
 */
/* USER CODE END Header_messageReceiveTask */
void messageReceiveTask(void *argument) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN messageReceiveTask */
	uint8_t CAN_rx_data[8];
	while (1) {
		// Wait for the CAN FIFO0 interrupt to invoke and set the event flag

		osEventFlagsWait(stateEventFlagsHandle, MESSAGE_RECEIVE, osFlagsWaitAll,
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <messageReceiveTask+0xac>)
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2101      	movs	r1, #1
 8000c90:	f002 fb4a 	bl	8003328 <osEventFlagsWait>
				osWaitForever);

		// Check if message is available
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 8000c94:	2100      	movs	r1, #0
 8000c96:	4825      	ldr	r0, [pc, #148]	; (8000d2c <messageReceiveTask+0xb0>)
 8000c98:	f000 fde1 	bl	800185e <HAL_CAN_GetRxFifoFillLevel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d03d      	beq.n	8000d1e <messageReceiveTask+0xa2>
			// Populate CAN header and data variables
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &CAN_rx_header, CAN_rx_data);
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <messageReceiveTask+0xb4>)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4820      	ldr	r0, [pc, #128]	; (8000d2c <messageReceiveTask+0xb0>)
 8000cac:	f000 fcc6 	bl	800163c <HAL_CAN_GetRxMessage>

			// Find the matching data that needs to be updated
			for (uint8_t struct_index = 0; struct_index < NUM_CAN_IDS; struct_index++) {
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	75fb      	strb	r3, [r7, #23]
 8000cb4:	e02a      	b.n	8000d0c <messageReceiveTask+0x90>
				if (DisplayDataArray[struct_index].can_id == CAN_rx_header.StdId) {
 8000cb6:	7dfa      	ldrb	r2, [r7, #23]
 8000cb8:	491e      	ldr	r1, [pc, #120]	; (8000d34 <messageReceiveTask+0xb8>)
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	440b      	add	r3, r1
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <messageReceiveTask+0xb4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d11a      	bne.n	8000d06 <messageReceiveTask+0x8a>
					for (int data_index = 0; data_index < 8; data_index++) {
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	e014      	b.n	8000d00 <messageReceiveTask+0x84>
						DisplayDataArray[struct_index].raw_data[data_index] = CAN_rx_data[data_index];
 8000cd6:	f107 0208 	add.w	r2, r7, #8
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4413      	add	r3, r2
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	7dfa      	ldrb	r2, [r7, #23]
 8000ce2:	b258      	sxtb	r0, r3
 8000ce4:	4913      	ldr	r1, [pc, #76]	; (8000d34 <messageReceiveTask+0xb8>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	18ca      	adds	r2, r1, r3
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	701a      	strb	r2, [r3, #0]
					for (int data_index = 0; data_index < 8; data_index++) {
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	2b07      	cmp	r3, #7
 8000d04:	dde7      	ble.n	8000cd6 <messageReceiveTask+0x5a>
			for (uint8_t struct_index = 0; struct_index < NUM_CAN_IDS; struct_index++) {
 8000d06:	7dfb      	ldrb	r3, [r7, #23]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	75fb      	strb	r3, [r7, #23]
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d9d1      	bls.n	8000cb6 <messageReceiveTask+0x3a>
					}
				}
			}

			// Set event flag to run the updateDisplay task
			event_flags.update_display = 0x01;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <messageReceiveTask+0xbc>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	705a      	strb	r2, [r3, #1]

			// Reset the event flag after the task has finished
			event_flags.message_receive = 0x00;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <messageReceiveTask+0xbc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
		}
		osDelay(MESSAGE_RECEIVE_TASK_DELAY);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f002 fa2a 	bl	8003178 <osDelay>
		osEventFlagsWait(stateEventFlagsHandle, MESSAGE_RECEIVE, osFlagsWaitAll,
 8000d24:	e7ae      	b.n	8000c84 <messageReceiveTask+0x8>
 8000d26:	bf00      	nop
 8000d28:	20001c00 	.word	0x20001c00
 8000d2c:	20001bd4 	.word	0x20001bd4
 8000d30:	20001c6c 	.word	0x20001c6c
 8000d34:	20000084 	.word	0x20000084
 8000d38:	20001c18 	.word	0x20001c18

08000d3c <updateDisplayTask>:
/* USER CODE BEGIN Header_updateDisplayTask */
/**
 * @brief 	Updates the display. Only called after new data has been received
 */
/* USER CODE END Header_updateDisplayTask */
void updateDisplayTask(void *argument) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN updateDisplayTask */
	while (1) {
		// Wait for the CAN FIFO0 interrupt to invoke and set the event flag

		osEventFlagsWait(stateEventFlagsHandle, UPDATE_DISPLAY, osFlagsWaitAll,
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <updateDisplayTask+0x2c>)
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2102      	movs	r1, #2
 8000d50:	f002 faea 	bl	8003328 <osEventFlagsWait>
		osWaitForever);

		DisplayScreen();
 8000d54:	f7ff fc5c 	bl	8000610 <DisplayScreen>

		// Reset the event flag after the task has finished
		event_flags.update_display = 0x00;
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <updateDisplayTask+0x30>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	705a      	strb	r2, [r3, #1]

		osDelay(UPDATE_DISPLAY_TASK_DELAY);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f002 fa0a 	bl	8003178 <osDelay>
		osEventFlagsWait(stateEventFlagsHandle, UPDATE_DISPLAY, osFlagsWaitAll,
 8000d64:	e7ee      	b.n	8000d44 <updateDisplayTask+0x8>
 8000d66:	bf00      	nop
 8000d68:	20001c00 	.word	0x20001c00
 8000d6c:	20001c18 	.word	0x20001c18

08000d70 <updateEventFlagsTask>:
/* USER CODE BEGIN Header_updateEventFlagsTask */
/**
 * @brief 	Sets the display state event flag based on the event_flags value
 */
/* USER CODE END Header_updateEventFlagsTask */
void updateEventFlagsTask(void *argument) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN updateEventFlagsTask */
	while (1) {
		if (event_flags.message_receive) {
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <updateEventFlagsTask+0x70>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <updateEventFlagsTask+0x1a>
			state = MESSAGE_RECEIVE;
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <updateEventFlagsTask+0x74>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e01d      	b.n	8000dc6 <updateEventFlagsTask+0x56>
		} else if (event_flags.update_display) {
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <updateEventFlagsTask+0x70>)
 8000d8c:	785b      	ldrb	r3, [r3, #1]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <updateEventFlagsTask+0x2c>
			state = UPDATE_DISPLAY;
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <updateEventFlagsTask+0x74>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	e014      	b.n	8000dc6 <updateEventFlagsTask+0x56>
		} else if (event_flags.page_change) {
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <updateEventFlagsTask+0x70>)
 8000d9e:	789b      	ldrb	r3, [r3, #2]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <updateEventFlagsTask+0x3e>
			state = PAGE_CHANGE;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <updateEventFlagsTask+0x74>)
 8000da8:	2204      	movs	r2, #4
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	e00b      	b.n	8000dc6 <updateEventFlagsTask+0x56>
		} else if (event_flags.page_timeout) {
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <updateEventFlagsTask+0x70>)
 8000db0:	78db      	ldrb	r3, [r3, #3]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <updateEventFlagsTask+0x50>
			state = PAGE_TIMEOUT;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <updateEventFlagsTask+0x74>)
 8000dba:	2208      	movs	r2, #8
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	e002      	b.n	8000dc6 <updateEventFlagsTask+0x56>
		} else {
			state = IDLE;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <updateEventFlagsTask+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
		}

		osEventFlagsSet(stateEventFlagsHandle, state);
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <updateEventFlagsTask+0x78>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <updateEventFlagsTask+0x74>)
 8000dcc:	7812      	ldrb	r2, [r2, #0]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 fa51 	bl	8003278 <osEventFlagsSet>

		osDelay(UPDATE_EVENT_FLAGS_TASK_DELAY);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f002 f9ce 	bl	8003178 <osDelay>
		if (event_flags.message_receive) {
 8000ddc:	e7cc      	b.n	8000d78 <updateEventFlagsTask+0x8>
 8000dde:	bf00      	nop
 8000de0:	20001c18 	.word	0x20001c18
 8000de4:	20001c04 	.word	0x20001c04
 8000de8:	20001c00 	.word	0x20001c00

08000dec <pageChangeTask>:
/**
 * @brief   Changes the page number when the dashboard button is pressed.
 *          The button press will be recognized via a CAN message.
 */
/* USER CODE END Header_pageChangeTask */
void pageChangeTask(void *argument) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN pageChangeTask */
	while (1) {
		osEventFlagsWait(stateEventFlagsHandle, PAGE_CHANGE, osFlagsWaitAll,
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <pageChangeTask+0x20>)
 8000df6:	6818      	ldr	r0, [r3, #0]
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2104      	movs	r1, #4
 8000e00:	f002 fa92 	bl	8003328 <osEventFlagsWait>
		osWaitForever);

		osDelay(PAGE_CHANGE_TASK_DELAY);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f002 f9b7 	bl	8003178 <osDelay>
		osEventFlagsWait(stateEventFlagsHandle, PAGE_CHANGE, osFlagsWaitAll,
 8000e0a:	e7f3      	b.n	8000df4 <pageChangeTask+0x8>
 8000e0c:	20001c00 	.word	0x20001c00

08000e10 <pageTimeoutTask>:
/* USER CODE BEGIN Header_pageTimeoutTask */
/**
 * @brief   Returns to page 1 after spending a set time on any other page
 */
/* USER CODE END Header_pageTimeoutTask */
void pageTimeoutTask(void *argument) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN pageTimeoutTask */
	while (1) {
		osEventFlagsWait(stateEventFlagsHandle, PAGE_TIMEOUT, osFlagsWaitAll,
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <pageTimeoutTask+0x20>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	2201      	movs	r2, #1
 8000e22:	2108      	movs	r1, #8
 8000e24:	f002 fa80 	bl	8003328 <osEventFlagsWait>
		osWaitForever);

		osDelay(PAGE_TIMEOUT_TASK_DELAY);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f002 f9a5 	bl	8003178 <osDelay>
		osEventFlagsWait(stateEventFlagsHandle, PAGE_TIMEOUT, osFlagsWaitAll,
 8000e2e:	e7f3      	b.n	8000e18 <pageTimeoutTask+0x8>
 8000e30:	20001c00 	.word	0x20001c00

08000e34 <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <MX_GPIO_Init+0xb4>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a26      	ldr	r2, [pc, #152]	; (8000ee8 <MX_GPIO_Init+0xb4>)
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <MX_GPIO_Init+0xb4>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <MX_GPIO_Init+0xb4>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a20      	ldr	r2, [pc, #128]	; (8000ee8 <MX_GPIO_Init+0xb4>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_GPIO_Init+0xb4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MX_GPIO_Init+0xb4>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ee8 <MX_GPIO_Init+0xb4>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <MX_GPIO_Init+0xb4>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8000e90:	2200      	movs	r2, #0
 8000e92:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000e96:	4815      	ldr	r0, [pc, #84]	; (8000eec <MX_GPIO_Init+0xb8>)
 8000e98:	f001 f9a0 	bl	80021dc <HAL_GPIO_WritePin>
			A0_Pin | WR_Pin | RD_Pin | DB0_Pin | DB1_Pin | DB2_Pin | DB3_Pin
					| DB4_Pin | DB5_Pin | DB6_Pin | DB7_Pin | CS_Pin | RES_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(A6_GPIO_Port, A6_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2140      	movs	r1, #64	; 0x40
 8000ea0:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <MX_GPIO_Init+0xbc>)
 8000ea2:	f001 f99b 	bl	80021dc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PCPin PCPin PCPin PCPin
	 PCPin PCPin PCPin PCPin
	 PCPin PCPin PCPin PCPin
	 PCPin */
	GPIO_InitStruct.Pin =
 8000ea6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000eaa:	613b      	str	r3, [r7, #16]
	A0_Pin | WR_Pin | RD_Pin | DB0_Pin | DB1_Pin | DB2_Pin | DB3_Pin | DB4_Pin
			| DB5_Pin | DB6_Pin | DB7_Pin | CS_Pin | RES_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480b      	ldr	r0, [pc, #44]	; (8000eec <MX_GPIO_Init+0xb8>)
 8000ec0:	f000 fff8 	bl	8001eb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = A6_Pin;
 8000ec4:	2340      	movs	r3, #64	; 0x40
 8000ec6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(A6_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_GPIO_Init+0xbc>)
 8000edc:	f000 ffea 	bl	8001eb4 <HAL_GPIO_Init>

}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40011000 	.word	0x40011000
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	// Set message flag to 1 so that the update display task can execute
	event_flags.message_receive = 0x01;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	20001c18 	.word	0x20001c18

08000f10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f14:	f000 f958 	bl	80011c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f18:	f000 f818 	bl	8000f4c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f1c:	f7ff ff8a 	bl	8000e34 <MX_GPIO_Init>
	MX_CAN_Init();
 8000f20:	f7ff fdba 	bl	8000a98 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */

	// CAN Initialization
	CanFilterSetup();
 8000f24:	f7ff fd68 	bl	80009f8 <CanFilterSetup>
	HAL_CAN_Start(&hcan);
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <main+0x38>)
 8000f2a:	f000 fb43 	bl	80015b4 <HAL_CAN_Start>

	// Display startup screen
	ScreenSetup();
 8000f2e:	f7ff fcf3 	bl	8000918 <ScreenSetup>
	ClearScreen();
 8000f32:	f7ff f9de 	bl	80002f2 <ClearScreen>
	DisplayScreen();
 8000f36:	f7ff fb6b 	bl	8000610 <DisplayScreen>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 8000f3a:	f002 f80d 	bl	8002f58 <osKernelInitialize>
	MX_FREERTOS_Init();
 8000f3e:	f7ff fe49 	bl	8000bd4 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8000f42:	f002 f83b 	bl	8002fbc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f46:	e7fe      	b.n	8000f46 <main+0x36>
 8000f48:	20001bd4 	.word	0x20001bd4

08000f4c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b090      	sub	sp, #64	; 0x40
 8000f50:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f52:	f107 0318 	add.w	r3, r7, #24
 8000f56:	2228      	movs	r2, #40	; 0x28
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f005 f91a 	bl	8006194 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f72:	2301      	movs	r3, #1
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f76:	2310      	movs	r3, #16
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f82:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 f93d 	bl	800220c <HAL_RCC_OscConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x50>
		Error_Handler();
 8000f98:	f000 f82c 	bl	8000ff4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fac:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fba8 	bl	800270c <HAL_RCC_ClockConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x7a>
		Error_Handler();
 8000fc2:	f000 f817 	bl	8000ff4 <Error_Handler>
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3740      	adds	r7, #64	; 0x40
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM8) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000fe2:	f000 f907 	bl	80011f4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40013400 	.word	0x40013400

08000ff4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
}
 8000ffa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ffc:	e7fe      	b.n	8000ffc <Error_Handler+0x8>
	...

08001000 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE();
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_MspInit+0x68>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <HAL_MspInit+0x68>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6193      	str	r3, [r2, #24]
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_MspInit+0x68>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_MspInit+0x68>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a11      	ldr	r2, [pc, #68]	; (8001068 <HAL_MspInit+0x68>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_MspInit+0x68>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	210f      	movs	r1, #15
 800103a:	f06f 0001 	mvn.w	r0, #1
 800103e:	f000 ff0e 	bl	8001e5e <HAL_NVIC_SetPriority>

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_MspInit+0x6c>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_MspInit+0x6c>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000

08001070 <HAL_InitTick>:
 * @note   This function is called  automatically at the beginning of program after
 *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
 * @param  TickPriority: Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	RCC_ClkInitTypeDef clkconfig;
	uint32_t uwTimclock = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t uwPrescalerValue = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pFLatency;
	/*Configure the TIM8 IRQ priority */
	HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	202c      	movs	r0, #44	; 0x2c
 8001086:	f000 feea 	bl	8001e5e <HAL_NVIC_SetPriority>

	/* Enable the TIM8 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 800108a:	202c      	movs	r0, #44	; 0x2c
 800108c:	f000 ff03 	bl	8001e96 <HAL_NVIC_EnableIRQ>
	/* Enable TIM8 clock */
	__HAL_RCC_TIM8_CLK_ENABLE();
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <HAL_InitTick+0x9c>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a1d      	ldr	r2, [pc, #116]	; (800110c <HAL_InitTick+0x9c>)
 8001096:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_InitTick+0x9c>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

	/* Get clock configuration */
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010a8:	f107 0210 	add.w	r2, r7, #16
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 fc92 	bl	80029dc <HAL_RCC_GetClockConfig>

	/* Compute TIM8 clock */
	uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010b8:	f001 fc7c 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 80010bc:	62f8      	str	r0, [r7, #44]	; 0x2c
	/* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c0:	4a13      	ldr	r2, [pc, #76]	; (8001110 <HAL_InitTick+0xa0>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0c9b      	lsrs	r3, r3, #18
 80010c8:	3b01      	subs	r3, #1
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Initialize TIM8 */
	htim8.Instance = TIM8;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_InitTick+0xa4>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <HAL_InitTick+0xa8>)
 80010d0:	601a      	str	r2, [r3, #0]
	 + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
	 + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
	 + ClockDivision = 0
	 + Counter direction = Up
	 */
	htim8.Init.Period = (1000000U / 1000U) - 1U;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <HAL_InitTick+0xa4>)
 80010d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d8:	60da      	str	r2, [r3, #12]
	htim8.Init.Prescaler = uwPrescalerValue;
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_InitTick+0xa4>)
 80010dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010de:	6053      	str	r3, [r2, #4]
	htim8.Init.ClockDivision = 0;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_InitTick+0xa4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_InitTick+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
	if (HAL_TIM_Base_Init(&htim8) == HAL_OK) {
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <HAL_InitTick+0xa4>)
 80010ee:	f001 fcc3 	bl	8002a78 <HAL_TIM_Base_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d104      	bne.n	8001102 <HAL_InitTick+0x92>
		/* Start the TIM time Base generation in interrupt mode */
		return HAL_TIM_Base_Start_IT(&htim8);
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <HAL_InitTick+0xa4>)
 80010fa:	f001 fd15 	bl	8002b28 <HAL_TIM_Base_Start_IT>
 80010fe:	4603      	mov	r3, r0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x94>
	}

	/* Return function status */
	return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3730      	adds	r7, #48	; 0x30
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40021000 	.word	0x40021000
 8001110:	431bde83 	.word	0x431bde83
 8001114:	20001c88 	.word	0x20001c88
 8001118:	40013400 	.word	0x40013400

0800111c <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001120:	e7fe      	b.n	8001120 <NMI_Handler+0x4>

08001122 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 800112c:	e7fe      	b.n	800112c <MemManage_Handler+0x4>

0800112e <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001132:	e7fe      	b.n	8001132 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001138:	e7fe      	b.n	8001138 <UsageFault_Handler+0x4>

0800113a <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
	...

08001148 <USB_LP_CAN1_RX0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB low priority or CAN RX0 interrupts.
 */
void USB_LP_CAN1_RX0_IRQHandler(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800114e:	f000 fbad 	bl	80018ac <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20001bd4 	.word	0x20001bd4

0800115c <TIM8_UP_IRQHandler>:

/**
 * @brief This function handles TIM8 update interrupt.
 */
void TIM8_UP_IRQHandler(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM8_UP_IRQn 0 */

	/* USER CODE END TIM8_UP_IRQn 0 */
	HAL_TIM_IRQHandler(&htim8);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM8_UP_IRQHandler+0x10>)
 8001162:	f001 fd41 	bl	8002be8 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM8_UP_IRQn 1 */

	/* USER CODE END TIM8_UP_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20001c88 	.word	0x20001c88

08001170 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800117c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800117e:	e003      	b.n	8001188 <LoopCopyDataInit>

08001180 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001182:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001184:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001186:	3104      	adds	r1, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800118c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800118e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001190:	d3f6      	bcc.n	8001180 <CopyDataInit>
  ldr r2, =_sbss
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001194:	e002      	b.n	800119c <LoopFillZerobss>

08001196 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001198:	f842 3b04 	str.w	r3, [r2], #4

0800119c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800119e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011a0:	d3f9      	bcc.n	8001196 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011a2:	f7ff ffe5 	bl	8001170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f004 ffc1 	bl	800612c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011aa:	f7ff feb1 	bl	8000f10 <main>
  bx lr
 80011ae:	4770      	bx	lr
  ldr r3, =_sidata
 80011b0:	08006690 	.word	0x08006690
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011b8:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 80011bc:	200001ec 	.word	0x200001ec
  ldr r3, = _ebss
 80011c0:	20001d20 	.word	0x20001d20

080011c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_2_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_Init+0x28>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_Init+0x28>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 fe35 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff ff46 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff ff0c 	bl	8001000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000

080011f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a03      	ldr	r2, [pc, #12]	; (8001214 <HAL_IncTick+0x20>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	20000180 	.word	0x20000180
 8001214:	20001cd0 	.word	0x20001cd0

08001218 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <HAL_GetTick+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	20001cd0 	.word	0x20001cd0

0800122c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e0ed      	b.n	800141a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fc5a 	bl	8000b04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0202 	bic.w	r2, r2, #2
 800125e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001260:	f7ff ffda 	bl	8001218 <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001266:	e012      	b.n	800128e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001268:	f7ff ffd6 	bl	8001218 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b0a      	cmp	r3, #10
 8001274:	d90b      	bls.n	800128e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2205      	movs	r2, #5
 8001286:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e0c5      	b.n	800141a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1e5      	bne.n	8001268 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012ac:	f7ff ffb4 	bl	8001218 <HAL_GetTick>
 80012b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012b2:	e012      	b.n	80012da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012b4:	f7ff ffb0 	bl	8001218 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b0a      	cmp	r3, #10
 80012c0:	d90b      	bls.n	80012da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2205      	movs	r2, #5
 80012d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e09f      	b.n	800141a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0e5      	beq.n	80012b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e1b      	ldrb	r3, [r3, #24]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d108      	bne.n	8001302 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e007      	b.n	8001312 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7e5b      	ldrb	r3, [r3, #25]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d108      	bne.n	800132c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e007      	b.n	800133c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800133a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7e9b      	ldrb	r3, [r3, #26]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d108      	bne.n	8001356 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0220 	orr.w	r2, r2, #32
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e007      	b.n	8001366 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0220 	bic.w	r2, r2, #32
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7edb      	ldrb	r3, [r3, #27]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d108      	bne.n	8001380 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0210 	bic.w	r2, r2, #16
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e007      	b.n	8001390 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0210 	orr.w	r2, r2, #16
 800138e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7f1b      	ldrb	r3, [r3, #28]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d108      	bne.n	80013aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0208 	orr.w	r2, r2, #8
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e007      	b.n	80013ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0208 	bic.w	r2, r2, #8
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7f5b      	ldrb	r3, [r3, #29]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d108      	bne.n	80013d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0204 	orr.w	r2, r2, #4
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e007      	b.n	80013e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0204 	bic.w	r2, r2, #4
 80013e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	ea42 0103 	orr.w	r1, r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	1e5a      	subs	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001422:	b480      	push	{r7}
 8001424:	b087      	sub	sp, #28
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001438:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800143a:	7cfb      	ldrb	r3, [r7, #19]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d003      	beq.n	8001448 <HAL_CAN_ConfigFilter+0x26>
 8001440:	7cfb      	ldrb	r3, [r7, #19]
 8001442:	2b02      	cmp	r3, #2
 8001444:	f040 80aa 	bne.w	800159c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800144e:	f043 0201 	orr.w	r2, r3, #1
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	f003 031f 	and.w	r3, r3, #31
 8001460:	2201      	movs	r2, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d123      	bne.n	80014ca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43db      	mvns	r3, r3
 800148c:	401a      	ands	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3248      	adds	r2, #72	; 0x48
 80014aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014c0:	6979      	ldr	r1, [r7, #20]
 80014c2:	3348      	adds	r3, #72	; 0x48
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d122      	bne.n	8001518 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	431a      	orrs	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3248      	adds	r2, #72	; 0x48
 80014f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800150c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800150e:	6979      	ldr	r1, [r7, #20]
 8001510:	3348      	adds	r3, #72	; 0x48
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d109      	bne.n	8001534 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43db      	mvns	r3, r3
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001532:	e007      	b.n	8001544 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d109      	bne.n	8001560 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800155e:	e007      	b.n	8001570 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	431a      	orrs	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d107      	bne.n	8001588 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	431a      	orrs	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800158e:	f023 0201 	bic.w	r2, r3, #1
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	e006      	b.n	80015aa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
  }
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d12e      	bne.n	8001626 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2202      	movs	r2, #2
 80015cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015e0:	f7ff fe1a 	bl	8001218 <HAL_GetTick>
 80015e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015e6:	e012      	b.n	800160e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015e8:	f7ff fe16 	bl	8001218 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b0a      	cmp	r3, #10
 80015f4:	d90b      	bls.n	800160e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2205      	movs	r2, #5
 8001606:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e012      	b.n	8001634 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e5      	bne.n	80015e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e006      	b.n	8001634 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
  }
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001650:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d003      	beq.n	8001660 <HAL_CAN_GetRxMessage+0x24>
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	2b02      	cmp	r3, #2
 800165c:	f040 80f3 	bne.w	8001846 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10e      	bne.n	8001684 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d116      	bne.n	80016a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0e7      	b.n	8001854 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d107      	bne.n	80016a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0d8      	b.n	8001854 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	331b      	adds	r3, #27
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	4413      	add	r3, r2
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0204 	and.w	r2, r3, #4
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10c      	bne.n	80016da <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	331b      	adds	r3, #27
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	4413      	add	r3, r2
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	0d5b      	lsrs	r3, r3, #21
 80016d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e00b      	b.n	80016f2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	331b      	adds	r3, #27
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	331b      	adds	r3, #27
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0202 	and.w	r2, r3, #2
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	331b      	adds	r3, #27
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	4413      	add	r3, r2
 8001714:	3304      	adds	r3, #4
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 020f 	and.w	r2, r3, #15
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	331b      	adds	r3, #27
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	4413      	add	r3, r2
 800172c:	3304      	adds	r3, #4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	b2da      	uxtb	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	331b      	adds	r3, #27
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	4413      	add	r3, r2
 8001744:	3304      	adds	r3, #4
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0c1b      	lsrs	r3, r3, #16
 800174a:	b29a      	uxth	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	4413      	add	r3, r2
 800175a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	4413      	add	r3, r2
 8001770:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	0a1a      	lsrs	r2, r3, #8
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	4413      	add	r3, r2
 800178a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	0c1a      	lsrs	r2, r3, #16
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	3302      	adds	r3, #2
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	0e1a      	lsrs	r2, r3, #24
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	3303      	adds	r3, #3
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4413      	add	r3, r2
 80017be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	3304      	adds	r3, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0a1a      	lsrs	r2, r3, #8
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	3305      	adds	r3, #5
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4413      	add	r3, r2
 80017f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	0c1a      	lsrs	r2, r3, #16
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	3306      	adds	r3, #6
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	4413      	add	r3, r2
 800180a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0e1a      	lsrs	r2, r3, #24
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	3307      	adds	r3, #7
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d108      	bne.n	8001832 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0220 	orr.w	r2, r2, #32
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	e007      	b.n	8001842 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0220 	orr.w	r2, r2, #32
 8001840:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e006      	b.n	8001854 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
  }
}
 8001854:	4618      	mov	r0, r3
 8001856:	371c      	adds	r7, #28
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001872:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001874:	7afb      	ldrb	r3, [r7, #11]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d002      	beq.n	8001880 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800187a:	7afb      	ldrb	r3, [r7, #11]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d10f      	bne.n	80018a0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	e005      	b.n	80018a0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80018a0:	68fb      	ldr	r3, [r7, #12]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d07c      	beq.n	80019ec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d023      	beq.n	8001944 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2201      	movs	r2, #1
 8001902:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f983 	bl	8001c1a <HAL_CAN_TxMailbox0CompleteCallback>
 8001914:	e016      	b.n	8001944 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d004      	beq.n	800192a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
 8001928:	e00c      	b.n	8001944 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
 800193c:	e002      	b.n	8001944 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f986 	bl	8001c50 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d024      	beq.n	8001998 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001956:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f962 	bl	8001c2c <HAL_CAN_TxMailbox1CompleteCallback>
 8001968:	e016      	b.n	8001998 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
 800197c:	e00c      	b.n	8001998 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
 8001990:	e002      	b.n	8001998 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f965 	bl	8001c62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d024      	beq.n	80019ec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f941 	bl	8001c3e <HAL_CAN_TxMailbox2CompleteCallback>
 80019bc:	e016      	b.n	80019ec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
 80019d0:	e00c      	b.n	80019ec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	e002      	b.n	80019ec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f944 	bl	8001c74 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00c      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d007      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f92a 	bl	8001c86 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d009      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fa52 	bl	8000ef4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00c      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2210      	movs	r2, #16
 8001a72:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	f003 0320 	and.w	r3, r3, #32
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f90a 	bl	8001caa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d009      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f8f2 	bl	8001c98 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2210      	movs	r2, #16
 8001ace:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f8f3 	bl	8001cbc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00b      	beq.n	8001af8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d006      	beq.n	8001af8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2208      	movs	r2, #8
 8001af0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f8eb 	bl	8001cce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d07b      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d072      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d008      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d043      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d03e      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b7a:	2b60      	cmp	r3, #96	; 0x60
 8001b7c:	d02b      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x32a>
 8001b7e:	2b60      	cmp	r3, #96	; 0x60
 8001b80:	d82e      	bhi.n	8001be0 <HAL_CAN_IRQHandler+0x334>
 8001b82:	2b50      	cmp	r3, #80	; 0x50
 8001b84:	d022      	beq.n	8001bcc <HAL_CAN_IRQHandler+0x320>
 8001b86:	2b50      	cmp	r3, #80	; 0x50
 8001b88:	d82a      	bhi.n	8001be0 <HAL_CAN_IRQHandler+0x334>
 8001b8a:	2b40      	cmp	r3, #64	; 0x40
 8001b8c:	d019      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x316>
 8001b8e:	2b40      	cmp	r3, #64	; 0x40
 8001b90:	d826      	bhi.n	8001be0 <HAL_CAN_IRQHandler+0x334>
 8001b92:	2b30      	cmp	r3, #48	; 0x30
 8001b94:	d010      	beq.n	8001bb8 <HAL_CAN_IRQHandler+0x30c>
 8001b96:	2b30      	cmp	r3, #48	; 0x30
 8001b98:	d822      	bhi.n	8001be0 <HAL_CAN_IRQHandler+0x334>
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d002      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x2f8>
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	d005      	beq.n	8001bae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ba2:	e01d      	b.n	8001be0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	f043 0308 	orr.w	r3, r3, #8
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bac:	e019      	b.n	8001be2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	f043 0310 	orr.w	r3, r3, #16
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bb6:	e014      	b.n	8001be2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	f043 0320 	orr.w	r3, r3, #32
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bc0:	e00f      	b.n	8001be2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bca:	e00a      	b.n	8001be2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bd4:	e005      	b.n	8001be2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bde:	e000      	b.n	8001be2 <HAL_CAN_IRQHandler+0x336>
            break;
 8001be0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699a      	ldr	r2, [r3, #24]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001bf0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f867 	bl	8001ce0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
	...

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4906      	ldr	r1, [pc, #24]	; (8001d8c <__NVIC_EnableIRQ+0x34>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff4f 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff64 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ffb2 	bl	8001de4 <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff81 	bl	8001d90 <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff57 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b08b      	sub	sp, #44	; 0x2c
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec6:	e179      	b.n	80021bc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f040 8168 	bne.w	80021b6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4aa0      	ldr	r2, [pc, #640]	; (800216c <HAL_GPIO_Init+0x2b8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d05e      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001ef0:	4a9e      	ldr	r2, [pc, #632]	; (800216c <HAL_GPIO_Init+0x2b8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d875      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001ef6:	4a9e      	ldr	r2, [pc, #632]	; (8002170 <HAL_GPIO_Init+0x2bc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d058      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001efc:	4a9c      	ldr	r2, [pc, #624]	; (8002170 <HAL_GPIO_Init+0x2bc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d86f      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f02:	4a9c      	ldr	r2, [pc, #624]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d052      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f08:	4a9a      	ldr	r2, [pc, #616]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d869      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f0e:	4a9a      	ldr	r2, [pc, #616]	; (8002178 <HAL_GPIO_Init+0x2c4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d04c      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f14:	4a98      	ldr	r2, [pc, #608]	; (8002178 <HAL_GPIO_Init+0x2c4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d863      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f1a:	4a98      	ldr	r2, [pc, #608]	; (800217c <HAL_GPIO_Init+0x2c8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d046      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f20:	4a96      	ldr	r2, [pc, #600]	; (800217c <HAL_GPIO_Init+0x2c8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d85d      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f26:	2b12      	cmp	r3, #18
 8001f28:	d82a      	bhi.n	8001f80 <HAL_GPIO_Init+0xcc>
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d859      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <HAL_GPIO_Init+0x80>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001faf 	.word	0x08001faf
 8001f38:	08001f89 	.word	0x08001f89
 8001f3c:	08001f9b 	.word	0x08001f9b
 8001f40:	08001fdd 	.word	0x08001fdd
 8001f44:	08001fe3 	.word	0x08001fe3
 8001f48:	08001fe3 	.word	0x08001fe3
 8001f4c:	08001fe3 	.word	0x08001fe3
 8001f50:	08001fe3 	.word	0x08001fe3
 8001f54:	08001fe3 	.word	0x08001fe3
 8001f58:	08001fe3 	.word	0x08001fe3
 8001f5c:	08001fe3 	.word	0x08001fe3
 8001f60:	08001fe3 	.word	0x08001fe3
 8001f64:	08001fe3 	.word	0x08001fe3
 8001f68:	08001fe3 	.word	0x08001fe3
 8001f6c:	08001fe3 	.word	0x08001fe3
 8001f70:	08001fe3 	.word	0x08001fe3
 8001f74:	08001fe3 	.word	0x08001fe3
 8001f78:	08001f91 	.word	0x08001f91
 8001f7c:	08001fa5 	.word	0x08001fa5
 8001f80:	4a7f      	ldr	r2, [pc, #508]	; (8002180 <HAL_GPIO_Init+0x2cc>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f86:	e02c      	b.n	8001fe2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e029      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	3304      	adds	r3, #4
 8001f96:	623b      	str	r3, [r7, #32]
          break;
 8001f98:	e024      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	3308      	adds	r3, #8
 8001fa0:	623b      	str	r3, [r7, #32]
          break;
 8001fa2:	e01f      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	330c      	adds	r3, #12
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	e01a      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	623b      	str	r3, [r7, #32]
          break;
 8001fba:	e013      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc4:	2308      	movs	r3, #8
 8001fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	611a      	str	r2, [r3, #16]
          break;
 8001fce:	e009      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	615a      	str	r2, [r3, #20]
          break;
 8001fda:	e003      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
          break;
 8001fe0:	e000      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          break;
 8001fe2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2bff      	cmp	r3, #255	; 0xff
 8001fe8:	d801      	bhi.n	8001fee <HAL_GPIO_Init+0x13a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	e001      	b.n	8001ff2 <HAL_GPIO_Init+0x13e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2bff      	cmp	r3, #255	; 0xff
 8001ff8:	d802      	bhi.n	8002000 <HAL_GPIO_Init+0x14c>
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	e002      	b.n	8002006 <HAL_GPIO_Init+0x152>
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	3b08      	subs	r3, #8
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	210f      	movs	r1, #15
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	401a      	ands	r2, r3
 8002018:	6a39      	ldr	r1, [r7, #32]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80c1 	beq.w	80021b6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002034:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a52      	ldr	r2, [pc, #328]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b50      	ldr	r3, [pc, #320]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800204c:	4a4e      	ldr	r2, [pc, #312]	; (8002188 <HAL_GPIO_Init+0x2d4>)
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220f      	movs	r2, #15
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a46      	ldr	r2, [pc, #280]	; (800218c <HAL_GPIO_Init+0x2d8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d01f      	beq.n	80020b8 <HAL_GPIO_Init+0x204>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a45      	ldr	r2, [pc, #276]	; (8002190 <HAL_GPIO_Init+0x2dc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d019      	beq.n	80020b4 <HAL_GPIO_Init+0x200>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a44      	ldr	r2, [pc, #272]	; (8002194 <HAL_GPIO_Init+0x2e0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d013      	beq.n	80020b0 <HAL_GPIO_Init+0x1fc>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a43      	ldr	r2, [pc, #268]	; (8002198 <HAL_GPIO_Init+0x2e4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d00d      	beq.n	80020ac <HAL_GPIO_Init+0x1f8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a42      	ldr	r2, [pc, #264]	; (800219c <HAL_GPIO_Init+0x2e8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d007      	beq.n	80020a8 <HAL_GPIO_Init+0x1f4>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a41      	ldr	r2, [pc, #260]	; (80021a0 <HAL_GPIO_Init+0x2ec>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_GPIO_Init+0x1f0>
 80020a0:	2305      	movs	r3, #5
 80020a2:	e00a      	b.n	80020ba <HAL_GPIO_Init+0x206>
 80020a4:	2306      	movs	r3, #6
 80020a6:	e008      	b.n	80020ba <HAL_GPIO_Init+0x206>
 80020a8:	2304      	movs	r3, #4
 80020aa:	e006      	b.n	80020ba <HAL_GPIO_Init+0x206>
 80020ac:	2303      	movs	r3, #3
 80020ae:	e004      	b.n	80020ba <HAL_GPIO_Init+0x206>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e002      	b.n	80020ba <HAL_GPIO_Init+0x206>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <HAL_GPIO_Init+0x206>
 80020b8:	2300      	movs	r3, #0
 80020ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020bc:	f002 0203 	and.w	r2, r2, #3
 80020c0:	0092      	lsls	r2, r2, #2
 80020c2:	4093      	lsls	r3, r2
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020ca:	492f      	ldr	r1, [pc, #188]	; (8002188 <HAL_GPIO_Init+0x2d4>)
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020e4:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	492e      	ldr	r1, [pc, #184]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	492a      	ldr	r1, [pc, #168]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	4924      	ldr	r1, [pc, #144]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
 8002118:	e006      	b.n	8002128 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	43db      	mvns	r3, r3
 8002122:	4920      	ldr	r1, [pc, #128]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 8002124:	4013      	ands	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	491a      	ldr	r1, [pc, #104]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	43db      	mvns	r3, r3
 800214a:	4916      	ldr	r1, [pc, #88]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 800214c:	4013      	ands	r3, r2
 800214e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d025      	beq.n	80021a8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4910      	ldr	r1, [pc, #64]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	60cb      	str	r3, [r1, #12]
 8002168:	e025      	b.n	80021b6 <HAL_GPIO_Init+0x302>
 800216a:	bf00      	nop
 800216c:	10320000 	.word	0x10320000
 8002170:	10310000 	.word	0x10310000
 8002174:	10220000 	.word	0x10220000
 8002178:	10210000 	.word	0x10210000
 800217c:	10120000 	.word	0x10120000
 8002180:	10110000 	.word	0x10110000
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	40010800 	.word	0x40010800
 8002190:	40010c00 	.word	0x40010c00
 8002194:	40011000 	.word	0x40011000
 8002198:	40011400 	.word	0x40011400
 800219c:	40011800 	.word	0x40011800
 80021a0:	40011c00 	.word	0x40011c00
 80021a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_GPIO_Init+0x324>)
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	4909      	ldr	r1, [pc, #36]	; (80021d8 <HAL_GPIO_Init+0x324>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	3301      	adds	r3, #1
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	fa22 f303 	lsr.w	r3, r2, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f47f ae7e 	bne.w	8001ec8 <HAL_GPIO_Init+0x14>
  }
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	372c      	adds	r7, #44	; 0x2c
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	40010400 	.word	0x40010400

080021dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
 80021e8:	4613      	mov	r3, r2
 80021ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ec:	787b      	ldrb	r3, [r7, #1]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021f8:	e003      	b.n	8002202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021fa:	887b      	ldrh	r3, [r7, #2]
 80021fc:	041a      	lsls	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	611a      	str	r2, [r3, #16]
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e26c      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8087 	beq.w	800233a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800222c:	4b92      	ldr	r3, [pc, #584]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b04      	cmp	r3, #4
 8002236:	d00c      	beq.n	8002252 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002238:	4b8f      	ldr	r3, [pc, #572]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d112      	bne.n	800226a <HAL_RCC_OscConfig+0x5e>
 8002244:	4b8c      	ldr	r3, [pc, #560]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002250:	d10b      	bne.n	800226a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002252:	4b89      	ldr	r3, [pc, #548]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d06c      	beq.n	8002338 <HAL_RCC_OscConfig+0x12c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d168      	bne.n	8002338 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e246      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x76>
 8002274:	4b80      	ldr	r3, [pc, #512]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a7f      	ldr	r2, [pc, #508]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e02e      	b.n	80022e0 <HAL_RCC_OscConfig+0xd4>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x98>
 800228a:	4b7b      	ldr	r3, [pc, #492]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7a      	ldr	r2, [pc, #488]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b78      	ldr	r3, [pc, #480]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a77      	ldr	r2, [pc, #476]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800229c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e01d      	b.n	80022e0 <HAL_RCC_OscConfig+0xd4>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0xbc>
 80022ae:	4b72      	ldr	r3, [pc, #456]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a71      	ldr	r2, [pc, #452]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b6f      	ldr	r3, [pc, #444]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a6e      	ldr	r2, [pc, #440]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0xd4>
 80022c8:	4b6b      	ldr	r3, [pc, #428]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6a      	ldr	r2, [pc, #424]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b68      	ldr	r3, [pc, #416]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a67      	ldr	r2, [pc, #412]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe ff96 	bl	8001218 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7fe ff92 	bl	8001218 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e1fa      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b5d      	ldr	r3, [pc, #372]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0xe4>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe ff82 	bl	8001218 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe ff7e 	bl	8001218 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e1e6      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x10c>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d063      	beq.n	800240e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002346:	4b4c      	ldr	r3, [pc, #304]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002352:	4b49      	ldr	r3, [pc, #292]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b08      	cmp	r3, #8
 800235c:	d11c      	bne.n	8002398 <HAL_RCC_OscConfig+0x18c>
 800235e:	4b46      	ldr	r3, [pc, #280]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	4b43      	ldr	r3, [pc, #268]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x176>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e1ba      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4939      	ldr	r1, [pc, #228]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	e03a      	b.n	800240e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7fe ff37 	bl	8001218 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ae:	f7fe ff33 	bl	8001218 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e19b      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b2a      	ldr	r3, [pc, #168]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4927      	ldr	r1, [pc, #156]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
 80023e0:	e015      	b.n	800240e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe ff16 	bl	8001218 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f0:	f7fe ff12 	bl	8001218 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e17a      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d03a      	beq.n	8002490 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d019      	beq.n	8002456 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <HAL_RCC_OscConfig+0x274>)
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7fe fef6 	bl	8001218 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7fe fef2 	bl	8001218 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e15a      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800244e:	2001      	movs	r0, #1
 8002450:	f000 faf4 	bl	8002a3c <RCC_Delay>
 8002454:	e01c      	b.n	8002490 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_RCC_OscConfig+0x274>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245c:	f7fe fedc 	bl	8001218 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002462:	e00f      	b.n	8002484 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002464:	f7fe fed8 	bl	8001218 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d908      	bls.n	8002484 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e140      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	42420000 	.word	0x42420000
 8002480:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	4b9e      	ldr	r3, [pc, #632]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1e9      	bne.n	8002464 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a6 	beq.w	80025ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a2:	4b97      	ldr	r3, [pc, #604]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10d      	bne.n	80024ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	4b94      	ldr	r3, [pc, #592]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	4a93      	ldr	r2, [pc, #588]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	61d3      	str	r3, [r2, #28]
 80024ba:	4b91      	ldr	r3, [pc, #580]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c6:	2301      	movs	r3, #1
 80024c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ca:	4b8e      	ldr	r3, [pc, #568]	; (8002704 <HAL_RCC_OscConfig+0x4f8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d118      	bne.n	8002508 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d6:	4b8b      	ldr	r3, [pc, #556]	; (8002704 <HAL_RCC_OscConfig+0x4f8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a8a      	ldr	r2, [pc, #552]	; (8002704 <HAL_RCC_OscConfig+0x4f8>)
 80024dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e2:	f7fe fe99 	bl	8001218 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ea:	f7fe fe95 	bl	8001218 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	; 0x64
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e0fd      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	4b81      	ldr	r3, [pc, #516]	; (8002704 <HAL_RCC_OscConfig+0x4f8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x312>
 8002510:	4b7b      	ldr	r3, [pc, #492]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4a7a      	ldr	r2, [pc, #488]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6213      	str	r3, [r2, #32]
 800251c:	e02d      	b.n	800257a <HAL_RCC_OscConfig+0x36e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x334>
 8002526:	4b76      	ldr	r3, [pc, #472]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a75      	ldr	r2, [pc, #468]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	4b73      	ldr	r3, [pc, #460]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	4a72      	ldr	r2, [pc, #456]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	f023 0304 	bic.w	r3, r3, #4
 800253c:	6213      	str	r3, [r2, #32]
 800253e:	e01c      	b.n	800257a <HAL_RCC_OscConfig+0x36e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b05      	cmp	r3, #5
 8002546:	d10c      	bne.n	8002562 <HAL_RCC_OscConfig+0x356>
 8002548:	4b6d      	ldr	r3, [pc, #436]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a6c      	ldr	r2, [pc, #432]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	4b6a      	ldr	r3, [pc, #424]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a69      	ldr	r2, [pc, #420]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6213      	str	r3, [r2, #32]
 8002560:	e00b      	b.n	800257a <HAL_RCC_OscConfig+0x36e>
 8002562:	4b67      	ldr	r3, [pc, #412]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a66      	ldr	r2, [pc, #408]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6213      	str	r3, [r2, #32]
 800256e:	4b64      	ldr	r3, [pc, #400]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a63      	ldr	r2, [pc, #396]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d015      	beq.n	80025ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7fe fe49 	bl	8001218 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7fe fe45 	bl	8001218 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	; 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e0ab      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	4b57      	ldr	r3, [pc, #348]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ee      	beq.n	800258a <HAL_RCC_OscConfig+0x37e>
 80025ac:	e014      	b.n	80025d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ae:	f7fe fe33 	bl	8001218 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe fe2f 	bl	8001218 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e095      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025cc:	4b4c      	ldr	r3, [pc, #304]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ee      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d105      	bne.n	80025ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025de:	4b48      	ldr	r3, [pc, #288]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4a47      	ldr	r2, [pc, #284]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8081 	beq.w	80026f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f4:	4b42      	ldr	r3, [pc, #264]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d061      	beq.n	80026c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d146      	bne.n	8002696 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002608:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <HAL_RCC_OscConfig+0x4fc>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe fe03 	bl	8001218 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002616:	f7fe fdff 	bl	8001218 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e067      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002628:	4b35      	ldr	r3, [pc, #212]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263c:	d108      	bne.n	8002650 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800263e:	4b30      	ldr	r3, [pc, #192]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	492d      	ldr	r1, [pc, #180]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002650:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a19      	ldr	r1, [r3, #32]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	430b      	orrs	r3, r1
 8002662:	4927      	ldr	r1, [pc, #156]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002668:	4b27      	ldr	r3, [pc, #156]	; (8002708 <HAL_RCC_OscConfig+0x4fc>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7fe fdd3 	bl	8001218 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002676:	f7fe fdcf 	bl	8001218 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e037      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x46a>
 8002694:	e02f      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <HAL_RCC_OscConfig+0x4fc>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fe fdbc 	bl	8001218 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe fdb8 	bl	8001218 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e020      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x498>
 80026c2:	e018      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e013      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	40007000 	.word	0x40007000
 8002708:	42420060 	.word	0x42420060

0800270c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0d0      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b6a      	ldr	r3, [pc, #424]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d910      	bls.n	8002750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b67      	ldr	r3, [pc, #412]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 0207 	bic.w	r2, r3, #7
 8002736:	4965      	ldr	r1, [pc, #404]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b63      	ldr	r3, [pc, #396]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0b8      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002768:	4b59      	ldr	r3, [pc, #356]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a58      	ldr	r2, [pc, #352]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002772:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002780:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800278a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278c:	4b50      	ldr	r3, [pc, #320]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	494d      	ldr	r1, [pc, #308]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d040      	beq.n	800282c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b47      	ldr	r3, [pc, #284]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d115      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e07f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ca:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e073      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e06b      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4936      	ldr	r1, [pc, #216]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027fc:	f7fe fd0c 	bl	8001218 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7fe fd08 	bl	8001218 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e053      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b27      	ldr	r3, [pc, #156]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d210      	bcs.n	800285c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 0207 	bic.w	r2, r3, #7
 8002842:	4922      	ldr	r1, [pc, #136]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e032      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4916      	ldr	r1, [pc, #88]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	490e      	ldr	r1, [pc, #56]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800289a:	f000 f821 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	490a      	ldr	r1, [pc, #40]	; (80028d4 <HAL_RCC_ClockConfig+0x1c8>)
 80028ac:	5ccb      	ldrb	r3, [r1, r3]
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	4a09      	ldr	r2, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1cc>)
 80028b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x1d0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fbd8 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40022000 	.word	0x40022000
 80028d0:	40021000 	.word	0x40021000
 80028d4:	08006610 	.word	0x08006610
 80028d8:	20000178 	.word	0x20000178
 80028dc:	2000017c 	.word	0x2000017c

080028e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	b490      	push	{r4, r7}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028e6:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028e8:	1d3c      	adds	r4, r7, #4
 80028ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028f0:	f240 2301 	movw	r3, #513	; 0x201
 80028f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	2300      	movs	r3, #0
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800290a:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_RCC_GetSysClockFreq+0xb4>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b04      	cmp	r3, #4
 8002918:	d002      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x40>
 800291a:	2b08      	cmp	r3, #8
 800291c:	d003      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x46>
 800291e:	e02d      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002920:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002922:	623b      	str	r3, [r7, #32]
      break;
 8002924:	e02d      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	0c9b      	lsrs	r3, r3, #18
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002932:	4413      	add	r3, r2
 8002934:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002938:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	0c5b      	lsrs	r3, r3, #17
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002952:	4413      	add	r3, r2
 8002954:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002958:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	4a0e      	ldr	r2, [pc, #56]	; (8002998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800295e:	fb02 f203 	mul.w	r2, r2, r3
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	e004      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	4a0b      	ldr	r2, [pc, #44]	; (800299c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002970:	fb02 f303 	mul.w	r3, r2, r3
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	623b      	str	r3, [r7, #32]
      break;
 800297a:	e002      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800297e:	623b      	str	r3, [r7, #32]
      break;
 8002980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002982:	6a3b      	ldr	r3, [r7, #32]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3728      	adds	r7, #40	; 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bc90      	pop	{r4, r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	08006524 	.word	0x08006524
 8002994:	40021000 	.word	0x40021000
 8002998:	007a1200 	.word	0x007a1200
 800299c:	003d0900 	.word	0x003d0900

080029a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a4:	4b02      	ldr	r3, [pc, #8]	; (80029b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	20000178 	.word	0x20000178

080029b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029b8:	f7ff fff2 	bl	80029a0 <HAL_RCC_GetHCLKFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	0adb      	lsrs	r3, r3, #11
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	4903      	ldr	r1, [pc, #12]	; (80029d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	08006620 	.word	0x08006620

080029dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	220f      	movs	r2, #15
 80029ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_RCC_GetClockConfig+0x58>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0203 	and.w	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_RCC_GetClockConfig+0x58>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCC_GetClockConfig+0x58>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <HAL_RCC_GetClockConfig+0x58>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	08db      	lsrs	r3, r3, #3
 8002a16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_RCC_GetClockConfig+0x5c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0207 	and.w	r2, r3, #7
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40022000 	.word	0x40022000

08002a3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <RCC_Delay+0x34>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <RCC_Delay+0x38>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0a5b      	lsrs	r3, r3, #9
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a58:	bf00      	nop
  }
  while (Delay --);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1e5a      	subs	r2, r3, #1
 8002a5e:	60fa      	str	r2, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f9      	bne.n	8002a58 <RCC_Delay+0x1c>
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	20000178 	.word	0x20000178
 8002a74:	10624dd3 	.word	0x10624dd3

08002a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e041      	b.n	8002b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f839 	bl	8002b16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f000 f9c2 	bl	8002e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d001      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e044      	b.n	8002bca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <HAL_TIM_Base_Start_IT+0xac>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d018      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0x6c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d013      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0x6c>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b74:	d00e      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0x6c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a18      	ldr	r2, [pc, #96]	; (8002bdc <HAL_TIM_Base_Start_IT+0xb4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d009      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0x6c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <HAL_TIM_Base_Start_IT+0xb8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d004      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0x6c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d111      	bne.n	8002bb8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d010      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0201 	orr.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb6:	e007      	b.n	8002bc8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40013400 	.word	0x40013400
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40000800 	.word	0x40000800
 8002be4:	40000c00 	.word	0x40000c00

08002be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d122      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d11b      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0202 	mvn.w	r2, #2
 8002c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f8ed 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
 8002c30:	e005      	b.n	8002c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8e0 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f8ef 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d122      	bne.n	8002c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d11b      	bne.n	8002c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0204 	mvn.w	r2, #4
 8002c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f8c3 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f8b6 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f8c5 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d122      	bne.n	8002cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d11b      	bne.n	8002cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0208 	mvn.w	r2, #8
 8002cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f899 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f88c 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f89b 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	d122      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b10      	cmp	r3, #16
 8002d06:	d11b      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0210 	mvn.w	r2, #16
 8002d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2208      	movs	r2, #8
 8002d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f86f 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f862 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f871 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d10e      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d107      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0201 	mvn.w	r2, #1
 8002d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe f932 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d76:	2b80      	cmp	r3, #128	; 0x80
 8002d78:	d10e      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d84:	2b80      	cmp	r3, #128	; 0x80
 8002d86:	d107      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f8d7 	bl	8002f46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b40      	cmp	r3, #64	; 0x40
 8002da4:	d10e      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	2b40      	cmp	r3, #64	; 0x40
 8002db2:	d107      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f835 	bl	8002e2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d10e      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d107      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0220 	mvn.w	r2, #32
 8002de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f8a2 	bl	8002f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a33      	ldr	r2, [pc, #204]	; (8002f20 <TIM_Base_SetConfig+0xe0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d013      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a32      	ldr	r2, [pc, #200]	; (8002f24 <TIM_Base_SetConfig+0xe4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00f      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e66:	d00b      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a2f      	ldr	r2, [pc, #188]	; (8002f28 <TIM_Base_SetConfig+0xe8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a2e      	ldr	r2, [pc, #184]	; (8002f2c <TIM_Base_SetConfig+0xec>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d003      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a2d      	ldr	r2, [pc, #180]	; (8002f30 <TIM_Base_SetConfig+0xf0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d108      	bne.n	8002e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a22      	ldr	r2, [pc, #136]	; (8002f20 <TIM_Base_SetConfig+0xe0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d013      	beq.n	8002ec2 <TIM_Base_SetConfig+0x82>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a21      	ldr	r2, [pc, #132]	; (8002f24 <TIM_Base_SetConfig+0xe4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00f      	beq.n	8002ec2 <TIM_Base_SetConfig+0x82>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea8:	d00b      	beq.n	8002ec2 <TIM_Base_SetConfig+0x82>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <TIM_Base_SetConfig+0xe8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d007      	beq.n	8002ec2 <TIM_Base_SetConfig+0x82>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <TIM_Base_SetConfig+0xec>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d003      	beq.n	8002ec2 <TIM_Base_SetConfig+0x82>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <TIM_Base_SetConfig+0xf0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d108      	bne.n	8002ed4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a09      	ldr	r2, [pc, #36]	; (8002f20 <TIM_Base_SetConfig+0xe0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d003      	beq.n	8002f08 <TIM_Base_SetConfig+0xc8>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <TIM_Base_SetConfig+0xe4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d103      	bne.n	8002f10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	615a      	str	r2, [r3, #20]
}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40013400 	.word	0x40013400
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	40000800 	.word	0x40000800
 8002f30:	40000c00 	.word	0x40000c00

08002f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f5e:	f3ef 8305 	mrs	r3, IPSR
 8002f62:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10f      	bne.n	8002f8a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f6e:	607b      	str	r3, [r7, #4]
  return(result);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <osKernelInitialize+0x32>
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <osKernelInitialize+0x60>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d109      	bne.n	8002f92 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f7e:	f3ef 8311 	mrs	r3, BASEPRI
 8002f82:	603b      	str	r3, [r7, #0]
  return(result);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002f8a:	f06f 0305 	mvn.w	r3, #5
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e00c      	b.n	8002fac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <osKernelInitialize+0x60>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d105      	bne.n	8002fa6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <osKernelInitialize+0x60>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e002      	b.n	8002fac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002fac:	68fb      	ldr	r3, [r7, #12]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	20000208 	.word	0x20000208

08002fbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fc2:	f3ef 8305 	mrs	r3, IPSR
 8002fc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10f      	bne.n	8002fee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fce:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd2:	607b      	str	r3, [r7, #4]
  return(result);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <osKernelStart+0x32>
 8002fda:	4b11      	ldr	r3, [pc, #68]	; (8003020 <osKernelStart+0x64>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d109      	bne.n	8002ff6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8002fe6:	603b      	str	r3, [r7, #0]
  return(result);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002fee:	f06f 0305 	mvn.w	r3, #5
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	e00e      	b.n	8003014 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <osKernelStart+0x64>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d107      	bne.n	800300e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <osKernelStart+0x64>)
 8003000:	2202      	movs	r2, #2
 8003002:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003004:	f001 fb9e 	bl	8004744 <vTaskStartScheduler>
      stat = osOK;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	e002      	b.n	8003014 <osKernelStart+0x58>
    } else {
      stat = osError;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003014:	68fb      	ldr	r3, [r7, #12]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000208 	.word	0x20000208

08003024 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003024:	b580      	push	{r7, lr}
 8003026:	b092      	sub	sp, #72	; 0x48
 8003028:	af04      	add	r7, sp, #16
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003034:	f3ef 8305 	mrs	r3, IPSR
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800303c:	2b00      	cmp	r3, #0
 800303e:	f040 8094 	bne.w	800316a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003042:	f3ef 8310 	mrs	r3, PRIMASK
 8003046:	623b      	str	r3, [r7, #32]
  return(result);
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 808d 	bne.w	800316a <osThreadNew+0x146>
 8003050:	4b48      	ldr	r3, [pc, #288]	; (8003174 <osThreadNew+0x150>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d106      	bne.n	8003066 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003058:	f3ef 8311 	mrs	r3, BASEPRI
 800305c:	61fb      	str	r3, [r7, #28]
  return(result);
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f040 8082 	bne.w	800316a <osThreadNew+0x146>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d07e      	beq.n	800316a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003070:	2318      	movs	r3, #24
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003074:	2300      	movs	r3, #0
 8003076:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003078:	f107 031b 	add.w	r3, r7, #27
 800307c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d045      	beq.n	8003116 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <osThreadNew+0x74>
        name = attr->name;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <osThreadNew+0x9a>
 80030ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ae:	2b38      	cmp	r3, #56	; 0x38
 80030b0:	d805      	bhi.n	80030be <osThreadNew+0x9a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <osThreadNew+0x9e>
        return (NULL);
 80030be:	2300      	movs	r3, #0
 80030c0:	e054      	b.n	800316c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00e      	beq.n	80030f8 <osThreadNew+0xd4>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2bbb      	cmp	r3, #187	; 0xbb
 80030e0:	d90a      	bls.n	80030f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d006      	beq.n	80030f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <osThreadNew+0xd4>
        mem = 1;
 80030f2:	2301      	movs	r3, #1
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f6:	e010      	b.n	800311a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10c      	bne.n	800311a <osThreadNew+0xf6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d108      	bne.n	800311a <osThreadNew+0xf6>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d104      	bne.n	800311a <osThreadNew+0xf6>
          mem = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
 8003114:	e001      	b.n	800311a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	2b01      	cmp	r3, #1
 800311e:	d110      	bne.n	8003142 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003128:	9202      	str	r2, [sp, #8]
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003134:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f001 f920 	bl	800437c <xTaskCreateStatic>
 800313c:	4603      	mov	r3, r0
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e013      	b.n	800316a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	2b00      	cmp	r3, #0
 8003146:	d110      	bne.n	800316a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	b29a      	uxth	r2, r3
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f001 f96a 	bl	8004434 <xTaskCreate>
 8003160:	4603      	mov	r3, r0
 8003162:	2b01      	cmp	r3, #1
 8003164:	d001      	beq.n	800316a <osThreadNew+0x146>
          hTask = NULL;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800316a:	697b      	ldr	r3, [r7, #20]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3738      	adds	r7, #56	; 0x38
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000208 	.word	0x20000208

08003178 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003180:	f3ef 8305 	mrs	r3, IPSR
 8003184:	613b      	str	r3, [r7, #16]
  return(result);
 8003186:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10f      	bne.n	80031ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800318c:	f3ef 8310 	mrs	r3, PRIMASK
 8003190:	60fb      	str	r3, [r7, #12]
  return(result);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <osDelay+0x34>
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <osDelay+0x58>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d109      	bne.n	80031b4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031a0:	f3ef 8311 	mrs	r3, BASEPRI
 80031a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <osDelay+0x3c>
    stat = osErrorISR;
 80031ac:	f06f 0305 	mvn.w	r3, #5
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e007      	b.n	80031c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f001 fa8c 	bl	80046dc <vTaskDelay>
    }
  }

  return (stat);
 80031c4:	697b      	ldr	r3, [r7, #20]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000208 	.word	0x20000208

080031d4 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031e0:	f3ef 8305 	mrs	r3, IPSR
 80031e4:	617b      	str	r3, [r7, #20]
  return(result);
 80031e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d13d      	bne.n	8003268 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ec:	f3ef 8310 	mrs	r3, PRIMASK
 80031f0:	613b      	str	r3, [r7, #16]
  return(result);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d137      	bne.n	8003268 <osEventFlagsNew+0x94>
 80031f8:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <osEventFlagsNew+0xa0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d105      	bne.n	800320c <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003200:	f3ef 8311 	mrs	r3, BASEPRI
 8003204:	60fb      	str	r3, [r7, #12]
  return(result);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d12d      	bne.n	8003268 <osEventFlagsNew+0x94>
    mem = -1;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
 8003210:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d015      	beq.n	8003244 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d006      	beq.n	800322e <osEventFlagsNew+0x5a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b1f      	cmp	r3, #31
 8003226:	d902      	bls.n	800322e <osEventFlagsNew+0x5a>
        mem = 1;
 8003228:	2301      	movs	r3, #1
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	e00c      	b.n	8003248 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d108      	bne.n	8003248 <osEventFlagsNew+0x74>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d104      	bne.n	8003248 <osEventFlagsNew+0x74>
          mem = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	e001      	b.n	8003248 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d106      	bne.n	800325c <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f910 	bl	8003478 <xEventGroupCreateStatic>
 8003258:	61f8      	str	r0, [r7, #28]
 800325a:	e005      	b.n	8003268 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8003262:	f000 f940 	bl	80034e6 <xEventGroupCreate>
 8003266:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003268:	69fb      	ldr	r3, [r7, #28]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000208 	.word	0x20000208

08003278 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <osEventFlagsSet+0x1e>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8003296:	f06f 0303 	mvn.w	r3, #3
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	e03a      	b.n	8003314 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800329e:	f3ef 8305 	mrs	r3, IPSR
 80032a2:	617b      	str	r3, [r7, #20]
  return(result);
 80032a4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10f      	bne.n	80032ca <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032aa:	f3ef 8310 	mrs	r3, PRIMASK
 80032ae:	613b      	str	r3, [r7, #16]
  return(result);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <osEventFlagsSet+0x52>
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <osEventFlagsSet+0xa8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d123      	bne.n	8003306 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032be:	f3ef 8311 	mrs	r3, BASEPRI
 80032c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01d      	beq.n	8003306 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	461a      	mov	r2, r3
 80032d4:	6839      	ldr	r1, [r7, #0]
 80032d6:	69b8      	ldr	r0, [r7, #24]
 80032d8:	f000 faa8 	bl	800382c <xEventGroupSetBitsFromISR>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 80032e2:	f06f 0302 	mvn.w	r3, #2
 80032e6:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80032e8:	e013      	b.n	8003312 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00e      	beq.n	8003312 <osEventFlagsSet+0x9a>
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <osEventFlagsSet+0xac>)
 80032f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8003304:	e005      	b.n	8003312 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8003306:	6839      	ldr	r1, [r7, #0]
 8003308:	69b8      	ldr	r0, [r7, #24]
 800330a:	f000 f9d5 	bl	80036b8 <xEventGroupSetBits>
 800330e:	61f8      	str	r0, [r7, #28]
 8003310:	e000      	b.n	8003314 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8003312:	bf00      	nop
  }

  return (rflags);
 8003314:	69fb      	ldr	r3, [r7, #28]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000208 	.word	0x20000208
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b08e      	sub	sp, #56	; 0x38
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d004      	beq.n	800334a <osEventFlagsWait+0x22>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800334a:	f06f 0303 	mvn.w	r3, #3
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
 8003350:	e059      	b.n	8003406 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003352:	f3ef 8305 	mrs	r3, IPSR
 8003356:	61fb      	str	r3, [r7, #28]
  return(result);
 8003358:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800335e:	f3ef 8310 	mrs	r3, PRIMASK
 8003362:	61bb      	str	r3, [r7, #24]
  return(result);
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <osEventFlagsWait+0x56>
 800336a:	4b29      	ldr	r3, [pc, #164]	; (8003410 <osEventFlagsWait+0xe8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d109      	bne.n	8003386 <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003372:	f3ef 8311 	mrs	r3, BASEPRI
 8003376:	617b      	str	r3, [r7, #20]
  return(result);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800337e:	f06f 0305 	mvn.w	r3, #5
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
 8003384:	e03f      	b.n	8003406 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8003390:	2301      	movs	r3, #1
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003394:	e001      	b.n	800339a <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8003396:	2300      	movs	r3, #0
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a8:	e001      	b.n	80033ae <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 80033aa:	2301      	movs	r3, #1
 80033ac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	6a38      	ldr	r0, [r7, #32]
 80033ba:	f000 f8af 	bl	800351c <xEventGroupWaitBits>
 80033be:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00e      	beq.n	80033e8 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d019      	beq.n	8003406 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 80033d8:	f06f 0301 	mvn.w	r3, #1
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
 80033de:	e012      	b.n	8003406 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80033e0:	f06f 0302 	mvn.w	r3, #2
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	e00e      	b.n	8003406 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80033f8:	f06f 0301 	mvn.w	r3, #1
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
 80033fe:	e002      	b.n	8003406 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003400:	f06f 0302 	mvn.w	r3, #2
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003408:	4618      	mov	r0, r3
 800340a:	3730      	adds	r7, #48	; 0x30
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20000208 	.word	0x20000208

08003414 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a06      	ldr	r2, [pc, #24]	; (800343c <vApplicationGetIdleTaskMemory+0x28>)
 8003424:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4a05      	ldr	r2, [pc, #20]	; (8003440 <vApplicationGetIdleTaskMemory+0x2c>)
 800342a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	601a      	str	r2, [r3, #0]
}
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	2000020c 	.word	0x2000020c
 8003440:	200002c8 	.word	0x200002c8

08003444 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a07      	ldr	r2, [pc, #28]	; (8003470 <vApplicationGetTimerTaskMemory+0x2c>)
 8003454:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4a06      	ldr	r2, [pc, #24]	; (8003474 <vApplicationGetTimerTaskMemory+0x30>)
 800345a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003462:	601a      	str	r2, [r3, #0]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	200004c8 	.word	0x200004c8
 8003474:	20000584 	.word	0x20000584

08003478 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003498:	bf00      	nop
 800349a:	e7fe      	b.n	800349a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800349c:	2320      	movs	r3, #32
 800349e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d00a      	beq.n	80034bc <xEventGroupCreateStatic+0x44>
	__asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	60fb      	str	r3, [r7, #12]
}
 80034b8:	bf00      	nop
 80034ba:	e7fe      	b.n	80034ba <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3304      	adds	r3, #4
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 f9bf 	bl	8003854 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2201      	movs	r2, #1
 80034da:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80034dc:	697b      	ldr	r3, [r7, #20]
	}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80034ec:	2020      	movs	r0, #32
 80034ee:	f002 fc45 	bl	8005d7c <pvPortMalloc>
 80034f2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f9a5 	bl	8003854 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8003510:	687b      	ldr	r3, [r7, #4]
	}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b090      	sub	sp, #64	; 0x40
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003532:	2300      	movs	r3, #0
 8003534:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <xEventGroupWaitBits+0x36>
	__asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	623b      	str	r3, [r7, #32]
}
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <xEventGroupWaitBits+0x56>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	61fb      	str	r3, [r7, #28]
}
 800356e:	bf00      	nop
 8003570:	e7fe      	b.n	8003570 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <xEventGroupWaitBits+0x72>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	61bb      	str	r3, [r7, #24]
}
 800358a:	bf00      	nop
 800358c:	e7fe      	b.n	800358c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800358e:	f001 fdd9 	bl	8005144 <xTaskGetSchedulerState>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <xEventGroupWaitBits+0x82>
 8003598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <xEventGroupWaitBits+0x86>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <xEventGroupWaitBits+0x88>
 80035a2:	2300      	movs	r3, #0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <xEventGroupWaitBits+0xa2>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	617b      	str	r3, [r7, #20]
}
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80035be:	f001 f931 	bl	8004824 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80035c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035ce:	f000 f90b 	bl	80037e8 <prvTestWaitCondition>
 80035d2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00e      	beq.n	80035f8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d028      	beq.n	800363a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80035e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	401a      	ands	r2, r3
 80035f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e020      	b.n	800363a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80035f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d104      	bne.n	8003608 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8003602:	2301      	movs	r3, #1
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
 8003606:	e018      	b.n	800363a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003614:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800361c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003622:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003626:	1d18      	adds	r0, r3, #4
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	4313      	orrs	r3, r2
 800362e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003630:	4619      	mov	r1, r3
 8003632:	f001 faf7 	bl	8004c24 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800363a:	f001 f901 	bl	8004840 <xTaskResumeAll>
 800363e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003642:	2b00      	cmp	r3, #0
 8003644:	d031      	beq.n	80036aa <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	2b00      	cmp	r3, #0
 800364a:	d107      	bne.n	800365c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <xEventGroupWaitBits+0x198>)
 800364e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800365c:	f001 fdfe 	bl	800525c <uxTaskResetEventItemValue>
 8003660:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d11a      	bne.n	80036a2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800366c:	f002 fa86 	bl	8005b7c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800367c:	f000 f8b4 	bl	80037e8 <prvTestWaitCondition>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d006      	beq.n	800369a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	43db      	mvns	r3, r3
 8003694:	401a      	ands	r2, r3
 8003696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003698:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800369a:	2301      	movs	r3, #1
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800369e:	f002 fa9d 	bl	8005bdc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80036a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80036aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3740      	adds	r7, #64	; 0x40
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	e000ed04 	.word	0xe000ed04

080036b8 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08e      	sub	sp, #56	; 0x38
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80036c2:	2300      	movs	r3, #0
 80036c4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80036ca:	2300      	movs	r3, #0
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10a      	bne.n	80036ea <xEventGroupSetBits+0x32>
	__asm volatile
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	613b      	str	r3, [r7, #16]
}
 80036e6:	bf00      	nop
 80036e8:	e7fe      	b.n	80036e8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <xEventGroupSetBits+0x52>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	60fb      	str	r3, [r7, #12]
}
 8003706:	bf00      	nop
 8003708:	e7fe      	b.n	8003708 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	3304      	adds	r3, #4
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	3308      	adds	r3, #8
 8003714:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003716:	f001 f885 	bl	8004824 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	431a      	orrs	r2, r3
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800372c:	e03c      	b.n	80037a8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800372e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800373a:	2300      	movs	r3, #0
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003744:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800374c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d108      	bne.n	800376a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00b      	beq.n	800377c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8003764:	2301      	movs	r3, #1
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003768:	e008      	b.n	800377c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	429a      	cmp	r2, r3
 8003776:	d101      	bne.n	800377c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003778:	2301      	movs	r3, #1
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d010      	beq.n	80037a4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800378c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4313      	orrs	r3, r2
 8003792:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800379c:	4619      	mov	r1, r3
 800379e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037a0:	f001 fb0c 	bl	8004dbc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80037a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d1be      	bne.n	800372e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	43db      	mvns	r3, r3
 80037b8:	401a      	ands	r2, r3
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80037be:	f001 f83f 	bl	8004840 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	681b      	ldr	r3, [r3, #0]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3738      	adds	r7, #56	; 0x38
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80037d8:	6839      	ldr	r1, [r7, #0]
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff6c 	bl	80036b8 <xEventGroupSetBits>
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003808:	2301      	movs	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e007      	b.n	800381e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4013      	ands	r3, r2
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	d101      	bne.n	800381e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800381a:	2301      	movs	r3, #1
 800381c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800381e:	697b      	ldr	r3, [r7, #20]
}
 8003820:	4618      	mov	r0, r3
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
	...

0800382c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	68f9      	ldr	r1, [r7, #12]
 800383e:	4804      	ldr	r0, [pc, #16]	; (8003850 <xEventGroupSetBitsFromISR+0x24>)
 8003840:	f002 f88a 	bl	8005958 <xTimerPendFunctionCallFromISR>
 8003844:	6178      	str	r0, [r7, #20]

		return xReturn;
 8003846:	697b      	ldr	r3, [r7, #20]
	}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	080037cf 	.word	0x080037cf

08003854 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f103 0208 	add.w	r2, r3, #8
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f04f 32ff 	mov.w	r2, #4294967295
 800386c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f103 0208 	add.w	r2, r3, #8
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f103 0208 	add.w	r2, r3, #8
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038aa:	b480      	push	{r7}
 80038ac:	b085      	sub	sp, #20
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003906:	d103      	bne.n	8003910 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	e00c      	b.n	800392a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3308      	adds	r3, #8
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	e002      	b.n	800391e <vListInsert+0x2e>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	429a      	cmp	r2, r3
 8003928:	d2f6      	bcs.n	8003918 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	601a      	str	r2, [r3, #0]
}
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr

08003960 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6892      	ldr	r2, [r2, #8]
 8003976:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6852      	ldr	r2, [r2, #4]
 8003980:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	429a      	cmp	r2, r3
 800398a:	d103      	bne.n	8003994 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	1e5a      	subs	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
	...

080039b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xQueueGenericReset+0x2a>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	60bb      	str	r3, [r7, #8]
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80039de:	f002 f8cd 	bl	8005b7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	68f9      	ldr	r1, [r7, #12]
 80039ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039ee:	fb01 f303 	mul.w	r3, r1, r3
 80039f2:	441a      	add	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	68f9      	ldr	r1, [r7, #12]
 8003a12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	441a      	add	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	22ff      	movs	r2, #255	; 0xff
 8003a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	22ff      	movs	r2, #255	; 0xff
 8003a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d114      	bne.n	8003a5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01a      	beq.n	8003a72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3310      	adds	r3, #16
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 f957 	bl	8004cf4 <xTaskRemoveFromEventList>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d012      	beq.n	8003a72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <xQueueGenericReset+0xcc>)
 8003a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	e009      	b.n	8003a72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3310      	adds	r3, #16
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fef6 	bl	8003854 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3324      	adds	r3, #36	; 0x24
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fef1 	bl	8003854 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a72:	f002 f8b3 	bl	8005bdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a76:	2301      	movs	r3, #1
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08e      	sub	sp, #56	; 0x38
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ac6:	bf00      	nop
 8003ac8:	e7fe      	b.n	8003ac8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <xQueueGenericCreateStatic+0x52>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <xQueueGenericCreateStatic+0x56>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <xQueueGenericCreateStatic+0x58>
 8003ada:	2300      	movs	r3, #0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	623b      	str	r3, [r7, #32]
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <xQueueGenericCreateStatic+0x7e>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <xQueueGenericCreateStatic+0x82>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <xQueueGenericCreateStatic+0x84>
 8003b06:	2300      	movs	r3, #0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	61fb      	str	r3, [r7, #28]
}
 8003b1e:	bf00      	nop
 8003b20:	e7fe      	b.n	8003b20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b22:	2350      	movs	r3, #80	; 0x50
 8003b24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b50      	cmp	r3, #80	; 0x50
 8003b2a:	d00a      	beq.n	8003b42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	61bb      	str	r3, [r7, #24]
}
 8003b3e:	bf00      	nop
 8003b40:	e7fe      	b.n	8003b40 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00d      	beq.n	8003b68 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b54:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f805 	bl	8003b72 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3730      	adds	r7, #48	; 0x30
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
 8003b7e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d103      	bne.n	8003b8e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e002      	b.n	8003b94 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	69b8      	ldr	r0, [r7, #24]
 8003ba4:	f7ff ff06 	bl	80039b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08e      	sub	sp, #56	; 0x38
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <xQueueGenericSend+0x32>
	__asm volatile
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003be6:	bf00      	nop
 8003be8:	e7fe      	b.n	8003be8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d103      	bne.n	8003bf8 <xQueueGenericSend+0x40>
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <xQueueGenericSend+0x44>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <xQueueGenericSend+0x46>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10a      	bne.n	8003c18 <xQueueGenericSend+0x60>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c14:	bf00      	nop
 8003c16:	e7fe      	b.n	8003c16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d103      	bne.n	8003c26 <xQueueGenericSend+0x6e>
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <xQueueGenericSend+0x72>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <xQueueGenericSend+0x74>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <xQueueGenericSend+0x8e>
	__asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	623b      	str	r3, [r7, #32]
}
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c46:	f001 fa7d 	bl	8005144 <xTaskGetSchedulerState>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <xQueueGenericSend+0x9e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <xQueueGenericSend+0xa2>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <xQueueGenericSend+0xa4>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <xQueueGenericSend+0xbe>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	61fb      	str	r3, [r7, #28]
}
 8003c72:	bf00      	nop
 8003c74:	e7fe      	b.n	8003c74 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c76:	f001 ff81 	bl	8005b7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d302      	bcc.n	8003c8c <xQueueGenericSend+0xd4>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d129      	bne.n	8003ce0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c92:	f000 fa07 	bl	80040a4 <prvCopyDataToQueue>
 8003c96:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d010      	beq.n	8003cc2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	3324      	adds	r3, #36	; 0x24
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f001 f825 	bl	8004cf4 <xTaskRemoveFromEventList>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d013      	beq.n	8003cd8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003cb0:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <xQueueGenericSend+0x1f8>)
 8003cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	e00a      	b.n	8003cd8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003cc8:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <xQueueGenericSend+0x1f8>)
 8003cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003cd8:	f001 ff80 	bl	8005bdc <vPortExitCritical>
				return pdPASS;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e063      	b.n	8003da8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ce6:	f001 ff79 	bl	8005bdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e05c      	b.n	8003da8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cf4:	f107 0314 	add.w	r3, r7, #20
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 f8c1 	bl	8004e80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d02:	f001 ff6b 	bl	8005bdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d06:	f000 fd8d 	bl	8004824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d0a:	f001 ff37 	bl	8005b7c <vPortEnterCritical>
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d14:	b25b      	sxtb	r3, r3
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1a:	d103      	bne.n	8003d24 <xQueueGenericSend+0x16c>
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d2a:	b25b      	sxtb	r3, r3
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d103      	bne.n	8003d3a <xQueueGenericSend+0x182>
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d3a:	f001 ff4f 	bl	8005bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d3e:	1d3a      	adds	r2, r7, #4
 8003d40:	f107 0314 	add.w	r3, r7, #20
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 f8b0 	bl	8004eac <xTaskCheckForTimeOut>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d124      	bne.n	8003d9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d54:	f000 fa9e 	bl	8004294 <prvIsQueueFull>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d018      	beq.n	8003d90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	3310      	adds	r3, #16
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 ff38 	bl	8004bdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d6e:	f000 fa29 	bl	80041c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d72:	f000 fd65 	bl	8004840 <xTaskResumeAll>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f47f af7c 	bne.w	8003c76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <xQueueGenericSend+0x1f8>)
 8003d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	e772      	b.n	8003c76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d92:	f000 fa17 	bl	80041c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d96:	f000 fd53 	bl	8004840 <xTaskResumeAll>
 8003d9a:	e76c      	b.n	8003c76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d9e:	f000 fa11 	bl	80041c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003da2:	f000 fd4d 	bl	8004840 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003da6:	2300      	movs	r3, #0
		}
	}
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3738      	adds	r7, #56	; 0x38
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	e000ed04 	.word	0xe000ed04

08003db4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08e      	sub	sp, #56	; 0x38
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d103      	bne.n	8003df0 <xQueueGenericSendFromISR+0x3c>
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <xQueueGenericSendFromISR+0x40>
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <xQueueGenericSendFromISR+0x42>
 8003df4:	2300      	movs	r3, #0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	623b      	str	r3, [r7, #32]
}
 8003e0c:	bf00      	nop
 8003e0e:	e7fe      	b.n	8003e0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d103      	bne.n	8003e1e <xQueueGenericSendFromISR+0x6a>
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <xQueueGenericSendFromISR+0x6e>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <xQueueGenericSendFromISR+0x70>
 8003e22:	2300      	movs	r3, #0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	61fb      	str	r3, [r7, #28]
}
 8003e3a:	bf00      	nop
 8003e3c:	e7fe      	b.n	8003e3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e3e:	f001 ff5f 	bl	8005d00 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e42:	f3ef 8211 	mrs	r2, BASEPRI
 8003e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	61ba      	str	r2, [r7, #24]
 8003e58:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e5a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d302      	bcc.n	8003e70 <xQueueGenericSendFromISR+0xbc>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d12c      	bne.n	8003eca <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	68b9      	ldr	r1, [r7, #8]
 8003e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e80:	f000 f910 	bl	80040a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e84:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d112      	bne.n	8003eb4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	3324      	adds	r3, #36	; 0x24
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 ff2a 	bl	8004cf4 <xTaskRemoveFromEventList>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00e      	beq.n	8003ec4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00b      	beq.n	8003ec4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e007      	b.n	8003ec4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003eb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003eb8:	3301      	adds	r3, #1
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	b25a      	sxtb	r2, r3
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003ec8:	e001      	b.n	8003ece <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ed8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3738      	adds	r7, #56	; 0x38
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <xQueueReceive+0x30>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	623b      	str	r3, [r7, #32]
}
 8003f10:	bf00      	nop
 8003f12:	e7fe      	b.n	8003f12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d103      	bne.n	8003f22 <xQueueReceive+0x3e>
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <xQueueReceive+0x42>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <xQueueReceive+0x44>
 8003f26:	2300      	movs	r3, #0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <xQueueReceive+0x5e>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	61fb      	str	r3, [r7, #28]
}
 8003f3e:	bf00      	nop
 8003f40:	e7fe      	b.n	8003f40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f42:	f001 f8ff 	bl	8005144 <xTaskGetSchedulerState>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d102      	bne.n	8003f52 <xQueueReceive+0x6e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <xQueueReceive+0x72>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <xQueueReceive+0x74>
 8003f56:	2300      	movs	r3, #0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <xQueueReceive+0x8e>
	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	61bb      	str	r3, [r7, #24]
}
 8003f6e:	bf00      	nop
 8003f70:	e7fe      	b.n	8003f70 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f72:	f001 fe03 	bl	8005b7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01f      	beq.n	8003fc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f86:	f000 f8f7 	bl	8004178 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	1e5a      	subs	r2, r3, #1
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00f      	beq.n	8003fba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	3310      	adds	r3, #16
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fea8 	bl	8004cf4 <xTaskRemoveFromEventList>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003faa:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <xQueueReceive+0x1bc>)
 8003fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fba:	f001 fe0f 	bl	8005bdc <vPortExitCritical>
				return pdPASS;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e069      	b.n	8004096 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d103      	bne.n	8003fd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fc8:	f001 fe08 	bl	8005bdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e062      	b.n	8004096 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fd6:	f107 0310 	add.w	r3, r7, #16
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 ff50 	bl	8004e80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fe4:	f001 fdfa 	bl	8005bdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fe8:	f000 fc1c 	bl	8004824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fec:	f001 fdc6 	bl	8005b7c <vPortEnterCritical>
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff6:	b25b      	sxtb	r3, r3
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d103      	bne.n	8004006 <xQueueReceive+0x122>
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800400c:	b25b      	sxtb	r3, r3
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d103      	bne.n	800401c <xQueueReceive+0x138>
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800401c:	f001 fdde 	bl	8005bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004020:	1d3a      	adds	r2, r7, #4
 8004022:	f107 0310 	add.w	r3, r7, #16
 8004026:	4611      	mov	r1, r2
 8004028:	4618      	mov	r0, r3
 800402a:	f000 ff3f 	bl	8004eac <xTaskCheckForTimeOut>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d123      	bne.n	800407c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004036:	f000 f917 	bl	8004268 <prvIsQueueEmpty>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d017      	beq.n	8004070 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	3324      	adds	r3, #36	; 0x24
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4611      	mov	r1, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fdc7 	bl	8004bdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800404e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004050:	f000 f8b8 	bl	80041c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004054:	f000 fbf4 	bl	8004840 <xTaskResumeAll>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d189      	bne.n	8003f72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <xQueueReceive+0x1bc>)
 8004060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	e780      	b.n	8003f72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004072:	f000 f8a7 	bl	80041c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004076:	f000 fbe3 	bl	8004840 <xTaskResumeAll>
 800407a:	e77a      	b.n	8003f72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800407c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800407e:	f000 f8a1 	bl	80041c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004082:	f000 fbdd 	bl	8004840 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004088:	f000 f8ee 	bl	8004268 <prvIsQueueEmpty>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	f43f af6f 	beq.w	8003f72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004094:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004096:	4618      	mov	r0, r3
 8004098:	3730      	adds	r7, #48	; 0x30
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	e000ed04 	.word	0xe000ed04

080040a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10d      	bne.n	80040de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d14d      	bne.n	8004166 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 f856 	bl	8005180 <xTaskPriorityDisinherit>
 80040d4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	e043      	b.n	8004166 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d119      	bne.n	8004118 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6898      	ldr	r0, [r3, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	461a      	mov	r2, r3
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	f002 f842 	bl	8006178 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	441a      	add	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	d32b      	bcc.n	8004166 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	609a      	str	r2, [r3, #8]
 8004116:	e026      	b.n	8004166 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68d8      	ldr	r0, [r3, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	461a      	mov	r2, r3
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	f002 f828 	bl	8006178 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	425b      	negs	r3, r3
 8004132:	441a      	add	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d207      	bcs.n	8004154 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	425b      	negs	r3, r3
 800414e:	441a      	add	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d105      	bne.n	8004166 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	3b01      	subs	r3, #1
 8004164:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800416e:	697b      	ldr	r3, [r7, #20]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d018      	beq.n	80041bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	441a      	add	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d303      	bcc.n	80041ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68d9      	ldr	r1, [r3, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	461a      	mov	r2, r3
 80041b6:	6838      	ldr	r0, [r7, #0]
 80041b8:	f001 ffde 	bl	8006178 <memcpy>
	}
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041cc:	f001 fcd6 	bl	8005b7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041d8:	e011      	b.n	80041fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d012      	beq.n	8004208 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3324      	adds	r3, #36	; 0x24
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fd84 	bl	8004cf4 <xTaskRemoveFromEventList>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041f2:	f000 febd 	bl	8004f70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004202:	2b00      	cmp	r3, #0
 8004204:	dce9      	bgt.n	80041da <prvUnlockQueue+0x16>
 8004206:	e000      	b.n	800420a <prvUnlockQueue+0x46>
					break;
 8004208:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	22ff      	movs	r2, #255	; 0xff
 800420e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004212:	f001 fce3 	bl	8005bdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004216:	f001 fcb1 	bl	8005b7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004220:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004222:	e011      	b.n	8004248 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d012      	beq.n	8004252 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3310      	adds	r3, #16
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fd5f 	bl	8004cf4 <xTaskRemoveFromEventList>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800423c:	f000 fe98 	bl	8004f70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004240:	7bbb      	ldrb	r3, [r7, #14]
 8004242:	3b01      	subs	r3, #1
 8004244:	b2db      	uxtb	r3, r3
 8004246:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800424c:	2b00      	cmp	r3, #0
 800424e:	dce9      	bgt.n	8004224 <prvUnlockQueue+0x60>
 8004250:	e000      	b.n	8004254 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004252:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	22ff      	movs	r2, #255	; 0xff
 8004258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800425c:	f001 fcbe 	bl	8005bdc <vPortExitCritical>
}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004270:	f001 fc84 	bl	8005b7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	2b00      	cmp	r3, #0
 800427a:	d102      	bne.n	8004282 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800427c:	2301      	movs	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	e001      	b.n	8004286 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004286:	f001 fca9 	bl	8005bdc <vPortExitCritical>

	return xReturn;
 800428a:	68fb      	ldr	r3, [r7, #12]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800429c:	f001 fc6e 	bl	8005b7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d102      	bne.n	80042b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042ac:	2301      	movs	r3, #1
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e001      	b.n	80042b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042b6:	f001 fc91 	bl	8005bdc <vPortExitCritical>

	return xReturn;
 80042ba:	68fb      	ldr	r3, [r7, #12]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	e014      	b.n	80042fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042d4:	4a0e      	ldr	r2, [pc, #56]	; (8004310 <vQueueAddToRegistry+0x4c>)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042e0:	490b      	ldr	r1, [pc, #44]	; (8004310 <vQueueAddToRegistry+0x4c>)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042ea:	4a09      	ldr	r2, [pc, #36]	; (8004310 <vQueueAddToRegistry+0x4c>)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4413      	add	r3, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042f6:	e006      	b.n	8004306 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3301      	adds	r3, #1
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b07      	cmp	r3, #7
 8004302:	d9e7      	bls.n	80042d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004304:	bf00      	nop
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr
 8004310:	20001cd4 	.word	0x20001cd4

08004314 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004324:	f001 fc2a 	bl	8005b7c <vPortEnterCritical>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800432e:	b25b      	sxtb	r3, r3
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d103      	bne.n	800433e <vQueueWaitForMessageRestricted+0x2a>
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004344:	b25b      	sxtb	r3, r3
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d103      	bne.n	8004354 <vQueueWaitForMessageRestricted+0x40>
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004354:	f001 fc42 	bl	8005bdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	2b00      	cmp	r3, #0
 800435e:	d106      	bne.n	800436e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3324      	adds	r3, #36	; 0x24
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fc97 	bl	8004c9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800436e:	6978      	ldr	r0, [r7, #20]
 8004370:	f7ff ff28 	bl	80041c4 <prvUnlockQueue>
	}
 8004374:	bf00      	nop
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08e      	sub	sp, #56	; 0x38
 8004380:	af04      	add	r7, sp, #16
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800438a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	623b      	str	r3, [r7, #32]
}
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	61fb      	str	r3, [r7, #28]
}
 80043be:	bf00      	nop
 80043c0:	e7fe      	b.n	80043c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043c2:	23bc      	movs	r3, #188	; 0xbc
 80043c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2bbc      	cmp	r3, #188	; 0xbc
 80043ca:	d00a      	beq.n	80043e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	61bb      	str	r3, [r7, #24]
}
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01e      	beq.n	8004426 <xTaskCreateStatic+0xaa>
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01b      	beq.n	8004426 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004400:	2300      	movs	r3, #0
 8004402:	9303      	str	r3, [sp, #12]
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	9302      	str	r3, [sp, #8]
 8004408:	f107 0314 	add.w	r3, r7, #20
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f851 	bl	80044c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800441e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004420:	f000 f8ec 	bl	80045fc <prvAddNewTaskToReadyList>
 8004424:	e001      	b.n	800442a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800442a:	697b      	ldr	r3, [r7, #20]
	}
 800442c:	4618      	mov	r0, r3
 800442e:	3728      	adds	r7, #40	; 0x28
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08c      	sub	sp, #48	; 0x30
 8004438:	af04      	add	r7, sp, #16
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	4613      	mov	r3, r2
 8004442:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4618      	mov	r0, r3
 800444a:	f001 fc97 	bl	8005d7c <pvPortMalloc>
 800444e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00e      	beq.n	8004474 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004456:	20bc      	movs	r0, #188	; 0xbc
 8004458:	f001 fc90 	bl	8005d7c <pvPortMalloc>
 800445c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	631a      	str	r2, [r3, #48]	; 0x30
 800446a:	e005      	b.n	8004478 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800446c:	6978      	ldr	r0, [r7, #20]
 800446e:	f001 fd49 	bl	8005f04 <vPortFree>
 8004472:	e001      	b.n	8004478 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004474:	2300      	movs	r3, #0
 8004476:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d017      	beq.n	80044ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004486:	88fa      	ldrh	r2, [r7, #6]
 8004488:	2300      	movs	r3, #0
 800448a:	9303      	str	r3, [sp, #12]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	9302      	str	r3, [sp, #8]
 8004490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f80f 	bl	80044c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044a2:	69f8      	ldr	r0, [r7, #28]
 80044a4:	f000 f8aa 	bl	80045fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044a8:	2301      	movs	r3, #1
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	e002      	b.n	80044b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295
 80044b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044b4:	69bb      	ldr	r3, [r7, #24]
	}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	461a      	mov	r2, r3
 80044d8:	21a5      	movs	r1, #165	; 0xa5
 80044da:	f001 fe5b 	bl	8006194 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044e8:	3b01      	subs	r3, #1
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f023 0307 	bic.w	r3, r3, #7
 80044f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	617b      	str	r3, [r7, #20]
}
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004518:	2300      	movs	r3, #0
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	e012      	b.n	8004544 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	4413      	add	r3, r2
 8004524:	7819      	ldrb	r1, [r3, #0]
 8004526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	3334      	adds	r3, #52	; 0x34
 800452e:	460a      	mov	r2, r1
 8004530:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	4413      	add	r3, r2
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d006      	beq.n	800454c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	3301      	adds	r3, #1
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	2b0f      	cmp	r3, #15
 8004548:	d9e9      	bls.n	800451e <prvInitialiseNewTask+0x5e>
 800454a:	e000      	b.n	800454e <prvInitialiseNewTask+0x8e>
		{
			break;
 800454c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	2b37      	cmp	r3, #55	; 0x37
 800455a:	d901      	bls.n	8004560 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800455c:	2337      	movs	r3, #55	; 0x37
 800455e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004564:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	2200      	movs	r2, #0
 8004570:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	3304      	adds	r3, #4
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff f98b 	bl	8003892 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	3318      	adds	r3, #24
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff f986 	bl	8003892 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	3354      	adds	r3, #84	; 0x54
 80045b0:	2260      	movs	r2, #96	; 0x60
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f001 fded 	bl	8006194 <memset>
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	4a0c      	ldr	r2, [pc, #48]	; (80045f0 <prvInitialiseNewTask+0x130>)
 80045be:	659a      	str	r2, [r3, #88]	; 0x58
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	4a0c      	ldr	r2, [pc, #48]	; (80045f4 <prvInitialiseNewTask+0x134>)
 80045c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	4a0b      	ldr	r2, [pc, #44]	; (80045f8 <prvInitialiseNewTask+0x138>)
 80045ca:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	68f9      	ldr	r1, [r7, #12]
 80045d0:	69b8      	ldr	r0, [r7, #24]
 80045d2:	f001 f9e1 	bl	8005998 <pxPortInitialiseStack>
 80045d6:	4602      	mov	r2, r0
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045e8:	bf00      	nop
 80045ea:	3720      	adds	r7, #32
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	08006648 	.word	0x08006648
 80045f4:	08006668 	.word	0x08006668
 80045f8:	08006628 	.word	0x08006628

080045fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004604:	f001 faba 	bl	8005b7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004608:	4b2d      	ldr	r3, [pc, #180]	; (80046c0 <prvAddNewTaskToReadyList+0xc4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3301      	adds	r3, #1
 800460e:	4a2c      	ldr	r2, [pc, #176]	; (80046c0 <prvAddNewTaskToReadyList+0xc4>)
 8004610:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004612:	4b2c      	ldr	r3, [pc, #176]	; (80046c4 <prvAddNewTaskToReadyList+0xc8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800461a:	4a2a      	ldr	r2, [pc, #168]	; (80046c4 <prvAddNewTaskToReadyList+0xc8>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004620:	4b27      	ldr	r3, [pc, #156]	; (80046c0 <prvAddNewTaskToReadyList+0xc4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d110      	bne.n	800464a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004628:	f000 fcc6 	bl	8004fb8 <prvInitialiseTaskLists>
 800462c:	e00d      	b.n	800464a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800462e:	4b26      	ldr	r3, [pc, #152]	; (80046c8 <prvAddNewTaskToReadyList+0xcc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <prvAddNewTaskToReadyList+0xc8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	429a      	cmp	r2, r3
 8004642:	d802      	bhi.n	800464a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004644:	4a1f      	ldr	r2, [pc, #124]	; (80046c4 <prvAddNewTaskToReadyList+0xc8>)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800464a:	4b20      	ldr	r3, [pc, #128]	; (80046cc <prvAddNewTaskToReadyList+0xd0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3301      	adds	r3, #1
 8004650:	4a1e      	ldr	r2, [pc, #120]	; (80046cc <prvAddNewTaskToReadyList+0xd0>)
 8004652:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <prvAddNewTaskToReadyList+0xd0>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <prvAddNewTaskToReadyList+0xd4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d903      	bls.n	8004670 <prvAddNewTaskToReadyList+0x74>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	4a18      	ldr	r2, [pc, #96]	; (80046d0 <prvAddNewTaskToReadyList+0xd4>)
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4a15      	ldr	r2, [pc, #84]	; (80046d4 <prvAddNewTaskToReadyList+0xd8>)
 800467e:	441a      	add	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f7ff f90f 	bl	80038aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800468c:	f001 faa6 	bl	8005bdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004690:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <prvAddNewTaskToReadyList+0xcc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00e      	beq.n	80046b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <prvAddNewTaskToReadyList+0xc8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d207      	bcs.n	80046b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <prvAddNewTaskToReadyList+0xdc>)
 80046a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000e58 	.word	0x20000e58
 80046c4:	20000984 	.word	0x20000984
 80046c8:	20000e64 	.word	0x20000e64
 80046cc:	20000e74 	.word	0x20000e74
 80046d0:	20000e60 	.word	0x20000e60
 80046d4:	20000988 	.word	0x20000988
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d017      	beq.n	800471e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046ee:	4b13      	ldr	r3, [pc, #76]	; (800473c <vTaskDelay+0x60>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <vTaskDelay+0x30>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	60bb      	str	r3, [r7, #8]
}
 8004708:	bf00      	nop
 800470a:	e7fe      	b.n	800470a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800470c:	f000 f88a 	bl	8004824 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004710:	2100      	movs	r1, #0
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fdba 	bl	800528c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004718:	f000 f892 	bl	8004840 <xTaskResumeAll>
 800471c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d107      	bne.n	8004734 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <vTaskDelay+0x64>)
 8004726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000e80 	.word	0x20000e80
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004752:	463a      	mov	r2, r7
 8004754:	1d39      	adds	r1, r7, #4
 8004756:	f107 0308 	add.w	r3, r7, #8
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe fe5a 	bl	8003414 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004760:	6839      	ldr	r1, [r7, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	9202      	str	r2, [sp, #8]
 8004768:	9301      	str	r3, [sp, #4]
 800476a:	2300      	movs	r3, #0
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	2300      	movs	r3, #0
 8004770:	460a      	mov	r2, r1
 8004772:	4924      	ldr	r1, [pc, #144]	; (8004804 <vTaskStartScheduler+0xc0>)
 8004774:	4824      	ldr	r0, [pc, #144]	; (8004808 <vTaskStartScheduler+0xc4>)
 8004776:	f7ff fe01 	bl	800437c <xTaskCreateStatic>
 800477a:	4603      	mov	r3, r0
 800477c:	4a23      	ldr	r2, [pc, #140]	; (800480c <vTaskStartScheduler+0xc8>)
 800477e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004780:	4b22      	ldr	r3, [pc, #136]	; (800480c <vTaskStartScheduler+0xc8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004788:	2301      	movs	r3, #1
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	e001      	b.n	8004792 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d102      	bne.n	800479e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004798:	f000 fdcc 	bl	8005334 <xTimerCreateTimerTask>
 800479c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d11b      	bne.n	80047dc <vTaskStartScheduler+0x98>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	613b      	str	r3, [r7, #16]
}
 80047b6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <vTaskStartScheduler+0xcc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3354      	adds	r3, #84	; 0x54
 80047be:	4a15      	ldr	r2, [pc, #84]	; (8004814 <vTaskStartScheduler+0xd0>)
 80047c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047c2:	4b15      	ldr	r3, [pc, #84]	; (8004818 <vTaskStartScheduler+0xd4>)
 80047c4:	f04f 32ff 	mov.w	r2, #4294967295
 80047c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047ca:	4b14      	ldr	r3, [pc, #80]	; (800481c <vTaskStartScheduler+0xd8>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80047d0:	4b13      	ldr	r3, [pc, #76]	; (8004820 <vTaskStartScheduler+0xdc>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047d6:	f001 f95f 	bl	8005a98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047da:	e00e      	b.n	80047fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d10a      	bne.n	80047fa <vTaskStartScheduler+0xb6>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	60fb      	str	r3, [r7, #12]
}
 80047f6:	bf00      	nop
 80047f8:	e7fe      	b.n	80047f8 <vTaskStartScheduler+0xb4>
}
 80047fa:	bf00      	nop
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	08006534 	.word	0x08006534
 8004808:	08004f89 	.word	0x08004f89
 800480c:	20000e7c 	.word	0x20000e7c
 8004810:	20000984 	.word	0x20000984
 8004814:	20000188 	.word	0x20000188
 8004818:	20000e78 	.word	0x20000e78
 800481c:	20000e64 	.word	0x20000e64
 8004820:	20000e5c 	.word	0x20000e5c

08004824 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <vTaskSuspendAll+0x18>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3301      	adds	r3, #1
 800482e:	4a03      	ldr	r2, [pc, #12]	; (800483c <vTaskSuspendAll+0x18>)
 8004830:	6013      	str	r3, [r2, #0]
}
 8004832:	bf00      	nop
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000e80 	.word	0x20000e80

08004840 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800484e:	4b42      	ldr	r3, [pc, #264]	; (8004958 <xTaskResumeAll+0x118>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <xTaskResumeAll+0x2c>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	603b      	str	r3, [r7, #0]
}
 8004868:	bf00      	nop
 800486a:	e7fe      	b.n	800486a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800486c:	f001 f986 	bl	8005b7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004870:	4b39      	ldr	r3, [pc, #228]	; (8004958 <xTaskResumeAll+0x118>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3b01      	subs	r3, #1
 8004876:	4a38      	ldr	r2, [pc, #224]	; (8004958 <xTaskResumeAll+0x118>)
 8004878:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800487a:	4b37      	ldr	r3, [pc, #220]	; (8004958 <xTaskResumeAll+0x118>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d162      	bne.n	8004948 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004882:	4b36      	ldr	r3, [pc, #216]	; (800495c <xTaskResumeAll+0x11c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d05e      	beq.n	8004948 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800488a:	e02f      	b.n	80048ec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800488c:	4b34      	ldr	r3, [pc, #208]	; (8004960 <xTaskResumeAll+0x120>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3318      	adds	r3, #24
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff f861 	bl	8003960 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3304      	adds	r3, #4
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff f85c 	bl	8003960 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <xTaskResumeAll+0x124>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d903      	bls.n	80048bc <xTaskResumeAll+0x7c>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4a2a      	ldr	r2, [pc, #168]	; (8004964 <xTaskResumeAll+0x124>)
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4a27      	ldr	r2, [pc, #156]	; (8004968 <xTaskResumeAll+0x128>)
 80048ca:	441a      	add	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f7fe ffe9 	bl	80038aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048dc:	4b23      	ldr	r3, [pc, #140]	; (800496c <xTaskResumeAll+0x12c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d302      	bcc.n	80048ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80048e6:	4b22      	ldr	r3, [pc, #136]	; (8004970 <xTaskResumeAll+0x130>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048ec:	4b1c      	ldr	r3, [pc, #112]	; (8004960 <xTaskResumeAll+0x120>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1cb      	bne.n	800488c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048fa:	f000 fbff 	bl	80050fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048fe:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <xTaskResumeAll+0x134>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d010      	beq.n	800492c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800490a:	f000 f845 	bl	8004998 <xTaskIncrementTick>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004914:	4b16      	ldr	r3, [pc, #88]	; (8004970 <xTaskResumeAll+0x130>)
 8004916:	2201      	movs	r2, #1
 8004918:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3b01      	subs	r3, #1
 800491e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f1      	bne.n	800490a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004926:	4b13      	ldr	r3, [pc, #76]	; (8004974 <xTaskResumeAll+0x134>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800492c:	4b10      	ldr	r3, [pc, #64]	; (8004970 <xTaskResumeAll+0x130>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d009      	beq.n	8004948 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004934:	2301      	movs	r3, #1
 8004936:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004938:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <xTaskResumeAll+0x138>)
 800493a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004948:	f001 f948 	bl	8005bdc <vPortExitCritical>

	return xAlreadyYielded;
 800494c:	68bb      	ldr	r3, [r7, #8]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20000e80 	.word	0x20000e80
 800495c:	20000e58 	.word	0x20000e58
 8004960:	20000e18 	.word	0x20000e18
 8004964:	20000e60 	.word	0x20000e60
 8004968:	20000988 	.word	0x20000988
 800496c:	20000984 	.word	0x20000984
 8004970:	20000e6c 	.word	0x20000e6c
 8004974:	20000e68 	.word	0x20000e68
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004982:	4b04      	ldr	r3, [pc, #16]	; (8004994 <xTaskGetTickCount+0x18>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004988:	687b      	ldr	r3, [r7, #4]
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr
 8004994:	20000e5c 	.word	0x20000e5c

08004998 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049a2:	4b51      	ldr	r3, [pc, #324]	; (8004ae8 <xTaskIncrementTick+0x150>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f040 808e 	bne.w	8004ac8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049ac:	4b4f      	ldr	r3, [pc, #316]	; (8004aec <xTaskIncrementTick+0x154>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049b4:	4a4d      	ldr	r2, [pc, #308]	; (8004aec <xTaskIncrementTick+0x154>)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d120      	bne.n	8004a02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049c0:	4b4b      	ldr	r3, [pc, #300]	; (8004af0 <xTaskIncrementTick+0x158>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	603b      	str	r3, [r7, #0]
}
 80049dc:	bf00      	nop
 80049de:	e7fe      	b.n	80049de <xTaskIncrementTick+0x46>
 80049e0:	4b43      	ldr	r3, [pc, #268]	; (8004af0 <xTaskIncrementTick+0x158>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	4b43      	ldr	r3, [pc, #268]	; (8004af4 <xTaskIncrementTick+0x15c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a41      	ldr	r2, [pc, #260]	; (8004af0 <xTaskIncrementTick+0x158>)
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	4a41      	ldr	r2, [pc, #260]	; (8004af4 <xTaskIncrementTick+0x15c>)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	4b40      	ldr	r3, [pc, #256]	; (8004af8 <xTaskIncrementTick+0x160>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	4a3f      	ldr	r2, [pc, #252]	; (8004af8 <xTaskIncrementTick+0x160>)
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	f000 fb7d 	bl	80050fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a02:	4b3e      	ldr	r3, [pc, #248]	; (8004afc <xTaskIncrementTick+0x164>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d34e      	bcc.n	8004aaa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a0c:	4b38      	ldr	r3, [pc, #224]	; (8004af0 <xTaskIncrementTick+0x158>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <xTaskIncrementTick+0x82>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <xTaskIncrementTick+0x84>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a20:	4b36      	ldr	r3, [pc, #216]	; (8004afc <xTaskIncrementTick+0x164>)
 8004a22:	f04f 32ff 	mov.w	r2, #4294967295
 8004a26:	601a      	str	r2, [r3, #0]
					break;
 8004a28:	e03f      	b.n	8004aaa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a2a:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <xTaskIncrementTick+0x158>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d203      	bcs.n	8004a4a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a42:	4a2e      	ldr	r2, [pc, #184]	; (8004afc <xTaskIncrementTick+0x164>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6013      	str	r3, [r2, #0]
						break;
 8004a48:	e02f      	b.n	8004aaa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe ff86 	bl	8003960 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d004      	beq.n	8004a66 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	3318      	adds	r3, #24
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe ff7d 	bl	8003960 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6a:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <xTaskIncrementTick+0x168>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d903      	bls.n	8004a7a <xTaskIncrementTick+0xe2>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	4a22      	ldr	r2, [pc, #136]	; (8004b00 <xTaskIncrementTick+0x168>)
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4a1f      	ldr	r2, [pc, #124]	; (8004b04 <xTaskIncrementTick+0x16c>)
 8004a88:	441a      	add	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4610      	mov	r0, r2
 8004a92:	f7fe ff0a 	bl	80038aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9a:	4b1b      	ldr	r3, [pc, #108]	; (8004b08 <xTaskIncrementTick+0x170>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d3b3      	bcc.n	8004a0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aa8:	e7b0      	b.n	8004a0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004aaa:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <xTaskIncrementTick+0x170>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab0:	4914      	ldr	r1, [pc, #80]	; (8004b04 <xTaskIncrementTick+0x16c>)
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d907      	bls.n	8004ad2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e004      	b.n	8004ad2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ac8:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <xTaskIncrementTick+0x174>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3301      	adds	r3, #1
 8004ace:	4a0f      	ldr	r2, [pc, #60]	; (8004b0c <xTaskIncrementTick+0x174>)
 8004ad0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004ad2:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <xTaskIncrementTick+0x178>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004ada:	2301      	movs	r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ade:	697b      	ldr	r3, [r7, #20]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000e80 	.word	0x20000e80
 8004aec:	20000e5c 	.word	0x20000e5c
 8004af0:	20000e10 	.word	0x20000e10
 8004af4:	20000e14 	.word	0x20000e14
 8004af8:	20000e70 	.word	0x20000e70
 8004afc:	20000e78 	.word	0x20000e78
 8004b00:	20000e60 	.word	0x20000e60
 8004b04:	20000988 	.word	0x20000988
 8004b08:	20000984 	.word	0x20000984
 8004b0c:	20000e68 	.word	0x20000e68
 8004b10:	20000e6c 	.word	0x20000e6c

08004b14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b1a:	4b2a      	ldr	r3, [pc, #168]	; (8004bc4 <vTaskSwitchContext+0xb0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b22:	4b29      	ldr	r3, [pc, #164]	; (8004bc8 <vTaskSwitchContext+0xb4>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b28:	e046      	b.n	8004bb8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004b2a:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <vTaskSwitchContext+0xb4>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b30:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <vTaskSwitchContext+0xb8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	e010      	b.n	8004b5a <vTaskSwitchContext+0x46>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <vTaskSwitchContext+0x40>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	607b      	str	r3, [r7, #4]
}
 8004b50:	bf00      	nop
 8004b52:	e7fe      	b.n	8004b52 <vTaskSwitchContext+0x3e>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	491d      	ldr	r1, [pc, #116]	; (8004bd0 <vTaskSwitchContext+0xbc>)
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0e4      	beq.n	8004b38 <vTaskSwitchContext+0x24>
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4a15      	ldr	r2, [pc, #84]	; (8004bd0 <vTaskSwitchContext+0xbc>)
 8004b7a:	4413      	add	r3, r2
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	605a      	str	r2, [r3, #4]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	3308      	adds	r3, #8
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d104      	bne.n	8004b9e <vTaskSwitchContext+0x8a>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4a0b      	ldr	r2, [pc, #44]	; (8004bd4 <vTaskSwitchContext+0xc0>)
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	4a08      	ldr	r2, [pc, #32]	; (8004bcc <vTaskSwitchContext+0xb8>)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <vTaskSwitchContext+0xc0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3354      	adds	r3, #84	; 0x54
 8004bb4:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <vTaskSwitchContext+0xc4>)
 8004bb6:	6013      	str	r3, [r2, #0]
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000e80 	.word	0x20000e80
 8004bc8:	20000e6c 	.word	0x20000e6c
 8004bcc:	20000e60 	.word	0x20000e60
 8004bd0:	20000988 	.word	0x20000988
 8004bd4:	20000984 	.word	0x20000984
 8004bd8:	20000188 	.word	0x20000188

08004bdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	60fb      	str	r3, [r7, #12]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c02:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <vTaskPlaceOnEventList+0x44>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3318      	adds	r3, #24
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fe fe70 	bl	80038f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c10:	2101      	movs	r1, #1
 8004c12:	6838      	ldr	r0, [r7, #0]
 8004c14:	f000 fb3a 	bl	800528c <prvAddCurrentTaskToDelayedList>
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20000984 	.word	0x20000984

08004c24 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10a      	bne.n	8004c4c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	617b      	str	r3, [r7, #20]
}
 8004c48:	bf00      	nop
 8004c4a:	e7fe      	b.n	8004c4a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <vTaskPlaceOnUnorderedEventList+0x70>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	613b      	str	r3, [r7, #16]
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c74:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3318      	adds	r3, #24
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f7fe fe13 	bl	80038aa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c84:	2101      	movs	r1, #1
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fb00 	bl	800528c <prvAddCurrentTaskToDelayedList>
}
 8004c8c:	bf00      	nop
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20000e80 	.word	0x20000e80
 8004c98:	20000984 	.word	0x20000984

08004c9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	617b      	str	r3, [r7, #20]
}
 8004cc0:	bf00      	nop
 8004cc2:	e7fe      	b.n	8004cc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3318      	adds	r3, #24
 8004cca:	4619      	mov	r1, r3
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7fe fdec 	bl	80038aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	68b8      	ldr	r0, [r7, #8]
 8004ce2:	f000 fad3 	bl	800528c <prvAddCurrentTaskToDelayedList>
	}
 8004ce6:	bf00      	nop
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000984 	.word	0x20000984

08004cf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	60fb      	str	r3, [r7, #12]
}
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	3318      	adds	r3, #24
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe fe1b 	bl	8003960 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d2a:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <xTaskRemoveFromEventList+0xb0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d11d      	bne.n	8004d6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	3304      	adds	r3, #4
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe fe12 	bl	8003960 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d40:	4b19      	ldr	r3, [pc, #100]	; (8004da8 <xTaskRemoveFromEventList+0xb4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d903      	bls.n	8004d50 <xTaskRemoveFromEventList+0x5c>
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	4a16      	ldr	r2, [pc, #88]	; (8004da8 <xTaskRemoveFromEventList+0xb4>)
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4a13      	ldr	r2, [pc, #76]	; (8004dac <xTaskRemoveFromEventList+0xb8>)
 8004d5e:	441a      	add	r2, r3
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	3304      	adds	r3, #4
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f7fe fd9f 	bl	80038aa <vListInsertEnd>
 8004d6c:	e005      	b.n	8004d7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	3318      	adds	r3, #24
 8004d72:	4619      	mov	r1, r3
 8004d74:	480e      	ldr	r0, [pc, #56]	; (8004db0 <xTaskRemoveFromEventList+0xbc>)
 8004d76:	f7fe fd98 	bl	80038aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <xTaskRemoveFromEventList+0xc0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d905      	bls.n	8004d94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <xTaskRemoveFromEventList+0xc4>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e001      	b.n	8004d98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004d98:	697b      	ldr	r3, [r7, #20]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000e80 	.word	0x20000e80
 8004da8:	20000e60 	.word	0x20000e60
 8004dac:	20000988 	.word	0x20000988
 8004db0:	20000e18 	.word	0x20000e18
 8004db4:	20000984 	.word	0x20000984
 8004db8:	20000e6c 	.word	0x20000e6c

08004dbc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004dc6:	4b29      	ldr	r3, [pc, #164]	; (8004e6c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	613b      	str	r3, [r7, #16]
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	60fb      	str	r3, [r7, #12]
}
 8004e0c:	bf00      	nop
 8004e0e:	e7fe      	b.n	8004e0e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fe fda5 	bl	8003960 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe fda0 	bl	8003960 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e24:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d903      	bls.n	8004e34 <vTaskRemoveFromUnorderedEventList+0x78>
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	4a0f      	ldr	r2, [pc, #60]	; (8004e70 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4a0c      	ldr	r2, [pc, #48]	; (8004e74 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004e42:	441a      	add	r2, r3
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	3304      	adds	r3, #4
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	f7fe fd2d 	bl	80038aa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e54:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d902      	bls.n	8004e64 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004e5e:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	601a      	str	r2, [r3, #0]
	}
}
 8004e64:	bf00      	nop
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20000e80 	.word	0x20000e80
 8004e70:	20000e60 	.word	0x20000e60
 8004e74:	20000988 	.word	0x20000988
 8004e78:	20000984 	.word	0x20000984
 8004e7c:	20000e6c 	.word	0x20000e6c

08004e80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e88:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <vTaskInternalSetTimeOutState+0x24>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e90:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <vTaskInternalSetTimeOutState+0x28>)
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	605a      	str	r2, [r3, #4]
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20000e70 	.word	0x20000e70
 8004ea8:	20000e5c 	.word	0x20000e5c

08004eac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	613b      	str	r3, [r7, #16]
}
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	60fb      	str	r3, [r7, #12]
}
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004eee:	f000 fe45 	bl	8005b7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ef2:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <xTaskCheckForTimeOut+0xbc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d102      	bne.n	8004f12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	e023      	b.n	8004f5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <xTaskCheckForTimeOut+0xc0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d007      	beq.n	8004f2e <xTaskCheckForTimeOut+0x82>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d302      	bcc.n	8004f2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	e015      	b.n	8004f5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d20b      	bcs.n	8004f50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	1ad2      	subs	r2, r2, r3
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff ff9b 	bl	8004e80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	e004      	b.n	8004f5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f56:	2301      	movs	r3, #1
 8004f58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f5a:	f000 fe3f 	bl	8005bdc <vPortExitCritical>

	return xReturn;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20000e5c 	.word	0x20000e5c
 8004f6c:	20000e70 	.word	0x20000e70

08004f70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f74:	4b03      	ldr	r3, [pc, #12]	; (8004f84 <vTaskMissedYield+0x14>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20000e6c 	.word	0x20000e6c

08004f88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f90:	f000 f852 	bl	8005038 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f94:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <prvIdleTask+0x28>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d9f9      	bls.n	8004f90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f9c:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <prvIdleTask+0x2c>)
 8004f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fac:	e7f0      	b.n	8004f90 <prvIdleTask+0x8>
 8004fae:	bf00      	nop
 8004fb0:	20000988 	.word	0x20000988
 8004fb4:	e000ed04 	.word	0xe000ed04

08004fb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	e00c      	b.n	8004fde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4a12      	ldr	r2, [pc, #72]	; (8005018 <prvInitialiseTaskLists+0x60>)
 8004fd0:	4413      	add	r3, r2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe fc3e 	bl	8003854 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	607b      	str	r3, [r7, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b37      	cmp	r3, #55	; 0x37
 8004fe2:	d9ef      	bls.n	8004fc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fe4:	480d      	ldr	r0, [pc, #52]	; (800501c <prvInitialiseTaskLists+0x64>)
 8004fe6:	f7fe fc35 	bl	8003854 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fea:	480d      	ldr	r0, [pc, #52]	; (8005020 <prvInitialiseTaskLists+0x68>)
 8004fec:	f7fe fc32 	bl	8003854 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ff0:	480c      	ldr	r0, [pc, #48]	; (8005024 <prvInitialiseTaskLists+0x6c>)
 8004ff2:	f7fe fc2f 	bl	8003854 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ff6:	480c      	ldr	r0, [pc, #48]	; (8005028 <prvInitialiseTaskLists+0x70>)
 8004ff8:	f7fe fc2c 	bl	8003854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ffc:	480b      	ldr	r0, [pc, #44]	; (800502c <prvInitialiseTaskLists+0x74>)
 8004ffe:	f7fe fc29 	bl	8003854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005002:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <prvInitialiseTaskLists+0x78>)
 8005004:	4a05      	ldr	r2, [pc, #20]	; (800501c <prvInitialiseTaskLists+0x64>)
 8005006:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <prvInitialiseTaskLists+0x7c>)
 800500a:	4a05      	ldr	r2, [pc, #20]	; (8005020 <prvInitialiseTaskLists+0x68>)
 800500c:	601a      	str	r2, [r3, #0]
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000988 	.word	0x20000988
 800501c:	20000de8 	.word	0x20000de8
 8005020:	20000dfc 	.word	0x20000dfc
 8005024:	20000e18 	.word	0x20000e18
 8005028:	20000e2c 	.word	0x20000e2c
 800502c:	20000e44 	.word	0x20000e44
 8005030:	20000e10 	.word	0x20000e10
 8005034:	20000e14 	.word	0x20000e14

08005038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800503e:	e019      	b.n	8005074 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005040:	f000 fd9c 	bl	8005b7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005044:	4b10      	ldr	r3, [pc, #64]	; (8005088 <prvCheckTasksWaitingTermination+0x50>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3304      	adds	r3, #4
 8005050:	4618      	mov	r0, r3
 8005052:	f7fe fc85 	bl	8003960 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005056:	4b0d      	ldr	r3, [pc, #52]	; (800508c <prvCheckTasksWaitingTermination+0x54>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3b01      	subs	r3, #1
 800505c:	4a0b      	ldr	r2, [pc, #44]	; (800508c <prvCheckTasksWaitingTermination+0x54>)
 800505e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <prvCheckTasksWaitingTermination+0x58>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3b01      	subs	r3, #1
 8005066:	4a0a      	ldr	r2, [pc, #40]	; (8005090 <prvCheckTasksWaitingTermination+0x58>)
 8005068:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800506a:	f000 fdb7 	bl	8005bdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f810 	bl	8005094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005074:	4b06      	ldr	r3, [pc, #24]	; (8005090 <prvCheckTasksWaitingTermination+0x58>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e1      	bne.n	8005040 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000e2c 	.word	0x20000e2c
 800508c:	20000e58 	.word	0x20000e58
 8005090:	20000e40 	.word	0x20000e40

08005094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3354      	adds	r3, #84	; 0x54
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 f88d 	bl	80061c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d108      	bne.n	80050c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 ff25 	bl	8005f04 <vPortFree>
				vPortFree( pxTCB );
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 ff22 	bl	8005f04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050c0:	e018      	b.n	80050f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d103      	bne.n	80050d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 ff19 	bl	8005f04 <vPortFree>
	}
 80050d2:	e00f      	b.n	80050f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d00a      	beq.n	80050f4 <prvDeleteTCB+0x60>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	60fb      	str	r3, [r7, #12]
}
 80050f0:	bf00      	nop
 80050f2:	e7fe      	b.n	80050f2 <prvDeleteTCB+0x5e>
	}
 80050f4:	bf00      	nop
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005102:	4b0e      	ldr	r3, [pc, #56]	; (800513c <prvResetNextTaskUnblockTime+0x40>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <prvResetNextTaskUnblockTime+0x14>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <prvResetNextTaskUnblockTime+0x16>
 8005110:	2300      	movs	r3, #0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <prvResetNextTaskUnblockTime+0x44>)
 8005118:	f04f 32ff 	mov.w	r2, #4294967295
 800511c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800511e:	e008      	b.n	8005132 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <prvResetNextTaskUnblockTime+0x40>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4a04      	ldr	r2, [pc, #16]	; (8005140 <prvResetNextTaskUnblockTime+0x44>)
 8005130:	6013      	str	r3, [r2, #0]
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr
 800513c:	20000e10 	.word	0x20000e10
 8005140:	20000e78 	.word	0x20000e78

08005144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <xTaskGetSchedulerState+0x34>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d102      	bne.n	8005158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005152:	2301      	movs	r3, #1
 8005154:	607b      	str	r3, [r7, #4]
 8005156:	e008      	b.n	800516a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005158:	4b08      	ldr	r3, [pc, #32]	; (800517c <xTaskGetSchedulerState+0x38>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d102      	bne.n	8005166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005160:	2302      	movs	r3, #2
 8005162:	607b      	str	r3, [r7, #4]
 8005164:	e001      	b.n	800516a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005166:	2300      	movs	r3, #0
 8005168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800516a:	687b      	ldr	r3, [r7, #4]
	}
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20000e64 	.word	0x20000e64
 800517c:	20000e80 	.word	0x20000e80

08005180 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d056      	beq.n	8005244 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005196:	4b2e      	ldr	r3, [pc, #184]	; (8005250 <xTaskPriorityDisinherit+0xd0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	429a      	cmp	r2, r3
 800519e:	d00a      	beq.n	80051b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	60fb      	str	r3, [r7, #12]
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	60bb      	str	r3, [r7, #8]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d8:	1e5a      	subs	r2, r3, #1
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d02c      	beq.n	8005244 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d128      	bne.n	8005244 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe fbb2 	bl	8003960 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <xTaskPriorityDisinherit+0xd4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d903      	bls.n	8005224 <xTaskPriorityDisinherit+0xa4>
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	4a0c      	ldr	r2, [pc, #48]	; (8005254 <xTaskPriorityDisinherit+0xd4>)
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4a09      	ldr	r2, [pc, #36]	; (8005258 <xTaskPriorityDisinherit+0xd8>)
 8005232:	441a      	add	r2, r3
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	3304      	adds	r3, #4
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f7fe fb35 	bl	80038aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005240:	2301      	movs	r3, #1
 8005242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005244:	697b      	ldr	r3, [r7, #20]
	}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000984 	.word	0x20000984
 8005254:	20000e60 	.word	0x20000e60
 8005258:	20000988 	.word	0x20000988

0800525c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005262:	4b09      	ldr	r3, [pc, #36]	; (8005288 <uxTaskResetEventItemValue+0x2c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800526a:	4b07      	ldr	r3, [pc, #28]	; (8005288 <uxTaskResetEventItemValue+0x2c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005270:	4b05      	ldr	r3, [pc, #20]	; (8005288 <uxTaskResetEventItemValue+0x2c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8005278:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800527a:	687b      	ldr	r3, [r7, #4]
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	20000984 	.word	0x20000984

0800528c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005296:	4b21      	ldr	r3, [pc, #132]	; (800531c <prvAddCurrentTaskToDelayedList+0x90>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800529c:	4b20      	ldr	r3, [pc, #128]	; (8005320 <prvAddCurrentTaskToDelayedList+0x94>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe fb5c 	bl	8003960 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ae:	d10a      	bne.n	80052c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052b6:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <prvAddCurrentTaskToDelayedList+0x94>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4819      	ldr	r0, [pc, #100]	; (8005324 <prvAddCurrentTaskToDelayedList+0x98>)
 80052c0:	f7fe faf3 	bl	80038aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052c4:	e026      	b.n	8005314 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4413      	add	r3, r2
 80052cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052ce:	4b14      	ldr	r3, [pc, #80]	; (8005320 <prvAddCurrentTaskToDelayedList+0x94>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d209      	bcs.n	80052f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052de:	4b12      	ldr	r3, [pc, #72]	; (8005328 <prvAddCurrentTaskToDelayedList+0x9c>)
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <prvAddCurrentTaskToDelayedList+0x94>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3304      	adds	r3, #4
 80052e8:	4619      	mov	r1, r3
 80052ea:	4610      	mov	r0, r2
 80052ec:	f7fe fb00 	bl	80038f0 <vListInsert>
}
 80052f0:	e010      	b.n	8005314 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052f2:	4b0e      	ldr	r3, [pc, #56]	; (800532c <prvAddCurrentTaskToDelayedList+0xa0>)
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <prvAddCurrentTaskToDelayedList+0x94>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f7fe faf6 	bl	80038f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	429a      	cmp	r2, r3
 800530c:	d202      	bcs.n	8005314 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800530e:	4a08      	ldr	r2, [pc, #32]	; (8005330 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	6013      	str	r3, [r2, #0]
}
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000e5c 	.word	0x20000e5c
 8005320:	20000984 	.word	0x20000984
 8005324:	20000e44 	.word	0x20000e44
 8005328:	20000e14 	.word	0x20000e14
 800532c:	20000e10 	.word	0x20000e10
 8005330:	20000e78 	.word	0x20000e78

08005334 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	; 0x28
 8005338:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800533e:	f000 facb 	bl	80058d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005342:	4b1c      	ldr	r3, [pc, #112]	; (80053b4 <xTimerCreateTimerTask+0x80>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d021      	beq.n	800538e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005352:	1d3a      	adds	r2, r7, #4
 8005354:	f107 0108 	add.w	r1, r7, #8
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	4618      	mov	r0, r3
 800535e:	f7fe f871 	bl	8003444 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	9202      	str	r2, [sp, #8]
 800536a:	9301      	str	r3, [sp, #4]
 800536c:	2302      	movs	r3, #2
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	2300      	movs	r3, #0
 8005372:	460a      	mov	r2, r1
 8005374:	4910      	ldr	r1, [pc, #64]	; (80053b8 <xTimerCreateTimerTask+0x84>)
 8005376:	4811      	ldr	r0, [pc, #68]	; (80053bc <xTimerCreateTimerTask+0x88>)
 8005378:	f7ff f800 	bl	800437c <xTaskCreateStatic>
 800537c:	4603      	mov	r3, r0
 800537e:	4a10      	ldr	r2, [pc, #64]	; (80053c0 <xTimerCreateTimerTask+0x8c>)
 8005380:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005382:	4b0f      	ldr	r3, [pc, #60]	; (80053c0 <xTimerCreateTimerTask+0x8c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800538a:	2301      	movs	r3, #1
 800538c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	613b      	str	r3, [r7, #16]
}
 80053a6:	bf00      	nop
 80053a8:	e7fe      	b.n	80053a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80053aa:	697b      	ldr	r3, [r7, #20]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20000eb4 	.word	0x20000eb4
 80053b8:	0800653c 	.word	0x0800653c
 80053bc:	080054e1 	.word	0x080054e1
 80053c0:	20000eb8 	.word	0x20000eb8

080053c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08a      	sub	sp, #40	; 0x28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	623b      	str	r3, [r7, #32]
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80053f2:	4b1a      	ldr	r3, [pc, #104]	; (800545c <xTimerGenericCommand+0x98>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d02a      	beq.n	8005450 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b05      	cmp	r3, #5
 800540a:	dc18      	bgt.n	800543e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800540c:	f7ff fe9a 	bl	8005144 <xTaskGetSchedulerState>
 8005410:	4603      	mov	r3, r0
 8005412:	2b02      	cmp	r3, #2
 8005414:	d109      	bne.n	800542a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005416:	4b11      	ldr	r3, [pc, #68]	; (800545c <xTimerGenericCommand+0x98>)
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	f107 0110 	add.w	r1, r7, #16
 800541e:	2300      	movs	r3, #0
 8005420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005422:	f7fe fbc9 	bl	8003bb8 <xQueueGenericSend>
 8005426:	6278      	str	r0, [r7, #36]	; 0x24
 8005428:	e012      	b.n	8005450 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800542a:	4b0c      	ldr	r3, [pc, #48]	; (800545c <xTimerGenericCommand+0x98>)
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	f107 0110 	add.w	r1, r7, #16
 8005432:	2300      	movs	r3, #0
 8005434:	2200      	movs	r2, #0
 8005436:	f7fe fbbf 	bl	8003bb8 <xQueueGenericSend>
 800543a:	6278      	str	r0, [r7, #36]	; 0x24
 800543c:	e008      	b.n	8005450 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800543e:	4b07      	ldr	r3, [pc, #28]	; (800545c <xTimerGenericCommand+0x98>)
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	f107 0110 	add.w	r1, r7, #16
 8005446:	2300      	movs	r3, #0
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	f7fe fcb3 	bl	8003db4 <xQueueGenericSendFromISR>
 800544e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005452:	4618      	mov	r0, r3
 8005454:	3728      	adds	r7, #40	; 0x28
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000eb4 	.word	0x20000eb4

08005460 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af02      	add	r7, sp, #8
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800546a:	4b1c      	ldr	r3, [pc, #112]	; (80054dc <prvProcessExpiredTimer+0x7c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	3304      	adds	r3, #4
 8005478:	4618      	mov	r0, r3
 800547a:	f7fe fa71 	bl	8003960 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d122      	bne.n	80054cc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	18d1      	adds	r1, r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	6978      	ldr	r0, [r7, #20]
 8005494:	f000 f8c8 	bl	8005628 <prvInsertTimerInActiveList>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d016      	beq.n	80054cc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800549e:	2300      	movs	r3, #0
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	2300      	movs	r3, #0
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	2100      	movs	r1, #0
 80054a8:	6978      	ldr	r0, [r7, #20]
 80054aa:	f7ff ff8b 	bl	80053c4 <xTimerGenericCommand>
 80054ae:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10a      	bne.n	80054cc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	60fb      	str	r3, [r7, #12]
}
 80054c8:	bf00      	nop
 80054ca:	e7fe      	b.n	80054ca <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	6978      	ldr	r0, [r7, #20]
 80054d2:	4798      	blx	r3
}
 80054d4:	bf00      	nop
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000eac 	.word	0x20000eac

080054e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054e8:	f107 0308 	add.w	r3, r7, #8
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 f857 	bl	80055a0 <prvGetNextExpireTime>
 80054f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4619      	mov	r1, r3
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f803 	bl	8005504 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054fe:	f000 f8d5 	bl	80056ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005502:	e7f1      	b.n	80054e8 <prvTimerTask+0x8>

08005504 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800550e:	f7ff f989 	bl	8004824 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005512:	f107 0308 	add.w	r3, r7, #8
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f866 	bl	80055e8 <prvSampleTimeNow>
 800551c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d130      	bne.n	8005586 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <prvProcessTimerOrBlockTask+0x3c>
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	429a      	cmp	r2, r3
 8005530:	d806      	bhi.n	8005540 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005532:	f7ff f985 	bl	8004840 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005536:	68f9      	ldr	r1, [r7, #12]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff ff91 	bl	8005460 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800553e:	e024      	b.n	800558a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d008      	beq.n	8005558 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <prvProcessTimerOrBlockTask+0x90>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	bf0c      	ite	eq
 8005550:	2301      	moveq	r3, #1
 8005552:	2300      	movne	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005558:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <prvProcessTimerOrBlockTask+0x94>)
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	4619      	mov	r1, r3
 8005566:	f7fe fed5 	bl	8004314 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800556a:	f7ff f969 	bl	8004840 <xTaskResumeAll>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005574:	4b09      	ldr	r3, [pc, #36]	; (800559c <prvProcessTimerOrBlockTask+0x98>)
 8005576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	f3bf 8f6f 	isb	sy
}
 8005584:	e001      	b.n	800558a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005586:	f7ff f95b 	bl	8004840 <xTaskResumeAll>
}
 800558a:	bf00      	nop
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000eb0 	.word	0x20000eb0
 8005598:	20000eb4 	.word	0x20000eb4
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055a8:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <prvGetNextExpireTime+0x44>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	bf0c      	ite	eq
 80055b2:	2301      	moveq	r3, #1
 80055b4:	2300      	movne	r3, #0
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d105      	bne.n	80055d2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055c6:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <prvGetNextExpireTime+0x44>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	e001      	b.n	80055d6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80055d6:	68fb      	ldr	r3, [r7, #12]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000eac 	.word	0x20000eac

080055e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055f0:	f7ff f9c4 	bl	800497c <xTaskGetTickCount>
 80055f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055f6:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <prvSampleTimeNow+0x3c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d205      	bcs.n	800560c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005600:	f000 f908 	bl	8005814 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e002      	b.n	8005612 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005612:	4a04      	ldr	r2, [pc, #16]	; (8005624 <prvSampleTimeNow+0x3c>)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005618:	68fb      	ldr	r3, [r7, #12]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000ebc 	.word	0x20000ebc

08005628 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	429a      	cmp	r2, r3
 800564c:	d812      	bhi.n	8005674 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	1ad2      	subs	r2, r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	429a      	cmp	r2, r3
 800565a:	d302      	bcc.n	8005662 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800565c:	2301      	movs	r3, #1
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	e01b      	b.n	800569a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005662:	4b10      	ldr	r3, [pc, #64]	; (80056a4 <prvInsertTimerInActiveList+0x7c>)
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3304      	adds	r3, #4
 800566a:	4619      	mov	r1, r3
 800566c:	4610      	mov	r0, r2
 800566e:	f7fe f93f 	bl	80038f0 <vListInsert>
 8005672:	e012      	b.n	800569a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d206      	bcs.n	800568a <prvInsertTimerInActiveList+0x62>
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d302      	bcc.n	800568a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005684:	2301      	movs	r3, #1
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	e007      	b.n	800569a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800568a:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <prvInsertTimerInActiveList+0x80>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3304      	adds	r3, #4
 8005692:	4619      	mov	r1, r3
 8005694:	4610      	mov	r0, r2
 8005696:	f7fe f92b 	bl	80038f0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800569a:	697b      	ldr	r3, [r7, #20]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000eb0 	.word	0x20000eb0
 80056a8:	20000eac 	.word	0x20000eac

080056ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08e      	sub	sp, #56	; 0x38
 80056b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056b2:	e09d      	b.n	80057f0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	da18      	bge.n	80056ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	3304      	adds	r3, #4
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	61fb      	str	r3, [r7, #28]
}
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056e2:	6850      	ldr	r0, [r2, #4]
 80056e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056e6:	6892      	ldr	r2, [r2, #8]
 80056e8:	4611      	mov	r1, r2
 80056ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	db7d      	blt.n	80057ee <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	3304      	adds	r3, #4
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe f92c 	bl	8003960 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005708:	463b      	mov	r3, r7
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff ff6c 	bl	80055e8 <prvSampleTimeNow>
 8005710:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b09      	cmp	r3, #9
 8005716:	d86b      	bhi.n	80057f0 <prvProcessReceivedCommands+0x144>
 8005718:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <prvProcessReceivedCommands+0x74>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005749 	.word	0x08005749
 8005724:	08005749 	.word	0x08005749
 8005728:	08005749 	.word	0x08005749
 800572c:	080057f1 	.word	0x080057f1
 8005730:	080057a5 	.word	0x080057a5
 8005734:	080057dd 	.word	0x080057dd
 8005738:	08005749 	.word	0x08005749
 800573c:	08005749 	.word	0x08005749
 8005740:	080057f1 	.word	0x080057f1
 8005744:	080057a5 	.word	0x080057a5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	18d1      	adds	r1, r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005756:	f7ff ff67 	bl	8005628 <prvInsertTimerInActiveList>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d047      	beq.n	80057f0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005766:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d13f      	bne.n	80057f0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	441a      	add	r2, r3
 8005778:	2300      	movs	r3, #0
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	2300      	movs	r3, #0
 800577e:	2100      	movs	r1, #0
 8005780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005782:	f7ff fe1f 	bl	80053c4 <xTimerGenericCommand>
 8005786:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d130      	bne.n	80057f0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	61bb      	str	r3, [r7, #24]
}
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	617b      	str	r3, [r7, #20]
}
 80057c4:	bf00      	nop
 80057c6:	e7fe      	b.n	80057c6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	699a      	ldr	r2, [r3, #24]
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	18d1      	adds	r1, r2, r3
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d6:	f7ff ff27 	bl	8005628 <prvInsertTimerInActiveList>
					break;
 80057da:	e009      	b.n	80057f0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d104      	bne.n	80057f0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80057e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057e8:	f000 fb8c 	bl	8005f04 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80057ec:	e000      	b.n	80057f0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80057ee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057f0:	4b07      	ldr	r3, [pc, #28]	; (8005810 <prvProcessReceivedCommands+0x164>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	1d39      	adds	r1, r7, #4
 80057f6:	2200      	movs	r2, #0
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe fb73 	bl	8003ee4 <xQueueReceive>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	f47f af57 	bne.w	80056b4 <prvProcessReceivedCommands+0x8>
	}
}
 8005806:	bf00      	nop
 8005808:	bf00      	nop
 800580a:	3730      	adds	r7, #48	; 0x30
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20000eb4 	.word	0x20000eb4

08005814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800581a:	e045      	b.n	80058a8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800581c:	4b2c      	ldr	r3, [pc, #176]	; (80058d0 <prvSwitchTimerLists+0xbc>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005826:	4b2a      	ldr	r3, [pc, #168]	; (80058d0 <prvSwitchTimerLists+0xbc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3304      	adds	r3, #4
 8005834:	4618      	mov	r0, r3
 8005836:	f7fe f893 	bl	8003960 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d12e      	bne.n	80058a8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4413      	add	r3, r2
 8005852:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	429a      	cmp	r2, r3
 800585a:	d90e      	bls.n	800587a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005868:	4b19      	ldr	r3, [pc, #100]	; (80058d0 <prvSwitchTimerLists+0xbc>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3304      	adds	r3, #4
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f7fe f83c 	bl	80038f0 <vListInsert>
 8005878:	e016      	b.n	80058a8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800587a:	2300      	movs	r3, #0
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	2300      	movs	r3, #0
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	2100      	movs	r1, #0
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff fd9d 	bl	80053c4 <xTimerGenericCommand>
 800588a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	603b      	str	r3, [r7, #0]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058a8:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <prvSwitchTimerLists+0xbc>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1b4      	bne.n	800581c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058b2:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <prvSwitchTimerLists+0xbc>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058b8:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <prvSwitchTimerLists+0xc0>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a04      	ldr	r2, [pc, #16]	; (80058d0 <prvSwitchTimerLists+0xbc>)
 80058be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058c0:	4a04      	ldr	r2, [pc, #16]	; (80058d4 <prvSwitchTimerLists+0xc0>)
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	6013      	str	r3, [r2, #0]
}
 80058c6:	bf00      	nop
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000eac 	.word	0x20000eac
 80058d4:	20000eb0 	.word	0x20000eb0

080058d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058de:	f000 f94d 	bl	8005b7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058e2:	4b15      	ldr	r3, [pc, #84]	; (8005938 <prvCheckForValidListAndQueue+0x60>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d120      	bne.n	800592c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058ea:	4814      	ldr	r0, [pc, #80]	; (800593c <prvCheckForValidListAndQueue+0x64>)
 80058ec:	f7fd ffb2 	bl	8003854 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80058f0:	4813      	ldr	r0, [pc, #76]	; (8005940 <prvCheckForValidListAndQueue+0x68>)
 80058f2:	f7fd ffaf 	bl	8003854 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80058f6:	4b13      	ldr	r3, [pc, #76]	; (8005944 <prvCheckForValidListAndQueue+0x6c>)
 80058f8:	4a10      	ldr	r2, [pc, #64]	; (800593c <prvCheckForValidListAndQueue+0x64>)
 80058fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80058fc:	4b12      	ldr	r3, [pc, #72]	; (8005948 <prvCheckForValidListAndQueue+0x70>)
 80058fe:	4a10      	ldr	r2, [pc, #64]	; (8005940 <prvCheckForValidListAndQueue+0x68>)
 8005900:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005902:	2300      	movs	r3, #0
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	4b11      	ldr	r3, [pc, #68]	; (800594c <prvCheckForValidListAndQueue+0x74>)
 8005908:	4a11      	ldr	r2, [pc, #68]	; (8005950 <prvCheckForValidListAndQueue+0x78>)
 800590a:	2110      	movs	r1, #16
 800590c:	200a      	movs	r0, #10
 800590e:	f7fe f8b9 	bl	8003a84 <xQueueGenericCreateStatic>
 8005912:	4603      	mov	r3, r0
 8005914:	4a08      	ldr	r2, [pc, #32]	; (8005938 <prvCheckForValidListAndQueue+0x60>)
 8005916:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005918:	4b07      	ldr	r3, [pc, #28]	; (8005938 <prvCheckForValidListAndQueue+0x60>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005920:	4b05      	ldr	r3, [pc, #20]	; (8005938 <prvCheckForValidListAndQueue+0x60>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	490b      	ldr	r1, [pc, #44]	; (8005954 <prvCheckForValidListAndQueue+0x7c>)
 8005926:	4618      	mov	r0, r3
 8005928:	f7fe fccc 	bl	80042c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800592c:	f000 f956 	bl	8005bdc <vPortExitCritical>
}
 8005930:	bf00      	nop
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000eb4 	.word	0x20000eb4
 800593c:	20000e84 	.word	0x20000e84
 8005940:	20000e98 	.word	0x20000e98
 8005944:	20000eac 	.word	0x20000eac
 8005948:	20000eb0 	.word	0x20000eb0
 800594c:	20000f60 	.word	0x20000f60
 8005950:	20000ec0 	.word	0x20000ec0
 8005954:	08006544 	.word	0x08006544

08005958 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08a      	sub	sp, #40	; 0x28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8005966:	f06f 0301 	mvn.w	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <xTimerPendFunctionCallFromISR+0x3c>)
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	f107 0114 	add.w	r1, r7, #20
 8005980:	2300      	movs	r3, #0
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	f7fe fa16 	bl	8003db4 <xQueueGenericSendFromISR>
 8005988:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800598c:	4618      	mov	r0, r3
 800598e:	3728      	adds	r7, #40	; 0x28
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000eb4 	.word	0x20000eb4

08005998 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3b04      	subs	r3, #4
 80059a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3b04      	subs	r3, #4
 80059b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f023 0201 	bic.w	r2, r3, #1
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3b04      	subs	r3, #4
 80059c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059c8:	4a08      	ldr	r2, [pc, #32]	; (80059ec <pxPortInitialiseStack+0x54>)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3b14      	subs	r3, #20
 80059d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3b20      	subs	r3, #32
 80059de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059e0:	68fb      	ldr	r3, [r7, #12]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr
 80059ec:	080059f1 	.word	0x080059f1

080059f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80059f6:	2300      	movs	r3, #0
 80059f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059fa:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <prvTaskExitError+0x54>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a02:	d00a      	beq.n	8005a1a <prvTaskExitError+0x2a>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	60fb      	str	r3, [r7, #12]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <prvTaskExitError+0x28>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	60bb      	str	r3, [r7, #8]
}
 8005a2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a2e:	bf00      	nop
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0fc      	beq.n	8005a30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	20000184 	.word	0x20000184
	...

08005a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a50:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <pxCurrentTCBConst2>)
 8005a52:	6819      	ldr	r1, [r3, #0]
 8005a54:	6808      	ldr	r0, [r1, #0]
 8005a56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a5a:	f380 8809 	msr	PSP, r0
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f04f 0000 	mov.w	r0, #0
 8005a66:	f380 8811 	msr	BASEPRI, r0
 8005a6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005a6e:	4770      	bx	lr

08005a70 <pxCurrentTCBConst2>:
 8005a70:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop

08005a78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005a78:	4806      	ldr	r0, [pc, #24]	; (8005a94 <prvPortStartFirstTask+0x1c>)
 8005a7a:	6800      	ldr	r0, [r0, #0]
 8005a7c:	6800      	ldr	r0, [r0, #0]
 8005a7e:	f380 8808 	msr	MSP, r0
 8005a82:	b662      	cpsie	i
 8005a84:	b661      	cpsie	f
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	df00      	svc	0
 8005a90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a92:	bf00      	nop
 8005a94:	e000ed08 	.word	0xe000ed08

08005a98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a9e:	4b32      	ldr	r3, [pc, #200]	; (8005b68 <xPortStartScheduler+0xd0>)
 8005aa0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	22ff      	movs	r2, #255	; 0xff
 8005aae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	4b2a      	ldr	r3, [pc, #168]	; (8005b6c <xPortStartScheduler+0xd4>)
 8005ac4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ac6:	4b2a      	ldr	r3, [pc, #168]	; (8005b70 <xPortStartScheduler+0xd8>)
 8005ac8:	2207      	movs	r2, #7
 8005aca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005acc:	e009      	b.n	8005ae2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005ace:	4b28      	ldr	r3, [pc, #160]	; (8005b70 <xPortStartScheduler+0xd8>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	4a26      	ldr	r2, [pc, #152]	; (8005b70 <xPortStartScheduler+0xd8>)
 8005ad6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ae2:	78fb      	ldrb	r3, [r7, #3]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aea:	2b80      	cmp	r3, #128	; 0x80
 8005aec:	d0ef      	beq.n	8005ace <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005aee:	4b20      	ldr	r3, [pc, #128]	; (8005b70 <xPortStartScheduler+0xd8>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f1c3 0307 	rsb	r3, r3, #7
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d00a      	beq.n	8005b10 <xPortStartScheduler+0x78>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	60bb      	str	r3, [r7, #8]
}
 8005b0c:	bf00      	nop
 8005b0e:	e7fe      	b.n	8005b0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b10:	4b17      	ldr	r3, [pc, #92]	; (8005b70 <xPortStartScheduler+0xd8>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	021b      	lsls	r3, r3, #8
 8005b16:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <xPortStartScheduler+0xd8>)
 8005b18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b1a:	4b15      	ldr	r3, [pc, #84]	; (8005b70 <xPortStartScheduler+0xd8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b22:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <xPortStartScheduler+0xd8>)
 8005b24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b2e:	4b11      	ldr	r3, [pc, #68]	; (8005b74 <xPortStartScheduler+0xdc>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a10      	ldr	r2, [pc, #64]	; (8005b74 <xPortStartScheduler+0xdc>)
 8005b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <xPortStartScheduler+0xdc>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a0d      	ldr	r2, [pc, #52]	; (8005b74 <xPortStartScheduler+0xdc>)
 8005b40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b46:	f000 f8b9 	bl	8005cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b4a:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <xPortStartScheduler+0xe0>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b50:	f7ff ff92 	bl	8005a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b54:	f7fe ffde 	bl	8004b14 <vTaskSwitchContext>
	prvTaskExitError();
 8005b58:	f7ff ff4a 	bl	80059f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	e000e400 	.word	0xe000e400
 8005b6c:	20000fb0 	.word	0x20000fb0
 8005b70:	20000fb4 	.word	0x20000fb4
 8005b74:	e000ed20 	.word	0xe000ed20
 8005b78:	20000184 	.word	0x20000184

08005b7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	607b      	str	r3, [r7, #4]
}
 8005b94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b96:	4b0f      	ldr	r3, [pc, #60]	; (8005bd4 <vPortEnterCritical+0x58>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	4a0d      	ldr	r2, [pc, #52]	; (8005bd4 <vPortEnterCritical+0x58>)
 8005b9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ba0:	4b0c      	ldr	r3, [pc, #48]	; (8005bd4 <vPortEnterCritical+0x58>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d10f      	bne.n	8005bc8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <vPortEnterCritical+0x5c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <vPortEnterCritical+0x4c>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	603b      	str	r3, [r7, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	e7fe      	b.n	8005bc6 <vPortEnterCritical+0x4a>
	}
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bc80      	pop	{r7}
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000184 	.word	0x20000184
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005be2:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <vPortExitCritical+0x4c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <vPortExitCritical+0x24>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	607b      	str	r3, [r7, #4]
}
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <vPortExitCritical+0x4c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	4a08      	ldr	r2, [pc, #32]	; (8005c28 <vPortExitCritical+0x4c>)
 8005c08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c0a:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <vPortExitCritical+0x4c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d105      	bne.n	8005c1e <vPortExitCritical+0x42>
 8005c12:	2300      	movs	r3, #0
 8005c14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	f383 8811 	msr	BASEPRI, r3
}
 8005c1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr
 8005c28:	20000184 	.word	0x20000184
 8005c2c:	00000000 	.word	0x00000000

08005c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c30:	f3ef 8009 	mrs	r0, PSP
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <pxCurrentTCBConst>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c40:	6010      	str	r0, [r2, #0]
 8005c42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005c46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c4a:	f380 8811 	msr	BASEPRI, r0
 8005c4e:	f7fe ff61 	bl	8004b14 <vTaskSwitchContext>
 8005c52:	f04f 0000 	mov.w	r0, #0
 8005c56:	f380 8811 	msr	BASEPRI, r0
 8005c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005c5e:	6819      	ldr	r1, [r3, #0]
 8005c60:	6808      	ldr	r0, [r1, #0]
 8005c62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c66:	f380 8809 	msr	PSP, r0
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	4770      	bx	lr

08005c70 <pxCurrentTCBConst>:
 8005c70:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop

08005c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	607b      	str	r3, [r7, #4]
}
 8005c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c92:	f7fe fe81 	bl	8004998 <xTaskIncrementTick>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <SysTick_Handler+0x40>)
 8005c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	f383 8811 	msr	BASEPRI, r3
}
 8005cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	e000ed04 	.word	0xe000ed04

08005cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <vPortSetupTimerInterrupt+0x30>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cc6:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <vPortSetupTimerInterrupt+0x34>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ccc:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <vPortSetupTimerInterrupt+0x38>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a09      	ldr	r2, [pc, #36]	; (8005cf8 <vPortSetupTimerInterrupt+0x3c>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	099b      	lsrs	r3, r3, #6
 8005cd8:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <vPortSetupTimerInterrupt+0x40>)
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cde:	4b03      	ldr	r3, [pc, #12]	; (8005cec <vPortSetupTimerInterrupt+0x30>)
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	601a      	str	r2, [r3, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr
 8005cec:	e000e010 	.word	0xe000e010
 8005cf0:	e000e018 	.word	0xe000e018
 8005cf4:	20000178 	.word	0x20000178
 8005cf8:	10624dd3 	.word	0x10624dd3
 8005cfc:	e000e014 	.word	0xe000e014

08005d00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d06:	f3ef 8305 	mrs	r3, IPSR
 8005d0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b0f      	cmp	r3, #15
 8005d10:	d914      	bls.n	8005d3c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d12:	4a16      	ldr	r2, [pc, #88]	; (8005d6c <vPortValidateInterruptPriority+0x6c>)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d1c:	4b14      	ldr	r3, [pc, #80]	; (8005d70 <vPortValidateInterruptPriority+0x70>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	7afa      	ldrb	r2, [r7, #11]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d20a      	bcs.n	8005d3c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	607b      	str	r3, [r7, #4]
}
 8005d38:	bf00      	nop
 8005d3a:	e7fe      	b.n	8005d3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d3c:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <vPortValidateInterruptPriority+0x74>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <vPortValidateInterruptPriority+0x78>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d90a      	bls.n	8005d62 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	603b      	str	r3, [r7, #0]
}
 8005d5e:	bf00      	nop
 8005d60:	e7fe      	b.n	8005d60 <vPortValidateInterruptPriority+0x60>
	}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr
 8005d6c:	e000e3f0 	.word	0xe000e3f0
 8005d70:	20000fb0 	.word	0x20000fb0
 8005d74:	e000ed0c 	.word	0xe000ed0c
 8005d78:	20000fb4 	.word	0x20000fb4

08005d7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	; 0x28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d88:	f7fe fd4c 	bl	8004824 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d8c:	4b58      	ldr	r3, [pc, #352]	; (8005ef0 <pvPortMalloc+0x174>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d94:	f000 f910 	bl	8005fb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d98:	4b56      	ldr	r3, [pc, #344]	; (8005ef4 <pvPortMalloc+0x178>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f040 808e 	bne.w	8005ec2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01d      	beq.n	8005de8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005dac:	2208      	movs	r2, #8
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4413      	add	r3, r2
 8005db2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d014      	beq.n	8005de8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f023 0307 	bic.w	r3, r3, #7
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <pvPortMalloc+0x6c>
	__asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	617b      	str	r3, [r7, #20]
}
 8005de4:	bf00      	nop
 8005de6:	e7fe      	b.n	8005de6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d069      	beq.n	8005ec2 <pvPortMalloc+0x146>
 8005dee:	4b42      	ldr	r3, [pc, #264]	; (8005ef8 <pvPortMalloc+0x17c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d864      	bhi.n	8005ec2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005df8:	4b40      	ldr	r3, [pc, #256]	; (8005efc <pvPortMalloc+0x180>)
 8005dfa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005dfc:	4b3f      	ldr	r3, [pc, #252]	; (8005efc <pvPortMalloc+0x180>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e02:	e004      	b.n	8005e0e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d903      	bls.n	8005e20 <pvPortMalloc+0xa4>
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1f1      	bne.n	8005e04 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e20:	4b33      	ldr	r3, [pc, #204]	; (8005ef0 <pvPortMalloc+0x174>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d04b      	beq.n	8005ec2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2208      	movs	r2, #8
 8005e30:	4413      	add	r3, r2
 8005e32:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	1ad2      	subs	r2, r2, r3
 8005e44:	2308      	movs	r3, #8
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d91f      	bls.n	8005e8c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4413      	add	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <pvPortMalloc+0xf8>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	613b      	str	r3, [r7, #16]
}
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	1ad2      	subs	r2, r2, r3
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e86:	69b8      	ldr	r0, [r7, #24]
 8005e88:	f000 f8f8 	bl	800607c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e8c:	4b1a      	ldr	r3, [pc, #104]	; (8005ef8 <pvPortMalloc+0x17c>)
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <pvPortMalloc+0x17c>)
 8005e98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e9a:	4b17      	ldr	r3, [pc, #92]	; (8005ef8 <pvPortMalloc+0x17c>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	4b18      	ldr	r3, [pc, #96]	; (8005f00 <pvPortMalloc+0x184>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d203      	bcs.n	8005eae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ea6:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <pvPortMalloc+0x17c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a15      	ldr	r2, [pc, #84]	; (8005f00 <pvPortMalloc+0x184>)
 8005eac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	4b10      	ldr	r3, [pc, #64]	; (8005ef4 <pvPortMalloc+0x178>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ec2:	f7fe fcbd 	bl	8004840 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <pvPortMalloc+0x16a>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	60fb      	str	r3, [r7, #12]
}
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <pvPortMalloc+0x168>
	return pvReturn;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3728      	adds	r7, #40	; 0x28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20001bc0 	.word	0x20001bc0
 8005ef4:	20001bcc 	.word	0x20001bcc
 8005ef8:	20001bc4 	.word	0x20001bc4
 8005efc:	20001bb8 	.word	0x20001bb8
 8005f00:	20001bc8 	.word	0x20001bc8

08005f04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d048      	beq.n	8005fa8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f16:	2308      	movs	r3, #8
 8005f18:	425b      	negs	r3, r3
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	4b21      	ldr	r3, [pc, #132]	; (8005fb0 <vPortFree+0xac>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <vPortFree+0x44>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	60fb      	str	r3, [r7, #12]
}
 8005f44:	bf00      	nop
 8005f46:	e7fe      	b.n	8005f46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <vPortFree+0x62>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	60bb      	str	r3, [r7, #8]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <vPortFree+0xac>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d019      	beq.n	8005fa8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d115      	bne.n	8005fa8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <vPortFree+0xac>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	43db      	mvns	r3, r3
 8005f86:	401a      	ands	r2, r3
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f8c:	f7fe fc4a 	bl	8004824 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <vPortFree+0xb0>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4413      	add	r3, r2
 8005f9a:	4a06      	ldr	r2, [pc, #24]	; (8005fb4 <vPortFree+0xb0>)
 8005f9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f9e:	6938      	ldr	r0, [r7, #16]
 8005fa0:	f000 f86c 	bl	800607c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005fa4:	f7fe fc4c 	bl	8004840 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fa8:	bf00      	nop
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20001bcc 	.word	0x20001bcc
 8005fb4:	20001bc4 	.word	0x20001bc4

08005fb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fbe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005fc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fc4:	4b27      	ldr	r3, [pc, #156]	; (8006064 <prvHeapInit+0xac>)
 8005fc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00c      	beq.n	8005fec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3307      	adds	r3, #7
 8005fd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0307 	bic.w	r3, r3, #7
 8005fde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	4a1f      	ldr	r2, [pc, #124]	; (8006064 <prvHeapInit+0xac>)
 8005fe8:	4413      	add	r3, r2
 8005fea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ff0:	4a1d      	ldr	r2, [pc, #116]	; (8006068 <prvHeapInit+0xb0>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ff6:	4b1c      	ldr	r3, [pc, #112]	; (8006068 <prvHeapInit+0xb0>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4413      	add	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006004:	2208      	movs	r2, #8
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	1a9b      	subs	r3, r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0307 	bic.w	r3, r3, #7
 8006012:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4a15      	ldr	r2, [pc, #84]	; (800606c <prvHeapInit+0xb4>)
 8006018:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <prvHeapInit+0xb4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2200      	movs	r2, #0
 8006020:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006022:	4b12      	ldr	r3, [pc, #72]	; (800606c <prvHeapInit+0xb4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	1ad2      	subs	r2, r2, r3
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <prvHeapInit+0xb4>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	4a0a      	ldr	r2, [pc, #40]	; (8006070 <prvHeapInit+0xb8>)
 8006046:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4a09      	ldr	r2, [pc, #36]	; (8006074 <prvHeapInit+0xbc>)
 800604e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006050:	4b09      	ldr	r3, [pc, #36]	; (8006078 <prvHeapInit+0xc0>)
 8006052:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006056:	601a      	str	r2, [r3, #0]
}
 8006058:	bf00      	nop
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000fb8 	.word	0x20000fb8
 8006068:	20001bb8 	.word	0x20001bb8
 800606c:	20001bc0 	.word	0x20001bc0
 8006070:	20001bc8 	.word	0x20001bc8
 8006074:	20001bc4 	.word	0x20001bc4
 8006078:	20001bcc 	.word	0x20001bcc

0800607c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006084:	4b27      	ldr	r3, [pc, #156]	; (8006124 <prvInsertBlockIntoFreeList+0xa8>)
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	e002      	b.n	8006090 <prvInsertBlockIntoFreeList+0x14>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	429a      	cmp	r2, r3
 8006098:	d8f7      	bhi.n	800608a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	4413      	add	r3, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d108      	bne.n	80060be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	441a      	add	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	441a      	add	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d118      	bne.n	8006104 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b14      	ldr	r3, [pc, #80]	; (8006128 <prvInsertBlockIntoFreeList+0xac>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d00d      	beq.n	80060fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	441a      	add	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	e008      	b.n	800610c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060fa:	4b0b      	ldr	r3, [pc, #44]	; (8006128 <prvInsertBlockIntoFreeList+0xac>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e003      	b.n	800610c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d002      	beq.n	800611a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr
 8006124:	20001bb8 	.word	0x20001bb8
 8006128:	20001bc0 	.word	0x20001bc0

0800612c <__libc_init_array>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	2600      	movs	r6, #0
 8006130:	4d0c      	ldr	r5, [pc, #48]	; (8006164 <__libc_init_array+0x38>)
 8006132:	4c0d      	ldr	r4, [pc, #52]	; (8006168 <__libc_init_array+0x3c>)
 8006134:	1b64      	subs	r4, r4, r5
 8006136:	10a4      	asrs	r4, r4, #2
 8006138:	42a6      	cmp	r6, r4
 800613a:	d109      	bne.n	8006150 <__libc_init_array+0x24>
 800613c:	f000 f8f4 	bl	8006328 <_init>
 8006140:	2600      	movs	r6, #0
 8006142:	4d0a      	ldr	r5, [pc, #40]	; (800616c <__libc_init_array+0x40>)
 8006144:	4c0a      	ldr	r4, [pc, #40]	; (8006170 <__libc_init_array+0x44>)
 8006146:	1b64      	subs	r4, r4, r5
 8006148:	10a4      	asrs	r4, r4, #2
 800614a:	42a6      	cmp	r6, r4
 800614c:	d105      	bne.n	800615a <__libc_init_array+0x2e>
 800614e:	bd70      	pop	{r4, r5, r6, pc}
 8006150:	f855 3b04 	ldr.w	r3, [r5], #4
 8006154:	4798      	blx	r3
 8006156:	3601      	adds	r6, #1
 8006158:	e7ee      	b.n	8006138 <__libc_init_array+0xc>
 800615a:	f855 3b04 	ldr.w	r3, [r5], #4
 800615e:	4798      	blx	r3
 8006160:	3601      	adds	r6, #1
 8006162:	e7f2      	b.n	800614a <__libc_init_array+0x1e>
 8006164:	08006688 	.word	0x08006688
 8006168:	08006688 	.word	0x08006688
 800616c:	08006688 	.word	0x08006688
 8006170:	0800668c 	.word	0x0800668c

08006174 <__retarget_lock_acquire_recursive>:
 8006174:	4770      	bx	lr

08006176 <__retarget_lock_release_recursive>:
 8006176:	4770      	bx	lr

08006178 <memcpy>:
 8006178:	440a      	add	r2, r1
 800617a:	4291      	cmp	r1, r2
 800617c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006180:	d100      	bne.n	8006184 <memcpy+0xc>
 8006182:	4770      	bx	lr
 8006184:	b510      	push	{r4, lr}
 8006186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800618a:	4291      	cmp	r1, r2
 800618c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006190:	d1f9      	bne.n	8006186 <memcpy+0xe>
 8006192:	bd10      	pop	{r4, pc}

08006194 <memset>:
 8006194:	4603      	mov	r3, r0
 8006196:	4402      	add	r2, r0
 8006198:	4293      	cmp	r3, r2
 800619a:	d100      	bne.n	800619e <memset+0xa>
 800619c:	4770      	bx	lr
 800619e:	f803 1b01 	strb.w	r1, [r3], #1
 80061a2:	e7f9      	b.n	8006198 <memset+0x4>

080061a4 <cleanup_glue>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	460c      	mov	r4, r1
 80061a8:	6809      	ldr	r1, [r1, #0]
 80061aa:	4605      	mov	r5, r0
 80061ac:	b109      	cbz	r1, 80061b2 <cleanup_glue+0xe>
 80061ae:	f7ff fff9 	bl	80061a4 <cleanup_glue>
 80061b2:	4621      	mov	r1, r4
 80061b4:	4628      	mov	r0, r5
 80061b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061ba:	f000 b869 	b.w	8006290 <_free_r>
	...

080061c0 <_reclaim_reent>:
 80061c0:	4b2c      	ldr	r3, [pc, #176]	; (8006274 <_reclaim_reent+0xb4>)
 80061c2:	b570      	push	{r4, r5, r6, lr}
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4604      	mov	r4, r0
 80061c8:	4283      	cmp	r3, r0
 80061ca:	d051      	beq.n	8006270 <_reclaim_reent+0xb0>
 80061cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80061ce:	b143      	cbz	r3, 80061e2 <_reclaim_reent+0x22>
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d14a      	bne.n	800626c <_reclaim_reent+0xac>
 80061d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061d8:	6819      	ldr	r1, [r3, #0]
 80061da:	b111      	cbz	r1, 80061e2 <_reclaim_reent+0x22>
 80061dc:	4620      	mov	r0, r4
 80061de:	f000 f857 	bl	8006290 <_free_r>
 80061e2:	6961      	ldr	r1, [r4, #20]
 80061e4:	b111      	cbz	r1, 80061ec <_reclaim_reent+0x2c>
 80061e6:	4620      	mov	r0, r4
 80061e8:	f000 f852 	bl	8006290 <_free_r>
 80061ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80061ee:	b111      	cbz	r1, 80061f6 <_reclaim_reent+0x36>
 80061f0:	4620      	mov	r0, r4
 80061f2:	f000 f84d 	bl	8006290 <_free_r>
 80061f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80061f8:	b111      	cbz	r1, 8006200 <_reclaim_reent+0x40>
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 f848 	bl	8006290 <_free_r>
 8006200:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006202:	b111      	cbz	r1, 800620a <_reclaim_reent+0x4a>
 8006204:	4620      	mov	r0, r4
 8006206:	f000 f843 	bl	8006290 <_free_r>
 800620a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800620c:	b111      	cbz	r1, 8006214 <_reclaim_reent+0x54>
 800620e:	4620      	mov	r0, r4
 8006210:	f000 f83e 	bl	8006290 <_free_r>
 8006214:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006216:	b111      	cbz	r1, 800621e <_reclaim_reent+0x5e>
 8006218:	4620      	mov	r0, r4
 800621a:	f000 f839 	bl	8006290 <_free_r>
 800621e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006220:	b111      	cbz	r1, 8006228 <_reclaim_reent+0x68>
 8006222:	4620      	mov	r0, r4
 8006224:	f000 f834 	bl	8006290 <_free_r>
 8006228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800622a:	b111      	cbz	r1, 8006232 <_reclaim_reent+0x72>
 800622c:	4620      	mov	r0, r4
 800622e:	f000 f82f 	bl	8006290 <_free_r>
 8006232:	69a3      	ldr	r3, [r4, #24]
 8006234:	b1e3      	cbz	r3, 8006270 <_reclaim_reent+0xb0>
 8006236:	4620      	mov	r0, r4
 8006238:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800623a:	4798      	blx	r3
 800623c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800623e:	b1b9      	cbz	r1, 8006270 <_reclaim_reent+0xb0>
 8006240:	4620      	mov	r0, r4
 8006242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006246:	f7ff bfad 	b.w	80061a4 <cleanup_glue>
 800624a:	5949      	ldr	r1, [r1, r5]
 800624c:	b941      	cbnz	r1, 8006260 <_reclaim_reent+0xa0>
 800624e:	3504      	adds	r5, #4
 8006250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006252:	2d80      	cmp	r5, #128	; 0x80
 8006254:	68d9      	ldr	r1, [r3, #12]
 8006256:	d1f8      	bne.n	800624a <_reclaim_reent+0x8a>
 8006258:	4620      	mov	r0, r4
 800625a:	f000 f819 	bl	8006290 <_free_r>
 800625e:	e7ba      	b.n	80061d6 <_reclaim_reent+0x16>
 8006260:	680e      	ldr	r6, [r1, #0]
 8006262:	4620      	mov	r0, r4
 8006264:	f000 f814 	bl	8006290 <_free_r>
 8006268:	4631      	mov	r1, r6
 800626a:	e7ef      	b.n	800624c <_reclaim_reent+0x8c>
 800626c:	2500      	movs	r5, #0
 800626e:	e7ef      	b.n	8006250 <_reclaim_reent+0x90>
 8006270:	bd70      	pop	{r4, r5, r6, pc}
 8006272:	bf00      	nop
 8006274:	20000188 	.word	0x20000188

08006278 <__malloc_lock>:
 8006278:	4801      	ldr	r0, [pc, #4]	; (8006280 <__malloc_lock+0x8>)
 800627a:	f7ff bf7b 	b.w	8006174 <__retarget_lock_acquire_recursive>
 800627e:	bf00      	nop
 8006280:	20001d18 	.word	0x20001d18

08006284 <__malloc_unlock>:
 8006284:	4801      	ldr	r0, [pc, #4]	; (800628c <__malloc_unlock+0x8>)
 8006286:	f7ff bf76 	b.w	8006176 <__retarget_lock_release_recursive>
 800628a:	bf00      	nop
 800628c:	20001d18 	.word	0x20001d18

08006290 <_free_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4605      	mov	r5, r0
 8006294:	2900      	cmp	r1, #0
 8006296:	d043      	beq.n	8006320 <_free_r+0x90>
 8006298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800629c:	1f0c      	subs	r4, r1, #4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	bfb8      	it	lt
 80062a2:	18e4      	addlt	r4, r4, r3
 80062a4:	f7ff ffe8 	bl	8006278 <__malloc_lock>
 80062a8:	4a1e      	ldr	r2, [pc, #120]	; (8006324 <_free_r+0x94>)
 80062aa:	6813      	ldr	r3, [r2, #0]
 80062ac:	4610      	mov	r0, r2
 80062ae:	b933      	cbnz	r3, 80062be <_free_r+0x2e>
 80062b0:	6063      	str	r3, [r4, #4]
 80062b2:	6014      	str	r4, [r2, #0]
 80062b4:	4628      	mov	r0, r5
 80062b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ba:	f7ff bfe3 	b.w	8006284 <__malloc_unlock>
 80062be:	42a3      	cmp	r3, r4
 80062c0:	d90a      	bls.n	80062d8 <_free_r+0x48>
 80062c2:	6821      	ldr	r1, [r4, #0]
 80062c4:	1862      	adds	r2, r4, r1
 80062c6:	4293      	cmp	r3, r2
 80062c8:	bf01      	itttt	eq
 80062ca:	681a      	ldreq	r2, [r3, #0]
 80062cc:	685b      	ldreq	r3, [r3, #4]
 80062ce:	1852      	addeq	r2, r2, r1
 80062d0:	6022      	streq	r2, [r4, #0]
 80062d2:	6063      	str	r3, [r4, #4]
 80062d4:	6004      	str	r4, [r0, #0]
 80062d6:	e7ed      	b.n	80062b4 <_free_r+0x24>
 80062d8:	461a      	mov	r2, r3
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	b10b      	cbz	r3, 80062e2 <_free_r+0x52>
 80062de:	42a3      	cmp	r3, r4
 80062e0:	d9fa      	bls.n	80062d8 <_free_r+0x48>
 80062e2:	6811      	ldr	r1, [r2, #0]
 80062e4:	1850      	adds	r0, r2, r1
 80062e6:	42a0      	cmp	r0, r4
 80062e8:	d10b      	bne.n	8006302 <_free_r+0x72>
 80062ea:	6820      	ldr	r0, [r4, #0]
 80062ec:	4401      	add	r1, r0
 80062ee:	1850      	adds	r0, r2, r1
 80062f0:	4283      	cmp	r3, r0
 80062f2:	6011      	str	r1, [r2, #0]
 80062f4:	d1de      	bne.n	80062b4 <_free_r+0x24>
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	4401      	add	r1, r0
 80062fc:	6011      	str	r1, [r2, #0]
 80062fe:	6053      	str	r3, [r2, #4]
 8006300:	e7d8      	b.n	80062b4 <_free_r+0x24>
 8006302:	d902      	bls.n	800630a <_free_r+0x7a>
 8006304:	230c      	movs	r3, #12
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	e7d4      	b.n	80062b4 <_free_r+0x24>
 800630a:	6820      	ldr	r0, [r4, #0]
 800630c:	1821      	adds	r1, r4, r0
 800630e:	428b      	cmp	r3, r1
 8006310:	bf01      	itttt	eq
 8006312:	6819      	ldreq	r1, [r3, #0]
 8006314:	685b      	ldreq	r3, [r3, #4]
 8006316:	1809      	addeq	r1, r1, r0
 8006318:	6021      	streq	r1, [r4, #0]
 800631a:	6063      	str	r3, [r4, #4]
 800631c:	6054      	str	r4, [r2, #4]
 800631e:	e7c9      	b.n	80062b4 <_free_r+0x24>
 8006320:	bd38      	pop	{r3, r4, r5, pc}
 8006322:	bf00      	nop
 8006324:	20001bd0 	.word	0x20001bd0

08006328 <_init>:
 8006328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632a:	bf00      	nop
 800632c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800632e:	bc08      	pop	{r3}
 8006330:	469e      	mov	lr, r3
 8006332:	4770      	bx	lr

08006334 <_fini>:
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	bf00      	nop
 8006338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633a:	bc08      	pop	{r3}
 800633c:	469e      	mov	lr, r3
 800633e:	4770      	bx	lr
