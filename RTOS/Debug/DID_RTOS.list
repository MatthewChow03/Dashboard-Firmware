
DID_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006000  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080061f0  080061f0  000161f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006500  08006500  000201b8  2**0
                  CONTENTS
  4 .ARM          00000000  08006500  08006500  000201b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006500  08006500  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006504  08006504  00016504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  08006508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b34  200001b8  080066c0  000201b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cec  080066c0  00021cec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8c6  00000000  00000000  000201e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b31  00000000  00000000  0003baa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  00040970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbd4  00000000  00000000  00041b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d01  00000000  00000000  0005d754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2145  00000000  00000000  00073455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011559a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053ac  00000000  00000000  001155f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001b8 	.word	0x200001b8
 800020c:	00000000 	.word	0x00000000
 8000210:	080061d8 	.word	0x080061d8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001bc 	.word	0x200001bc
 800022c:	080061d8 	.word	0x080061d8

08000230 <Delay>:
 * @Param counts: Number of milliseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void Delay(uint32_t counts) 
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint16_t j;
	for (i = 0; i < counts; i++)
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	e00c      	b.n	8000258 <Delay+0x28>
	{
		for(j = 0; j<16000; j++){}
 800023e:	2300      	movs	r3, #0
 8000240:	817b      	strh	r3, [r7, #10]
 8000242:	e002      	b.n	800024a <Delay+0x1a>
 8000244:	897b      	ldrh	r3, [r7, #10]
 8000246:	3301      	adds	r3, #1
 8000248:	817b      	strh	r3, [r7, #10]
 800024a:	897b      	ldrh	r3, [r7, #10]
 800024c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000250:	d3f8      	bcc.n	8000244 <Delay+0x14>
	for (i = 0; i < counts; i++)
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	3301      	adds	r3, #1
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	429a      	cmp	r2, r3
 800025e:	d3ee      	bcc.n	800023e <Delay+0xe>
	}
	
}
 8000260:	bf00      	nop
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <MicrosecondDelay>:
 * @Param counts: Number of microseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void MicrosecondDelay(uint32_t counts)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint8_t j;

	for (i = 0; i < counts; i++)
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	e00b      	b.n	8000292 <MicrosecondDelay+0x26>
	{
		for (j = 0; j<16; j++){}
 800027a:	2300      	movs	r3, #0
 800027c:	72fb      	strb	r3, [r7, #11]
 800027e:	e002      	b.n	8000286 <MicrosecondDelay+0x1a>
 8000280:	7afb      	ldrb	r3, [r7, #11]
 8000282:	3301      	adds	r3, #1
 8000284:	72fb      	strb	r3, [r7, #11]
 8000286:	7afb      	ldrb	r3, [r7, #11]
 8000288:	2b0f      	cmp	r3, #15
 800028a:	d9f9      	bls.n	8000280 <MicrosecondDelay+0x14>
	for (i = 0; i < counts; i++)
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	3301      	adds	r3, #1
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	68fa      	ldr	r2, [r7, #12]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	429a      	cmp	r2, r3
 8000298:	d3ef      	bcc.n	800027a <MicrosecondDelay+0xe>
	}
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr

080002a6 <MoveCursor>:
  * Moves cursor to the position on the screen determined by XY Coordinates
  * @Param x: x-coordinate
  * @Param y: y-coordinate
  */
void MoveCursor(uint8_t x, uint8_t y)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b084      	sub	sp, #16
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	4603      	mov	r3, r0
 80002ae:	460a      	mov	r2, r1
 80002b0:	71fb      	strb	r3, [r7, #7]
 80002b2:	4613      	mov	r3, r2
 80002b4:	71bb      	strb	r3, [r7, #6]
     * Row major:
     * 0 1 2 3 4 
     * 5 6 7 8 9 
     *  
     */
    uint16_t offset = 40*y + x;
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	0092      	lsls	r2, r2, #2
 80002be:	4413      	add	r3, r2
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	4413      	add	r3, r2
 80002ca:	81fb      	strh	r3, [r7, #14]
    
    TransmitCommand(0x46);
 80002cc:	2046      	movs	r0, #70	; 0x46
 80002ce:	f000 fa47 	bl	8000760 <TransmitCommand>
    // The CSRW register is 2 bytes long, so the first parameter 
    // is the first byte and the second parameter is the second
    // byte
    TransmitCommandParameter(offset&0xFF);
 80002d2:	89fb      	ldrh	r3, [r7, #14]
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fa60 	bl	800079c <TransmitCommandParameter>
    TransmitCommandParameter(offset >> 8);
 80002dc:	89fb      	ldrh	r3, [r7, #14]
 80002de:	0a1b      	lsrs	r3, r3, #8
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fa59 	bl	800079c <TransmitCommandParameter>
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <ClearScreen>:

 /**
 * Purpose: Prints 1200 " " characters to clear the screen
 */
void ClearScreen()
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b082      	sub	sp, #8
 80002f6:	af00      	add	r7, sp, #0
    //Set cursor to start position
    MoveCursor(0, 0);
 80002f8:	2100      	movs	r1, #0
 80002fa:	2000      	movs	r0, #0
 80002fc:	f7ff ffd3 	bl	80002a6 <MoveCursor>
    
    //replace all characters with spaces
    TransmitCommand(0x42);                          
 8000300:	2042      	movs	r0, #66	; 0x42
 8000302:	f000 fa2d 	bl	8000760 <TransmitCommand>
    for (uint16_t i = 0; i < 1200; i++)
 8000306:	2300      	movs	r3, #0
 8000308:	80fb      	strh	r3, [r7, #6]
 800030a:	e005      	b.n	8000318 <ClearScreen+0x26>
    {
        TransmitCommandParameter(0x20);
 800030c:	2020      	movs	r0, #32
 800030e:	f000 fa45 	bl	800079c <TransmitCommandParameter>
    for (uint16_t i = 0; i < 1200; i++)
 8000312:	88fb      	ldrh	r3, [r7, #6]
 8000314:	3301      	adds	r3, #1
 8000316:	80fb      	strh	r3, [r7, #6]
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800031e:	d3f5      	bcc.n	800030c <ClearScreen+0x1a>
    }
    MoveCursor(0, 0);
 8000320:	2100      	movs	r1, #0
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffbf 	bl	80002a6 <MoveCursor>
}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <SaveCharacterToRAM>:
  * @Param bitmap: An array of the bitmap of that particular subcharacter
  * @Param offset: Some offset number
  * Returns: nothing
  */
void SaveCharacterToRAM(uint8_t* bitmap, uint8_t offset)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
    TransmitCommand(0x46);
 800033c:	2046      	movs	r0, #70	; 0x46
 800033e:	f000 fa0f 	bl	8000760 <TransmitCommand>
    TransmitCommandParameter(offset);
 8000342:	78fb      	ldrb	r3, [r7, #3]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fa29 	bl	800079c <TransmitCommandParameter>
    TransmitCommandParameter(0x48);
 800034a:	2048      	movs	r0, #72	; 0x48
 800034c:	f000 fa26 	bl	800079c <TransmitCommandParameter>
    TransmitCommand(0x42);
 8000350:	2042      	movs	r0, #66	; 0x42
 8000352:	f000 fa05 	bl	8000760 <TransmitCommand>

    for (int i = 0; i < BYTEPERBITMAP; i++)
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	e009      	b.n	8000370 <SaveCharacterToRAM+0x40>
    {
        TransmitCommandParameter(bitmap[i]);
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	4413      	add	r3, r2
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fa19 	bl	800079c <TransmitCommandParameter>
    for (int i = 0; i < BYTEPERBITMAP; i++)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	3301      	adds	r3, #1
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	2b0f      	cmp	r3, #15
 8000374:	ddf2      	ble.n	800035c <SaveCharacterToRAM+0x2c>
    }
}
 8000376:	bf00      	nop
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <CharacterBitMaps>:

/**
 * Writes custom bitmaps to the LCD screen RAM
 */
void CharacterBitMaps(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b0c2      	sub	sp, #264	; 0x108
 8000384:	af00      	add	r7, sp, #0
    uint8_t bitmap[16][BYTEPERBITMAP] = {{0x7E, 0x7E, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x7E},
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4a19      	ldr	r2, [pc, #100]	; (80003f0 <CharacterBitMaps+0x70>)
 800038a:	4618      	mov	r0, r3
 800038c:	4611      	mov	r1, r2
 800038e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000392:	461a      	mov	r2, r3
 8000394:	f005 fe48 	bl	8006028 <memcpy>
                                    {0x00, 0x62, 0x62, 0x62, 0x66, 0x66, 0x66, 0x6C, 0x6C, 0x6C, 0x70, 0x70, 0x70, 0x60, 0x60, 0x00},
                                    {0x00, 0x60, 0x60, 0x70, 0x70, 0x78, 0x6C, 0x6C, 0x6C, 0x66, 0x66, 0x66, 0x67, 0x67, 0x61, 0x00},
                                    {0x00, 0x46, 0x46, 0x46, 0x66, 0x66, 0x66, 0x36, 0x36, 0x36, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x00},
                                    {0xC0, 0xE0, 0x60, 0x30, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x04, 0x06, 0x06, 0x06, 0x07, 0x03},
                                    {0x03, 0x07, 0x06, 0x06, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x60, 0xE0, 0xC0}};
    TransmitCommand(0x5C);
 8000398:	205c      	movs	r0, #92	; 0x5c
 800039a:	f000 f9e1 	bl	8000760 <TransmitCommand>
    TransmitCommandParameter(0x00);
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 f9fc 	bl	800079c <TransmitCommandParameter>
    TransmitCommandParameter(0x40);
 80003a4:	2040      	movs	r0, #64	; 0x40
 80003a6:	f000 f9f9 	bl	800079c <TransmitCommandParameter>
    TransmitCommand(0x4C);
 80003aa:	204c      	movs	r0, #76	; 0x4c
 80003ac:	f000 f9d8 	bl	8000760 <TransmitCommand>

    for (uint8_t i = 0; i < 16; i++)
 80003b0:	2300      	movs	r3, #0
 80003b2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80003b6:	e011      	b.n	80003dc <CharacterBitMaps+0x5c>
    {
        SaveCharacterToRAM(bitmap[i], i*BYTEPERBITMAP);                
 80003b8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003bc:	1d3a      	adds	r2, r7, #4
 80003be:	011b      	lsls	r3, r3, #4
 80003c0:	441a      	add	r2, r3
 80003c2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003c6:	011b      	lsls	r3, r3, #4
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	4610      	mov	r0, r2
 80003ce:	f7ff ffaf 	bl	8000330 <SaveCharacterToRAM>
    for (uint8_t i = 0; i < 16; i++)
 80003d2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003d6:	3301      	adds	r3, #1
 80003d8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80003dc:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80003e0:	2b0f      	cmp	r3, #15
 80003e2:	d9e9      	bls.n	80003b8 <CharacterBitMaps+0x38>
    }   
}
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	08006224 	.word	0x08006224

080003f4 <OutputString>:
 * @Param starting_x: x-coordinate to write the string to
 * @Param starting_y: y-coordinate to write the string to
 * Returns: nothing
 */
void OutputString(char Str[], uint8_t starting_x, uint8_t starting_y)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	70fb      	strb	r3, [r7, #3]
 8000400:	4613      	mov	r3, r2
 8000402:	70bb      	strb	r3, [r7, #2]
                        {0x82,0x86,0x80,0x81}, {0x86,0x83,0x20,0x89}, {0x80,0x81,0x84,0x85}, {0x80,0x81,0x20,0x89}, //6 7 8 9
                        {0x20,0x20,0x20,0x20}, {0x20,0x20,0x2E,0x20}, {0x2E,0x20,0x2E,0x20}, {0x87,0x87,0x86,0x86}, //SPACE, ., :, -
                        };
	
    uint8_t temp;
    uint8_t x = starting_x;
 8000404:	78fb      	ldrb	r3, [r7, #3]
 8000406:	73bb      	strb	r3, [r7, #14]
  
    TransmitCommand(0x4C);                                  //Set the cursor direction to "Right" 
 8000408:	204c      	movs	r0, #76	; 0x4c
 800040a:	f000 f9a9 	bl	8000760 <TransmitCommand>
    
    for (uint8_t c = 0; Str[c] != '\0'; c++)
 800040e:	2300      	movs	r3, #0
 8000410:	737b      	strb	r3, [r7, #13]
 8000412:	e069      	b.n	80004e8 <OutputString+0xf4>
    // used to be for (uint8_t c = 0; c < Str[c] != '\0'; c++)
    {
        MoveCursor(x, starting_y);
 8000414:	78ba      	ldrb	r2, [r7, #2]
 8000416:	7bbb      	ldrb	r3, [r7, #14]
 8000418:	4611      	mov	r1, r2
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff43 	bl	80002a6 <MoveCursor>
        temp = (uint8_t) Str[c];
 8000420:	7b7b      	ldrb	r3, [r7, #13]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	73fb      	strb	r3, [r7, #15]
        if (temp == 32)
 800042a:	7bfb      	ldrb	r3, [r7, #15]
 800042c:	2b20      	cmp	r3, #32
 800042e:	d102      	bne.n	8000436 <OutputString+0x42>
        {                    
            temp = 36;                  //if character is " "
 8000430:	2324      	movs	r3, #36	; 0x24
 8000432:	73fb      	strb	r3, [r7, #15]
 8000434:	e025      	b.n	8000482 <OutputString+0x8e>
        }
        else if (temp == 58)
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	2b3a      	cmp	r3, #58	; 0x3a
 800043a:	d102      	bne.n	8000442 <OutputString+0x4e>
        {              
            temp = 38;                  //if character is ":"
 800043c:	2326      	movs	r3, #38	; 0x26
 800043e:	73fb      	strb	r3, [r7, #15]
 8000440:	e01f      	b.n	8000482 <OutputString+0x8e>
        }
        else if (temp == 46)
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	2b2e      	cmp	r3, #46	; 0x2e
 8000446:	d102      	bne.n	800044e <OutputString+0x5a>
        {               
            temp = 37;                  //if character is "."
 8000448:	2325      	movs	r3, #37	; 0x25
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e019      	b.n	8000482 <OutputString+0x8e>
        }
		else if (temp == 45)
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	2b2d      	cmp	r3, #45	; 0x2d
 8000452:	d102      	bne.n	800045a <OutputString+0x66>
		{
			temp = 39;	                //if character is "-"
 8000454:	2327      	movs	r3, #39	; 0x27
 8000456:	73fb      	strb	r3, [r7, #15]
 8000458:	e013      	b.n	8000482 <OutputString+0x8e>
		}
        else if (temp <= 57)
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	2b39      	cmp	r3, #57	; 0x39
 800045e:	d803      	bhi.n	8000468 <OutputString+0x74>
        {               
            temp -= OFFSET_NUMERIC;     //if character is between "0" and "9"
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	3b16      	subs	r3, #22
 8000464:	73fb      	strb	r3, [r7, #15]
 8000466:	e00c      	b.n	8000482 <OutputString+0x8e>
        }
        else if (temp <= 90)
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	2b5a      	cmp	r3, #90	; 0x5a
 800046c:	d803      	bhi.n	8000476 <OutputString+0x82>
        {               
            temp -= OFFSET_CAPITAL;     //if character is between "A" and "Z"
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	3b41      	subs	r3, #65	; 0x41
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	e005      	b.n	8000482 <OutputString+0x8e>
        }
        else if (temp <= 122)
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	2b7a      	cmp	r3, #122	; 0x7a
 800047a:	d802      	bhi.n	8000482 <OutputString+0x8e>
        {             
            temp -= OFFSET_LOWCASE;     //if character is between "a" and "z"
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3b61      	subs	r3, #97	; 0x61
 8000480:	73fb      	strb	r3, [r7, #15]
        * |C D|
        *  - -
        * (4 subcharacters, in that order)     * 
        ***********************************/
        
        TransmitCommand(0x42);                                  //print subcharacers A and B
 8000482:	2042      	movs	r0, #66	; 0x42
 8000484:	f000 f96c 	bl	8000760 <TransmitCommand>
        TransmitCommandParameter(LOOKUPTABLE[temp][0]); 
 8000488:	7bfb      	ldrb	r3, [r7, #15]
 800048a:	4a1d      	ldr	r2, [pc, #116]	; (8000500 <OutputString+0x10c>)
 800048c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000490:	4618      	mov	r0, r3
 8000492:	f000 f983 	bl	800079c <TransmitCommandParameter>
        TransmitCommandParameter(LOOKUPTABLE[temp][1]);
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	4a19      	ldr	r2, [pc, #100]	; (8000500 <OutputString+0x10c>)
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	4413      	add	r3, r2
 800049e:	785b      	ldrb	r3, [r3, #1]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 f97b 	bl	800079c <TransmitCommandParameter>

        MoveCursor(x, starting_y + 1);
 80004a6:	78bb      	ldrb	r3, [r7, #2]
 80004a8:	3301      	adds	r3, #1
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	7bbb      	ldrb	r3, [r7, #14]
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff fef8 	bl	80002a6 <MoveCursor>
        
        TransmitCommand(0x42);                                  //print the subcharacters C and D
 80004b6:	2042      	movs	r0, #66	; 0x42
 80004b8:	f000 f952 	bl	8000760 <TransmitCommand>
        TransmitCommandParameter(LOOKUPTABLE[temp][2]);
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	4a10      	ldr	r2, [pc, #64]	; (8000500 <OutputString+0x10c>)
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	4413      	add	r3, r2
 80004c4:	789b      	ldrb	r3, [r3, #2]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f968 	bl	800079c <TransmitCommandParameter>
        TransmitCommandParameter(LOOKUPTABLE[temp][3]);
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <OutputString+0x10c>)
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	4413      	add	r3, r2
 80004d4:	78db      	ldrb	r3, [r3, #3]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 f960 	bl	800079c <TransmitCommandParameter>

        x += 3;
 80004dc:	7bbb      	ldrb	r3, [r7, #14]
 80004de:	3303      	adds	r3, #3
 80004e0:	73bb      	strb	r3, [r7, #14]
    for (uint8_t c = 0; Str[c] != '\0'; c++)
 80004e2:	7b7b      	ldrb	r3, [r7, #13]
 80004e4:	3301      	adds	r3, #1
 80004e6:	737b      	strb	r3, [r7, #13]
 80004e8:	7b7b      	ldrb	r3, [r7, #13]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d18f      	bne.n	8000414 <OutputString+0x20>
    }
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200000a0 	.word	0x200000a0

08000504 <OutputPaddedInteger>:
 * @Param x: x-coordinate to write the character
 * @Param y: y-coordinate to write the character
 * Returns: nothing
 */
void OutputPaddedInteger(int32_t num, uint8_t dec, uint8_t x, uint8_t y)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	4608      	mov	r0, r1
 800050e:	4611      	mov	r1, r2
 8000510:	461a      	mov	r2, r3
 8000512:	4603      	mov	r3, r0
 8000514:	70fb      	strb	r3, [r7, #3]
 8000516:	460b      	mov	r3, r1
 8000518:	70bb      	strb	r3, [r7, #2]
 800051a:	4613      	mov	r3, r2
 800051c:	707b      	strb	r3, [r7, #1]
	uint8_t i;
    char str[5] = {' ',' ',' ',' ','\0'};
 800051e:	4a37      	ldr	r2, [pc, #220]	; (80005fc <OutputPaddedInteger+0xf8>)
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000528:	6018      	str	r0, [r3, #0]
 800052a:	3304      	adds	r3, #4
 800052c:	7019      	strb	r1, [r3, #0]
	char decplace[2] = {' ', '\0'};
 800052e:	2320      	movs	r3, #32
 8000530:	81bb      	strh	r3, [r7, #12]
		
    if (num < 0)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b00      	cmp	r3, #0
 8000536:	da05      	bge.n	8000544 <OutputPaddedInteger+0x40>
    {
        str[0] = '-';
 8000538:	232d      	movs	r3, #45	; 0x2d
 800053a:	743b      	strb	r3, [r7, #16]
        num = -1 * num;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	425b      	negs	r3, r3
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	e004      	b.n	800054e <OutputPaddedInteger+0x4a>
    }
	else if (num == 0)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d101      	bne.n	800054e <OutputPaddedInteger+0x4a>
	{
		str[3] = '0';
 800054a:	2330      	movs	r3, #48	; 0x30
 800054c:	74fb      	strb	r3, [r7, #19]
	}
	
	if (num > 999)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000554:	db02      	blt.n	800055c <OutputPaddedInteger+0x58>
	{
		num = 999;
 8000556:	f240 33e7 	movw	r3, #999	; 0x3e7
 800055a:	607b      	str	r3, [r7, #4]
	}

	// Convert the integer digits into chars, one by one
    for (i = 3; num != 0; i--)
 800055c:	2303      	movs	r3, #3
 800055e:	75fb      	strb	r3, [r7, #23]
 8000560:	e01e      	b.n	80005a0 <OutputPaddedInteger+0x9c>
    {
        str[i] = "0123456789"[num%10];
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <OutputPaddedInteger+0xfc>)
 8000566:	fb83 2301 	smull	r2, r3, r3, r1
 800056a:	109a      	asrs	r2, r3, #2
 800056c:	17cb      	asrs	r3, r1, #31
 800056e:	1ad2      	subs	r2, r2, r3
 8000570:	4613      	mov	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4413      	add	r3, r2
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	1aca      	subs	r2, r1, r3
 800057a:	7dfb      	ldrb	r3, [r7, #23]
 800057c:	4921      	ldr	r1, [pc, #132]	; (8000604 <OutputPaddedInteger+0x100>)
 800057e:	5c8a      	ldrb	r2, [r1, r2]
 8000580:	f107 0118 	add.w	r1, r7, #24
 8000584:	440b      	add	r3, r1
 8000586:	f803 2c08 	strb.w	r2, [r3, #-8]
        num = num/10;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <OutputPaddedInteger+0xfc>)
 800058e:	fb82 1203 	smull	r1, r2, r2, r3
 8000592:	1092      	asrs	r2, r2, #2
 8000594:	17db      	asrs	r3, r3, #31
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	607b      	str	r3, [r7, #4]
    for (i = 3; num != 0; i--)
 800059a:	7dfb      	ldrb	r3, [r7, #23]
 800059c:	3b01      	subs	r3, #1
 800059e:	75fb      	strb	r3, [r7, #23]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1dd      	bne.n	8000562 <OutputPaddedInteger+0x5e>
    }
		
    OutputString(str, x, y);
 80005a6:	787a      	ldrb	r2, [r7, #1]
 80005a8:	78b9      	ldrb	r1, [r7, #2]
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff20 	bl	80003f4 <OutputString>
    
    if (dec != -1)
    {
		//Output 1 decimal place
		OutputString(".", x + 12, y);
 80005b4:	78bb      	ldrb	r3, [r7, #2]
 80005b6:	330c      	adds	r3, #12
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	787a      	ldrb	r2, [r7, #1]
 80005bc:	4619      	mov	r1, r3
 80005be:	4812      	ldr	r0, [pc, #72]	; (8000608 <OutputPaddedInteger+0x104>)
 80005c0:	f7ff ff18 	bl	80003f4 <OutputString>

		dec = dec % 10;
 80005c4:	78fa      	ldrb	r2, [r7, #3]
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <OutputPaddedInteger+0x108>)
 80005c8:	fba3 1302 	umull	r1, r3, r3, r2
 80005cc:	08d9      	lsrs	r1, r3, #3
 80005ce:	460b      	mov	r3, r1
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	440b      	add	r3, r1
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	70fb      	strb	r3, [r7, #3]

		decplace[0] = "0123456789"[dec];
 80005da:	78fb      	ldrb	r3, [r7, #3]
 80005dc:	4a09      	ldr	r2, [pc, #36]	; (8000604 <OutputPaddedInteger+0x100>)
 80005de:	5cd3      	ldrb	r3, [r2, r3]
 80005e0:	733b      	strb	r3, [r7, #12]
		OutputString(decplace, x + 15, y);
 80005e2:	78bb      	ldrb	r3, [r7, #2]
 80005e4:	330f      	adds	r3, #15
 80005e6:	b2d9      	uxtb	r1, r3
 80005e8:	787a      	ldrb	r2, [r7, #1]
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff00 	bl	80003f4 <OutputString>
    }
}
 80005f4:	bf00      	nop
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	08006328 	.word	0x08006328
 8000600:	66666667 	.word	0x66666667
 8000604:	08006330 	.word	0x08006330
 8000608:	08006324 	.word	0x08006324
 800060c:	cccccccd 	.word	0xcccccccd

08000610 <DisplayScreen>:

/**
 * Displays all information in a single screen
 */
void DisplayScreen(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
    ClearScreen();
 8000616:	f7ff fe6c 	bl	80002f2 <ClearScreen>

    // Different code for each page allows for different designs
	switch (current_page)
 800061a:	4b43      	ldr	r3, [pc, #268]	; (8000728 <DisplayScreen+0x118>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d002      	beq.n	8000628 <DisplayScreen+0x18>
 8000622:	2b02      	cmp	r3, #2
 8000624:	d03e      	beq.n	80006a4 <DisplayScreen+0x94>

		  break;
	
	}

}
 8000626:	e07b      	b.n	8000720 <DisplayScreen+0x110>
		  for (uint8_t i = 0; i < NUM_ROWS_PAGE1; i++)
 8000628:	2300      	movs	r3, #0
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	e036      	b.n	800069c <DisplayScreen+0x8c>
			  OutputString( DisplayLayoutPage1[i].name,
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4a3e      	ldr	r2, [pc, #248]	; (800072c <DisplayScreen+0x11c>)
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	4413      	add	r3, r2
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4a3c      	ldr	r2, [pc, #240]	; (800072c <DisplayScreen+0x11c>)
 800063c:	011b      	lsls	r3, r3, #4
 800063e:	4413      	add	r3, r2
 8000640:	330c      	adds	r3, #12
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f7ff fed4 	bl	80003f4 <OutputString>
			  OutputPaddedInteger( 0,
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	4a37      	ldr	r2, [pc, #220]	; (800072c <DisplayScreen+0x11c>)
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	4413      	add	r3, r2
 8000654:	330a      	adds	r3, #10
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4934      	ldr	r1, [pc, #208]	; (800072c <DisplayScreen+0x11c>)
 800065c:	011b      	lsls	r3, r3, #4
 800065e:	440b      	add	r3, r1
 8000660:	330c      	adds	r3, #12
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	21ff      	movs	r1, #255	; 0xff
 8000666:	2000      	movs	r0, #0
 8000668:	f7ff ff4c 	bl	8000504 <OutputPaddedInteger>
			  OutputString( DisplayLayoutPage1[i].unit,
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4a2f      	ldr	r2, [pc, #188]	; (800072c <DisplayScreen+0x11c>)
 8000670:	011b      	lsls	r3, r3, #4
 8000672:	4413      	add	r3, r2
 8000674:	3304      	adds	r3, #4
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4a2c      	ldr	r2, [pc, #176]	; (800072c <DisplayScreen+0x11c>)
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	4413      	add	r3, r2
 8000680:	330b      	adds	r3, #11
 8000682:	7819      	ldrb	r1, [r3, #0]
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4a29      	ldr	r2, [pc, #164]	; (800072c <DisplayScreen+0x11c>)
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	4413      	add	r3, r2
 800068c:	330c      	adds	r3, #12
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	f7ff feaf 	bl	80003f4 <OutputString>
		  for (uint8_t i = 0; i < NUM_ROWS_PAGE1; i++)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	3301      	adds	r3, #1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b03      	cmp	r3, #3
 80006a0:	d9c5      	bls.n	800062e <DisplayScreen+0x1e>
		  break;
 80006a2:	e03d      	b.n	8000720 <DisplayScreen+0x110>
		for (uint8_t i = 0; i < NUM_ROWS_PAGE2; i++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	71bb      	strb	r3, [r7, #6]
 80006a8:	e036      	b.n	8000718 <DisplayScreen+0x108>
					  OutputString( DisplayLayoutPage2[i].name,
 80006aa:	79bb      	ldrb	r3, [r7, #6]
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <DisplayScreen+0x120>)
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	4413      	add	r3, r2
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <DisplayScreen+0x120>)
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	4413      	add	r3, r2
 80006bc:	330c      	adds	r3, #12
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f7ff fe96 	bl	80003f4 <OutputString>
					  OutputPaddedInteger( 0,
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	4a19      	ldr	r2, [pc, #100]	; (8000730 <DisplayScreen+0x120>)
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	4413      	add	r3, r2
 80006d0:	330a      	adds	r3, #10
 80006d2:	781a      	ldrb	r2, [r3, #0]
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	4916      	ldr	r1, [pc, #88]	; (8000730 <DisplayScreen+0x120>)
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	440b      	add	r3, r1
 80006dc:	330c      	adds	r3, #12
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	21ff      	movs	r1, #255	; 0xff
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff ff0e 	bl	8000504 <OutputPaddedInteger>
					  OutputString( DisplayLayoutPage2[i].unit,
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <DisplayScreen+0x120>)
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	4413      	add	r3, r2
 80006f0:	3304      	adds	r3, #4
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <DisplayScreen+0x120>)
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	4413      	add	r3, r2
 80006fc:	330b      	adds	r3, #11
 80006fe:	7819      	ldrb	r1, [r3, #0]
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <DisplayScreen+0x120>)
 8000704:	011b      	lsls	r3, r3, #4
 8000706:	4413      	add	r3, r2
 8000708:	330c      	adds	r3, #12
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	f7ff fe71 	bl	80003f4 <OutputString>
		for (uint8_t i = 0; i < NUM_ROWS_PAGE2; i++)
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	3301      	adds	r3, #1
 8000716:	71bb      	strb	r3, [r7, #6]
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d9c5      	bls.n	80006aa <DisplayScreen+0x9a>
		  break;
 800071e:	bf00      	nop
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000000 	.word	0x20000000
 800072c:	20000004 	.word	0x20000004
 8000730:	20000044 	.word	0x20000044

08000734 <WriteByteToDataBus>:
 * Write a byte of data through C3 to C10(Data Buses)
 * @Param byte: 1 byte code
 * Returns: nothing
 */
void WriteByteToDataBus(uint8_t byte)
{	
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = byte << 3;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	00da      	lsls	r2, r3, #3
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <WriteByteToDataBus+0x28>)
 8000744:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = ((uint8_t) (~byte)) << 3;
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	43db      	mvns	r3, r3
 800074a:	b2db      	uxtb	r3, r3
 800074c:	00da      	lsls	r2, r3, #3
 800074e:	4b03      	ldr	r3, [pc, #12]	; (800075c <WriteByteToDataBus+0x28>)
 8000750:	615a      	str	r2, [r3, #20]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	40011000 	.word	0x40011000

08000760 <TransmitCommand>:
 * Writes a byte of command code through ports C3 to C10(Data Buses)
 * @Param command_code: 1 byte command code
 * returns: nothing
 */
void TransmitCommand(uint8_t command_code)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = 0x1UL << 0;					//SET C0 to HIGH
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <TransmitCommand+0x38>)
 800076c:	2201      	movs	r2, #1
 800076e:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = 0x1UL << 1;					//SET C1 to LOW
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <TransmitCommand+0x38>)
 8000772:	2202      	movs	r2, #2
 8000774:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(command_code);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ffdb 	bl	8000734 <WriteByteToDataBus>
	MicrosecondDelay(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff fd74 	bl	800026c <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;					//SET C1 to HIGH
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <TransmitCommand+0x38>)
 8000786:	2202      	movs	r2, #2
 8000788:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff fd6e 	bl	800026c <MicrosecondDelay>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40011000 	.word	0x40011000

0800079c <TransmitCommandParameter>:
 * Writes a byte of parameter code through ports C3 to C10(Data Buses)
 * @Param parameter_code: 1 byte parameter code
 * returns: nothing
 */
void TransmitCommandParameter(uint8_t parameter_code)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	GPIOC->BRR = 0x1UL << 0;					//SET C0 to LOW
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <TransmitCommandParameter+0x38>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	615a      	str	r2, [r3, #20]
	GPIOC->BRR = 0x1UL << 1;					//SET C1 to LOW
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <TransmitCommandParameter+0x38>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(parameter_code);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffbd 	bl	8000734 <WriteByteToDataBus>
	MicrosecondDelay(1);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff fd56 	bl	800026c <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;					//SET C1 to HIGH
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <TransmitCommandParameter+0x38>)
 80007c2:	2202      	movs	r2, #2
 80007c4:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff fd50 	bl	800026c <MicrosecondDelay>
}       
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40011000 	.word	0x40011000

080007d8 <ScreenSetup>:

/**
 * Initialise screen settings and character bit maps
 */
void ScreenSetup(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
    // system setup (section 6-2-1 on raio datasheet)
    TransmitCommand(0x40);
 80007dc:	2040      	movs	r0, #64	; 0x40
 80007de:	f7ff ffbf 	bl	8000760 <TransmitCommand>
        Delay(5);
 80007e2:	2005      	movs	r0, #5
 80007e4:	f7ff fd24 	bl	8000230 <Delay>
        // 0 0 IV 1 W/S M2 M1 M0
        TransmitCommandParameter(0x34);
 80007e8:	2034      	movs	r0, #52	; 0x34
 80007ea:	f7ff ffd7 	bl	800079c <TransmitCommandParameter>
        // WF 0 0 0 0 FX FX FX
        TransmitCommandParameter(0x87);
 80007ee:	2087      	movs	r0, #135	; 0x87
 80007f0:	f7ff ffd4 	bl	800079c <TransmitCommandParameter>
        // 0 0 0 0 FY FY FY FY
        TransmitCommandParameter(0xF);
 80007f4:	200f      	movs	r0, #15
 80007f6:	f7ff ffd1 	bl	800079c <TransmitCommandParameter>
        // C/R (horizontal bytes per line)
        TransmitCommandParameter(39);
 80007fa:	2027      	movs	r0, #39	; 0x27
 80007fc:	f7ff ffce 	bl	800079c <TransmitCommandParameter>
        // TC/R (horizontal bytes per line, incl blanking)
        TransmitCommandParameter(47);
 8000800:	202f      	movs	r0, #47	; 0x2f
 8000802:	f7ff ffcb 	bl	800079c <TransmitCommandParameter>
        // L/F (lines per frame)
        TransmitCommandParameter(239);
 8000806:	20ef      	movs	r0, #239	; 0xef
 8000808:	f7ff ffc8 	bl	800079c <TransmitCommandParameter>
        // APL (horizontal address range, LSB)
        TransmitCommandParameter(40);
 800080c:	2028      	movs	r0, #40	; 0x28
 800080e:	f7ff ffc5 	bl	800079c <TransmitCommandParameter>
        // APH (horizontal address range, MSB)
        TransmitCommandParameter(0);
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff ffc2 	bl	800079c <TransmitCommandParameter>

    // scroll parameters
    TransmitCommand(0x44);
 8000818:	2044      	movs	r0, #68	; 0x44
 800081a:	f7ff ffa1 	bl	8000760 <TransmitCommand>
        TransmitCommandParameter(0); // SAD 1L
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff ffbc 	bl	800079c <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 1H 
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff ffb9 	bl	800079c <TransmitCommandParameter>
        TransmitCommandParameter(240); // SL1
 800082a:	20f0      	movs	r0, #240	; 0xf0
 800082c:	f7ff ffb6 	bl	800079c <TransmitCommandParameter>
        TransmitCommandParameter(176); // SAD 2L
 8000830:	20b0      	movs	r0, #176	; 0xb0
 8000832:	f7ff ffb3 	bl	800079c <TransmitCommandParameter>
        TransmitCommandParameter(4); // SAD 2H
 8000836:	2004      	movs	r0, #4
 8000838:	f7ff ffb0 	bl	800079c <TransmitCommandParameter>
        TransmitCommandParameter(240); // SL2
 800083c:	20f0      	movs	r0, #240	; 0xf0
 800083e:	f7ff ffad 	bl	800079c <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 3L
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff ffaa 	bl	800079c <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 3H
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff ffa7 	bl	800079c <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 4
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff ffa4 	bl	800079c <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 4
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff ffa1 	bl	800079c <TransmitCommandParameter>
	
	TransmitCommand(0x5B);
 800085a:	205b      	movs	r0, #91	; 0x5b
 800085c:	f7ff ff80 	bl	8000760 <TransmitCommand>
		TransmitCommandParameter(0);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff ff9b 	bl	800079c <TransmitCommandParameter>

    // set horizontal scroll position
    TransmitCommand(0x5A);
 8000866:	205a      	movs	r0, #90	; 0x5a
 8000868:	f7ff ff7a 	bl	8000760 <TransmitCommand>
        TransmitCommandParameter(0);
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff ff95 	bl	800079c <TransmitCommandParameter>

    // set display overlay format
    TransmitCommand(0x5B);
 8000872:	205b      	movs	r0, #91	; 0x5b
 8000874:	f7ff ff74 	bl	8000760 <TransmitCommand>
        TransmitCommandParameter(0);
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff ff8f 	bl	800079c <TransmitCommandParameter>

    // turn off the display and configure cursor
    TransmitCommand(0x58);
 800087e:	2058      	movs	r0, #88	; 0x58
 8000880:	f7ff ff6e 	bl	8000760 <TransmitCommand>
        TransmitCommandParameter(0x57);
 8000884:	2057      	movs	r0, #87	; 0x57
 8000886:	f7ff ff89 	bl	800079c <TransmitCommandParameter>

    // set cursor size & type
    TransmitCommand(0x5D);
 800088a:	205d      	movs	r0, #93	; 0x5d
 800088c:	f7ff ff68 	bl	8000760 <TransmitCommand>
        TransmitCommandParameter(4);
 8000890:	2004      	movs	r0, #4
 8000892:	f7ff ff83 	bl	800079c <TransmitCommandParameter>
        TransmitCommandParameter(0x84);
 8000896:	2084      	movs	r0, #132	; 0x84
 8000898:	f7ff ff80 	bl	800079c <TransmitCommandParameter>

    // set cursor direction
    TransmitCommand(0x4C);
 800089c:	204c      	movs	r0, #76	; 0x4c
 800089e:	f7ff ff5f 	bl	8000760 <TransmitCommand>

    // turn on the display and configure cursor
    TransmitCommand(0x59);
 80008a2:	2059      	movs	r0, #89	; 0x59
 80008a4:	f7ff ff5c 	bl	8000760 <TransmitCommand>
        TransmitCommandParameter(0x7);
 80008a8:	2007      	movs	r0, #7
 80008aa:	f7ff ff77 	bl	800079c <TransmitCommandParameter>
        
    CharacterBitMaps();    
 80008ae:	f7ff fd67 	bl	8000380 <CharacterBitMaps>
			
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <CanFilterSetup>:
 * @brief Initialize CAN node for sending and receiving
 * @param: CAN filter structure
 * @retval: nothing
 */
void CanFilterSetup()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	// Use mask and list mode to filter IDs from the CAN ID BOM

	// Filter for 0x500 and 0x600 IDs
    CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 80008bc:	4b23      	ldr	r3, [pc, #140]	; (800094c <CanFilterSetup+0x94>)
 80008be:	f24a 0220 	movw	r2, #40992	; 0xa020
 80008c2:	601a      	str	r2, [r3, #0]
    CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 80008c4:	4b21      	ldr	r3, [pc, #132]	; (800094c <CanFilterSetup+0x94>)
 80008c6:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 80008ca:	609a      	str	r2, [r3, #8]

    CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 80008cc:	4b1f      	ldr	r3, [pc, #124]	; (800094c <CanFilterSetup+0x94>)
 80008ce:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 80008d2:	605a      	str	r2, [r3, #4]
    CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <CanFilterSetup+0x94>)
 80008d6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80008da:	60da      	str	r2, [r3, #12]

    CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <CanFilterSetup+0x94>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
    CAN_filter0.FilterBank = (uint32_t) 0;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <CanFilterSetup+0x94>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
    CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <CanFilterSetup+0x94>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
    CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <CanFilterSetup+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
    CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <CanFilterSetup+0x94>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	621a      	str	r2, [r3, #32]

    // Remaining IDs filtered with list mode
    CAN_filter1.FilterIdHigh = (uint16_t) (0x401 << 5);
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <CanFilterSetup+0x98>)
 80008fc:	f248 0220 	movw	r2, #32800	; 0x8020
 8000900:	601a      	str	r2, [r3, #0]
    CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <CanFilterSetup+0x98>)
 8000904:	f248 0220 	movw	r2, #32800	; 0x8020
 8000908:	609a      	str	r2, [r3, #8]

    CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <CanFilterSetup+0x98>)
 800090c:	f248 0220 	movw	r2, #32800	; 0x8020
 8000910:	605a      	str	r2, [r3, #4]
    CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <CanFilterSetup+0x98>)
 8000914:	f248 0220 	movw	r2, #32800	; 0x8020
 8000918:	60da      	str	r2, [r3, #12]

    CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <CanFilterSetup+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
    CAN_filter1.FilterBank = (uint32_t) 1;
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <CanFilterSetup+0x98>)
 8000922:	2201      	movs	r2, #1
 8000924:	615a      	str	r2, [r3, #20]
    CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <CanFilterSetup+0x98>)
 8000928:	2201      	movs	r2, #1
 800092a:	619a      	str	r2, [r3, #24]
    CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <CanFilterSetup+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
    CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <CanFilterSetup+0x98>)
 8000934:	2201      	movs	r2, #1
 8000936:	621a      	str	r2, [r3, #32]

	// Configure reception filters
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 8000938:	4904      	ldr	r1, [pc, #16]	; (800094c <CanFilterSetup+0x94>)
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <CanFilterSetup+0x9c>)
 800093c:	f000 fccd 	bl	80012da <HAL_CAN_ConfigFilter>
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 8000940:	4903      	ldr	r1, [pc, #12]	; (8000950 <CanFilterSetup+0x98>)
 8000942:	4804      	ldr	r0, [pc, #16]	; (8000954 <CanFilterSetup+0x9c>)
 8000944:	f000 fcc9 	bl	80012da <HAL_CAN_ConfigFilter>

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20001c10 	.word	0x20001c10
 8000950:	20001be8 	.word	0x20001be8
 8000954:	20001ba0 	.word	0x20001ba0

08000958 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_CAN_Init+0x64>)
 800095e:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <MX_CAN_Init+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_CAN_Init+0x64>)
 8000964:	220c      	movs	r2, #12
 8000966:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_CAN_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_CAN_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_CAN_Init+0x64>)
 8000976:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800097a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_CAN_Init+0x64>)
 800097e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000982:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <MX_CAN_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_CAN_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_CAN_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_CAN_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_CAN_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_CAN_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_CAN_Init+0x64>)
 80009aa:	f000 fb9b 	bl	80010e4 <HAL_CAN_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80009b4:	f000 fa7a 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20001ba0 	.word	0x20001ba0
 80009c0:	40006400 	.word	0x40006400

080009c4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a29      	ldr	r2, [pc, #164]	; (8000a84 <HAL_CAN_MspInit+0xc0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d14b      	bne.n	8000a7c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <HAL_CAN_MspInit+0xc4>)
 80009e6:	69db      	ldr	r3, [r3, #28]
 80009e8:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <HAL_CAN_MspInit+0xc4>)
 80009ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ee:	61d3      	str	r3, [r2, #28]
 80009f0:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <HAL_CAN_MspInit+0xc4>)
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <HAL_CAN_MspInit+0xc4>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a21      	ldr	r2, [pc, #132]	; (8000a88 <HAL_CAN_MspInit+0xc4>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <HAL_CAN_MspInit+0xc4>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4818      	ldr	r0, [pc, #96]	; (8000a8c <HAL_CAN_MspInit+0xc8>)
 8000a2a:	f001 f99f 	bl	8001d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4812      	ldr	r0, [pc, #72]	; (8000a8c <HAL_CAN_MspInit+0xc8>)
 8000a44:	f001 f992 	bl	8001d6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_CAN_MspInit+0xcc>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a50:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_CAN_MspInit+0xcc>)
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2105      	movs	r1, #5
 8000a70:	2014      	movs	r0, #20
 8000a72:	f001 f950 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000a76:	2014      	movs	r0, #20
 8000a78:	f001 f969 	bl	8001d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40006400 	.word	0x40006400
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40010c00 	.word	0x40010c00
 8000a90:	40010000 	.word	0x40010000

08000a94 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of messageReceive */
  messageReceiveHandle = osThreadNew(messageReceiveTask, NULL, &messageReceive_attributes);
 8000a98:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <MX_FREERTOS_Init+0x64>)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4817      	ldr	r0, [pc, #92]	; (8000afc <MX_FREERTOS_Init+0x68>)
 8000a9e:	f002 fa1d 	bl	8002edc <osThreadNew>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <MX_FREERTOS_Init+0x6c>)
 8000aa6:	6013      	str	r3, [r2, #0]

  /* creation of updateDisplay */
  updateDisplayHandle = osThreadNew(updateDisplayTask, NULL, &updateDisplay_attributes);
 8000aa8:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <MX_FREERTOS_Init+0x70>)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4816      	ldr	r0, [pc, #88]	; (8000b08 <MX_FREERTOS_Init+0x74>)
 8000aae:	f002 fa15 	bl	8002edc <osThreadNew>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <MX_FREERTOS_Init+0x78>)
 8000ab6:	6013      	str	r3, [r2, #0]

  /* creation of updateEventFlag */
  updateEventFlagHandle = osThreadNew(updateEventFlagsTask, NULL, &updateEventFlag_attributes);
 8000ab8:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <MX_FREERTOS_Init+0x7c>)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4815      	ldr	r0, [pc, #84]	; (8000b14 <MX_FREERTOS_Init+0x80>)
 8000abe:	f002 fa0d 	bl	8002edc <osThreadNew>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <MX_FREERTOS_Init+0x84>)
 8000ac6:	6013      	str	r3, [r2, #0]

  /* creation of pageChange */
  pageChangeHandle = osThreadNew(pageChangeTask, NULL, &pageChange_attributes);
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <MX_FREERTOS_Init+0x88>)
 8000aca:	2100      	movs	r1, #0
 8000acc:	4814      	ldr	r0, [pc, #80]	; (8000b20 <MX_FREERTOS_Init+0x8c>)
 8000ace:	f002 fa05 	bl	8002edc <osThreadNew>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <MX_FREERTOS_Init+0x90>)
 8000ad6:	6013      	str	r3, [r2, #0]

  /* creation of pageTimeout */
  pageTimeoutHandle = osThreadNew(pageTimeoutTask, NULL, &pageTimeout_attributes);
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <MX_FREERTOS_Init+0x94>)
 8000ada:	2100      	movs	r1, #0
 8000adc:	4813      	ldr	r0, [pc, #76]	; (8000b2c <MX_FREERTOS_Init+0x98>)
 8000ade:	f002 f9fd 	bl	8002edc <osThreadNew>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MX_FREERTOS_Init+0x9c>)
 8000ae6:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of stateEventFlags */
  stateEventFlagsHandle = osEventFlagsNew(&stateEventFlags_attributes);
 8000ae8:	4812      	ldr	r0, [pc, #72]	; (8000b34 <MX_FREERTOS_Init+0xa0>)
 8000aea:	f002 facf 	bl	800308c <osEventFlagsNew>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <MX_FREERTOS_Init+0xa4>)
 8000af2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	080063c4 	.word	0x080063c4
 8000afc:	08000b3d 	.word	0x08000b3d
 8000b00:	20001be0 	.word	0x20001be0
 8000b04:	080063e8 	.word	0x080063e8
 8000b08:	08000bf5 	.word	0x08000bf5
 8000b0c:	20001bd8 	.word	0x20001bd8
 8000b10:	0800640c 	.word	0x0800640c
 8000b14:	08000c29 	.word	0x08000c29
 8000b18:	20001bdc 	.word	0x20001bdc
 8000b1c:	08006430 	.word	0x08006430
 8000b20:	08000ca5 	.word	0x08000ca5
 8000b24:	20001bd4 	.word	0x20001bd4
 8000b28:	08006454 	.word	0x08006454
 8000b2c:	08000cc9 	.word	0x08000cc9
 8000b30:	20001bc8 	.word	0x20001bc8
 8000b34:	08006478 	.word	0x08006478
 8000b38:	20001bcc 	.word	0x20001bcc

08000b3c <messageReceiveTask>:
  * @brief  Reads CAN message ID received and updates the corresponding structure for the global data array.
  * 		Currently, parses the data for specific IDs that require manipulation of the rx_data.
  */
/* USER CODE END Header_messageReceiveTask */
void messageReceiveTask(void *argument)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	uint8_t CAN_rx_data[8];
	while(1)
	{
		// Wait for the CAN FIFO0 interrupt to invoke and set the event flag

		osEventFlagsWait(stateEventFlagsHandle, MESSAGE_RECEIVE, osFlagsWaitAll, osWaitForever);
 8000b44:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <messageReceiveTask+0xa4>)
 8000b46:	6818      	ldr	r0, [r3, #0]
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2101      	movs	r1, #1
 8000b50:	f002 fb46 	bl	80031e0 <osEventFlagsWait>

		// Check if message is available
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0)
 8000b54:	2100      	movs	r1, #0
 8000b56:	4823      	ldr	r0, [pc, #140]	; (8000be4 <messageReceiveTask+0xa8>)
 8000b58:	f000 fddd 	bl	8001716 <HAL_CAN_GetRxFifoFillLevel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d03a      	beq.n	8000bd8 <messageReceiveTask+0x9c>
		{
			// Populate CAN header and data variables
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &CAN_rx_header, CAN_rx_data);
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <messageReceiveTask+0xac>)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	481e      	ldr	r0, [pc, #120]	; (8000be4 <messageReceiveTask+0xa8>)
 8000b6c:	f000 fcc2 	bl	80014f4 <HAL_CAN_GetRxMessage>

			// Find the matching data that needs to be updated
			for(uint8_t struct_index = 0; struct_index < NUM_CAN_IDS; struct_index++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	75fb      	strb	r3, [r7, #23]
 8000b74:	e028      	b.n	8000bc8 <messageReceiveTask+0x8c>
			{
				if(DisplayData[struct_index].can_id == CAN_rx_header.StdId)
 8000b76:	7dfa      	ldrb	r2, [r7, #23]
 8000b78:	491c      	ldr	r1, [pc, #112]	; (8000bec <messageReceiveTask+0xb0>)
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4413      	add	r3, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <messageReceiveTask+0xac>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d119      	bne.n	8000bc2 <messageReceiveTask+0x86>
				{
					for(int data_index = 0; data_index < 8; data_index++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	e013      	b.n	8000bbc <messageReceiveTask+0x80>
					{
						DisplayData[struct_index].raw_data[data_index] = CAN_rx_data[data_index];
 8000b94:	f107 0208 	add.w	r2, r7, #8
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	7dfa      	ldrb	r2, [r7, #23]
 8000ba0:	b258      	sxtb	r0, r3
 8000ba2:	4912      	ldr	r1, [pc, #72]	; (8000bec <messageReceiveTask+0xb0>)
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	4413      	add	r3, r2
 8000baa:	18ca      	adds	r2, r1, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4413      	add	r3, r2
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	701a      	strb	r2, [r3, #0]
					for(int data_index = 0; data_index < 8; data_index++)
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	2b07      	cmp	r3, #7
 8000bc0:	dde8      	ble.n	8000b94 <messageReceiveTask+0x58>
			for(uint8_t struct_index = 0; struct_index < NUM_CAN_IDS; struct_index++)
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	75fb      	strb	r3, [r7, #23]
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d9d3      	bls.n	8000b76 <messageReceiveTask+0x3a>
					}
				}
			}

			// Set event flag to run the updateDisplay task
			event_flags.update_display = 0x01;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <messageReceiveTask+0xb4>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	705a      	strb	r2, [r3, #1]

			// Reset the event flag after the task has finished
			event_flags.message_receive - 0x00;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <messageReceiveTask+0xb4>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
		}
		osDelay(MESSAGE_RECEIVE_TASK_DELAY);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f002 fa29 	bl	8003030 <osDelay>
		osEventFlagsWait(stateEventFlagsHandle, MESSAGE_RECEIVE, osFlagsWaitAll, osWaitForever);
 8000bde:	e7b1      	b.n	8000b44 <messageReceiveTask+0x8>
 8000be0:	20001bcc 	.word	0x20001bcc
 8000be4:	20001ba0 	.word	0x20001ba0
 8000be8:	20001c38 	.word	0x20001c38
 8000bec:	20000084 	.word	0x20000084
 8000bf0:	20001be4 	.word	0x20001be4

08000bf4 <updateDisplayTask>:
/**
* @brief 	Updates the display. Only called after new data has been received
*/
/* USER CODE END Header_updateDisplayTask */
void updateDisplayTask(void *argument)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateDisplayTask */
	while(1)
	{
		// Wait for the CAN FIFO0 interrupt to invoke and set the event flag

		osEventFlagsWait(stateEventFlagsHandle, UPDATE_DISPLAY, osFlagsWaitAll, osWaitForever);
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <updateDisplayTask+0x2c>)
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295
 8000c04:	2201      	movs	r2, #1
 8000c06:	2102      	movs	r1, #2
 8000c08:	f002 faea 	bl	80031e0 <osEventFlagsWait>

		DisplayScreen();
 8000c0c:	f7ff fd00 	bl	8000610 <DisplayScreen>

		// Reset the event flag after the task has finished
		event_flags.update_display = 0x00;
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <updateDisplayTask+0x30>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	705a      	strb	r2, [r3, #1]

		osDelay(UPDATE_DISPLAY_TASK_DELAY);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f002 fa0a 	bl	8003030 <osDelay>
		osEventFlagsWait(stateEventFlagsHandle, UPDATE_DISPLAY, osFlagsWaitAll, osWaitForever);
 8000c1c:	e7ee      	b.n	8000bfc <updateDisplayTask+0x8>
 8000c1e:	bf00      	nop
 8000c20:	20001bcc 	.word	0x20001bcc
 8000c24:	20001be4 	.word	0x20001be4

08000c28 <updateEventFlagsTask>:
/**
* @brief 	Sets the display state event flag based on the event_flags value
*/
/* USER CODE END Header_updateEventFlagsTask */
void updateEventFlagsTask(void *argument)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateEventFlagsTask */
	while(1)
	{
		if (event_flags.message_receive) {
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <updateEventFlagsTask+0x70>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <updateEventFlagsTask+0x1a>
			state = MESSAGE_RECEIVE;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <updateEventFlagsTask+0x74>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	e01d      	b.n	8000c7e <updateEventFlagsTask+0x56>
		}
		else if (event_flags.update_display) {
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <updateEventFlagsTask+0x70>)
 8000c44:	785b      	ldrb	r3, [r3, #1]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <updateEventFlagsTask+0x2c>
			state = UPDATE_DISPLAY;
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <updateEventFlagsTask+0x74>)
 8000c4e:	2202      	movs	r2, #2
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	e014      	b.n	8000c7e <updateEventFlagsTask+0x56>
		}
		else if (event_flags.page_change) {
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <updateEventFlagsTask+0x70>)
 8000c56:	789b      	ldrb	r3, [r3, #2]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <updateEventFlagsTask+0x3e>
			state = PAGE_CHANGE;
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <updateEventFlagsTask+0x74>)
 8000c60:	2204      	movs	r2, #4
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e00b      	b.n	8000c7e <updateEventFlagsTask+0x56>
		}
		else if (event_flags.page_timeout) {
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <updateEventFlagsTask+0x70>)
 8000c68:	78db      	ldrb	r3, [r3, #3]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <updateEventFlagsTask+0x50>
			state = PAGE_TIMEOUT;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <updateEventFlagsTask+0x74>)
 8000c72:	2208      	movs	r2, #8
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e002      	b.n	8000c7e <updateEventFlagsTask+0x56>
		}
		else {
			state = IDLE;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <updateEventFlagsTask+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
		}

		osEventFlagsSet(stateEventFlagsHandle, state);
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <updateEventFlagsTask+0x78>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <updateEventFlagsTask+0x74>)
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 fa51 	bl	8003130 <osEventFlagsSet>

		osDelay(UPDATE_EVENT_FLAGS_TASK_DELAY);
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f002 f9ce 	bl	8003030 <osDelay>
		if (event_flags.message_receive) {
 8000c94:	e7cc      	b.n	8000c30 <updateEventFlagsTask+0x8>
 8000c96:	bf00      	nop
 8000c98:	20001be4 	.word	0x20001be4
 8000c9c:	20001bd0 	.word	0x20001bd0
 8000ca0:	20001bcc 	.word	0x20001bcc

08000ca4 <pageChangeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pageChangeTask */
void pageChangeTask(void *argument)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pageChangeTask */
	while(1)
	{
		osEventFlagsWait(stateEventFlagsHandle, PAGE_CHANGE, osFlagsWaitAll, osWaitForever);
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <pageChangeTask+0x20>)
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2104      	movs	r1, #4
 8000cb8:	f002 fa92 	bl	80031e0 <osEventFlagsWait>

		osDelay(PAGE_CHANGE_TASK_DELAY);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f002 f9b7 	bl	8003030 <osDelay>
		osEventFlagsWait(stateEventFlagsHandle, PAGE_CHANGE, osFlagsWaitAll, osWaitForever);
 8000cc2:	e7f3      	b.n	8000cac <pageChangeTask+0x8>
 8000cc4:	20001bcc 	.word	0x20001bcc

08000cc8 <pageTimeoutTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pageTimeoutTask */
void pageTimeoutTask(void *argument)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pageTimeoutTask */
	while(1)
	{
		osEventFlagsWait(stateEventFlagsHandle, PAGE_TIMEOUT, osFlagsWaitAll, osWaitForever);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <pageTimeoutTask+0x20>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2108      	movs	r1, #8
 8000cdc:	f002 fa80 	bl	80031e0 <osEventFlagsWait>

		osDelay(PAGE_TIMEOUT_TASK_DELAY);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f002 f9a5 	bl	8003030 <osDelay>
		osEventFlagsWait(stateEventFlagsHandle, PAGE_TIMEOUT, osFlagsWaitAll, osWaitForever);
 8000ce6:	e7f3      	b.n	8000cd0 <pageTimeoutTask+0x8>
 8000ce8:	20001bcc 	.word	0x20001bcc

08000cec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <MX_GPIO_Init+0xb4>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <MX_GPIO_Init+0xb4>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <MX_GPIO_Init+0xb4>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0310 	and.w	r3, r3, #16
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_GPIO_Init+0xb4>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a20      	ldr	r2, [pc, #128]	; (8000da0 <MX_GPIO_Init+0xb4>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <MX_GPIO_Init+0xb4>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_GPIO_Init+0xb4>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <MX_GPIO_Init+0xb4>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_GPIO_Init+0xb4>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000d4e:	4815      	ldr	r0, [pc, #84]	; (8000da4 <MX_GPIO_Init+0xb8>)
 8000d50:	f001 f9a0 	bl	8002094 <HAL_GPIO_WritePin>
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A6_GPIO_Port, A6_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2140      	movs	r1, #64	; 0x40
 8000d58:	4813      	ldr	r0, [pc, #76]	; (8000da8 <MX_GPIO_Init+0xbc>)
 8000d5a:	f001 f99b 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 8000d5e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d62:	613b      	str	r3, [r7, #16]
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	4619      	mov	r1, r3
 8000d76:	480b      	ldr	r0, [pc, #44]	; (8000da4 <MX_GPIO_Init+0xb8>)
 8000d78:	f000 fff8 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A6_Pin;
 8000d7c:	2340      	movs	r3, #64	; 0x40
 8000d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A6_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_GPIO_Init+0xbc>)
 8000d94:	f000 ffea 	bl	8001d6c <HAL_GPIO_Init>

}
 8000d98:	bf00      	nop
 8000d9a:	3720      	adds	r7, #32
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40011000 	.word	0x40011000
 8000da8:	40010800 	.word	0x40010800

08000dac <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	// Set message flag to 1 so that the update display task can execute
	event_flags.message_receive = 0x01;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	20001be4 	.word	0x20001be4

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f000 f958 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f818 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f7ff ff8a 	bl	8000cec <MX_GPIO_Init>
  MX_CAN_Init();
 8000dd8:	f7ff fdbe 	bl	8000958 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  // CAN Initialization
  CanFilterSetup();
 8000ddc:	f7ff fd6c 	bl	80008b8 <CanFilterSetup>
  HAL_CAN_Start(&hcan);
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <main+0x38>)
 8000de2:	f000 fb43 	bl	800146c <HAL_CAN_Start>

  // Display startup screen
  ScreenSetup();
 8000de6:	f7ff fcf7 	bl	80007d8 <ScreenSetup>
  ClearScreen();
 8000dea:	f7ff fa82 	bl	80002f2 <ClearScreen>
  DisplayScreen();
 8000dee:	f7ff fc0f 	bl	8000610 <DisplayScreen>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000df2:	f002 f80d 	bl	8002e10 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000df6:	f7ff fe4d 	bl	8000a94 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000dfa:	f002 f83b 	bl	8002e74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <main+0x36>
 8000e00:	20001ba0 	.word	0x20001ba0

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b090      	sub	sp, #64	; 0x40
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	2228      	movs	r2, #40	; 0x28
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f005 f916 	bl	8006044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2e:	2310      	movs	r3, #16
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e32:	2302      	movs	r3, #2
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e36:	2300      	movs	r3, #0
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e3a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 0318 	add.w	r3, r7, #24
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 f93d 	bl	80020c4 <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e50:	f000 f82c 	bl	8000eac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e54:	230f      	movs	r3, #15
 8000e56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fba8 	bl	80025c4 <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e7a:	f000 f817 	bl	8000eac <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3740      	adds	r7, #64	; 0x40
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e9a:	f000 f907 	bl	80010ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40013400 	.word	0x40013400

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <Error_Handler+0x8>
	...

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_MspInit+0x68>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_MspInit+0x68>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6193      	str	r3, [r2, #24]
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_MspInit+0x68>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_MspInit+0x68>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <HAL_MspInit+0x68>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	61d3      	str	r3, [r2, #28]
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_MspInit+0x68>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	210f      	movs	r1, #15
 8000ef2:	f06f 0001 	mvn.w	r0, #1
 8000ef6:	f000 ff0e 	bl	8001d16 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_MspInit+0x6c>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_MspInit+0x6c>)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010000 	.word	0x40010000

08000f28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority ,0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	202c      	movs	r0, #44	; 0x2c
 8000f3e:	f000 feea 	bl	8001d16 <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8000f42:	202c      	movs	r0, #44	; 0x2c
 8000f44:	f000 ff03 	bl	8001d4e <HAL_NVIC_EnableIRQ>
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_InitTick+0x9c>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <HAL_InitTick+0x9c>)
 8000f4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_InitTick+0x9c>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f60:	f107 0210 	add.w	r2, r7, #16
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 fc92 	bl	8002894 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f70:	f001 fc7c 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 8000f74:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f78:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <HAL_InitTick+0xa0>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	0c9b      	lsrs	r3, r3, #18
 8000f80:	3b01      	subs	r3, #1
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <HAL_InitTick+0xa4>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <HAL_InitTick+0xa8>)
 8000f88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_InitTick+0xa4>)
 8000f8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f90:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_InitTick+0xa4>)
 8000f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f96:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_InitTick+0xa4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_InitTick+0xa4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8000fa4:	4809      	ldr	r0, [pc, #36]	; (8000fcc <HAL_InitTick+0xa4>)
 8000fa6:	f001 fcc3 	bl	8002930 <HAL_TIM_Base_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d104      	bne.n	8000fba <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8000fb0:	4806      	ldr	r0, [pc, #24]	; (8000fcc <HAL_InitTick+0xa4>)
 8000fb2:	f001 fd15 	bl	80029e0 <HAL_TIM_Base_Start_IT>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3730      	adds	r7, #48	; 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	431bde83 	.word	0x431bde83
 8000fcc:	20001c54 	.word	0x20001c54
 8000fd0:	40013400 	.word	0x40013400

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
	...

08001000 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001006:	f000 fbad 	bl	8001764 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20001ba0 	.word	0x20001ba0

08001014 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <TIM8_UP_IRQHandler+0x10>)
 800101a:	f001 fd41 	bl	8002aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20001c54 	.word	0x20001c54

08001028 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <Reset_Handler>:
 8001034:	2100      	movs	r1, #0
 8001036:	e003      	b.n	8001040 <LoopCopyDataInit>

08001038 <CopyDataInit>:
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <LoopFillZerobss+0x14>)
 800103a:	585b      	ldr	r3, [r3, r1]
 800103c:	5043      	str	r3, [r0, r1]
 800103e:	3104      	adds	r1, #4

08001040 <LoopCopyDataInit>:
 8001040:	480a      	ldr	r0, [pc, #40]	; (800106c <LoopFillZerobss+0x18>)
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <LoopFillZerobss+0x1c>)
 8001044:	1842      	adds	r2, r0, r1
 8001046:	429a      	cmp	r2, r3
 8001048:	d3f6      	bcc.n	8001038 <CopyDataInit>
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <LoopFillZerobss+0x20>)
 800104c:	e002      	b.n	8001054 <LoopFillZerobss>

0800104e <FillZerobss>:
 800104e:	2300      	movs	r3, #0
 8001050:	f842 3b04 	str.w	r3, [r2], #4

08001054 <LoopFillZerobss>:
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <LoopFillZerobss+0x24>)
 8001056:	429a      	cmp	r2, r3
 8001058:	d3f9      	bcc.n	800104e <FillZerobss>
 800105a:	f7ff ffe5 	bl	8001028 <SystemInit>
 800105e:	f004 ffbd 	bl	8005fdc <__libc_init_array>
 8001062:	f7ff feb1 	bl	8000dc8 <main>
 8001066:	4770      	bx	lr
 8001068:	08006508 	.word	0x08006508
 800106c:	20000000 	.word	0x20000000
 8001070:	200001b8 	.word	0x200001b8
 8001074:	200001b8 	.word	0x200001b8
 8001078:	20001cec 	.word	0x20001cec

0800107c <ADC1_2_IRQHandler>:
 800107c:	e7fe      	b.n	800107c <ADC1_2_IRQHandler>
	...

08001080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_Init+0x28>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_Init+0x28>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 fe35 	bl	8001d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff46 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff ff0c 	bl	8000eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40022000 	.word	0x40022000

080010ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_IncTick+0x1c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_IncTick+0x20>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a03      	ldr	r2, [pc, #12]	; (80010cc <HAL_IncTick+0x20>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	2000014c 	.word	0x2000014c
 80010cc:	20001c9c 	.word	0x20001c9c

080010d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b02      	ldr	r3, [pc, #8]	; (80010e0 <HAL_GetTick+0x10>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	20001c9c 	.word	0x20001c9c

080010e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e0ed      	b.n	80012d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fc5e 	bl	80009c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0202 	bic.w	r2, r2, #2
 8001116:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001118:	f7ff ffda 	bl	80010d0 <HAL_GetTick>
 800111c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800111e:	e012      	b.n	8001146 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001120:	f7ff ffd6 	bl	80010d0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b0a      	cmp	r3, #10
 800112c:	d90b      	bls.n	8001146 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2205      	movs	r2, #5
 800113e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e0c5      	b.n	80012d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1e5      	bne.n	8001120 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001164:	f7ff ffb4 	bl	80010d0 <HAL_GetTick>
 8001168:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800116a:	e012      	b.n	8001192 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800116c:	f7ff ffb0 	bl	80010d0 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b0a      	cmp	r3, #10
 8001178:	d90b      	bls.n	8001192 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2205      	movs	r2, #5
 800118a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e09f      	b.n	80012d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0e5      	beq.n	800116c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7e1b      	ldrb	r3, [r3, #24]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d108      	bne.n	80011ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e007      	b.n	80011ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7e5b      	ldrb	r3, [r3, #25]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d108      	bne.n	80011e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e007      	b.n	80011f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7e9b      	ldrb	r3, [r3, #26]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0220 	orr.w	r2, r2, #32
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e007      	b.n	800121e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0220 	bic.w	r2, r2, #32
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7edb      	ldrb	r3, [r3, #27]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0210 	bic.w	r2, r2, #16
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e007      	b.n	8001248 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0210 	orr.w	r2, r2, #16
 8001246:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7f1b      	ldrb	r3, [r3, #28]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d108      	bne.n	8001262 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0208 	orr.w	r2, r2, #8
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e007      	b.n	8001272 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0208 	bic.w	r2, r2, #8
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7f5b      	ldrb	r3, [r3, #29]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d108      	bne.n	800128c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0204 	orr.w	r2, r2, #4
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e007      	b.n	800129c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0204 	bic.w	r2, r2, #4
 800129a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	ea42 0103 	orr.w	r1, r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	1e5a      	subs	r2, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	430a      	orrs	r2, r1
 80012c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80012da:	b480      	push	{r7}
 80012dc:	b087      	sub	sp, #28
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80012f2:	7cfb      	ldrb	r3, [r7, #19]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d003      	beq.n	8001300 <HAL_CAN_ConfigFilter+0x26>
 80012f8:	7cfb      	ldrb	r3, [r7, #19]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	f040 80aa 	bne.w	8001454 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001306:	f043 0201 	orr.w	r2, r3, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	f003 031f 	and.w	r3, r3, #31
 8001318:	2201      	movs	r2, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43db      	mvns	r3, r3
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d123      	bne.n	8001382 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43db      	mvns	r3, r3
 8001344:	401a      	ands	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800135c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3248      	adds	r2, #72	; 0x48
 8001362:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001376:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001378:	6979      	ldr	r1, [r7, #20]
 800137a:	3348      	adds	r3, #72	; 0x48
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d122      	bne.n	80013d0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	431a      	orrs	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3248      	adds	r2, #72	; 0x48
 80013b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013c6:	6979      	ldr	r1, [r7, #20]
 80013c8:	3348      	adds	r3, #72	; 0x48
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d109      	bne.n	80013ec <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013ea:	e007      	b.n	80013fc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	431a      	orrs	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d109      	bne.n	8001418 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43db      	mvns	r3, r3
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001416:	e007      	b.n	8001428 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	431a      	orrs	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d107      	bne.n	8001440 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	431a      	orrs	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001446:	f023 0201 	bic.w	r2, r3, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	e006      	b.n	8001462 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
  }
}
 8001462:	4618      	mov	r0, r3
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d12e      	bne.n	80014de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001498:	f7ff fe1a 	bl	80010d0 <HAL_GetTick>
 800149c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800149e:	e012      	b.n	80014c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014a0:	f7ff fe16 	bl	80010d0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b0a      	cmp	r3, #10
 80014ac:	d90b      	bls.n	80014c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2205      	movs	r2, #5
 80014be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e012      	b.n	80014ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e5      	bne.n	80014a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e006      	b.n	80014ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
  }
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001508:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800150a:	7dfb      	ldrb	r3, [r7, #23]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d003      	beq.n	8001518 <HAL_CAN_GetRxMessage+0x24>
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	2b02      	cmp	r3, #2
 8001514:	f040 80f3 	bne.w	80016fe <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10e      	bne.n	800153c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d116      	bne.n	800155a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0e7      	b.n	800170c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d107      	bne.n	800155a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0d8      	b.n	800170c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	331b      	adds	r3, #27
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	4413      	add	r3, r2
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0204 	and.w	r2, r3, #4
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10c      	bne.n	8001592 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	331b      	adds	r3, #27
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	4413      	add	r3, r2
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	0d5b      	lsrs	r3, r3, #21
 8001588:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	e00b      	b.n	80015aa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	331b      	adds	r3, #27
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	4413      	add	r3, r2
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	08db      	lsrs	r3, r3, #3
 80015a2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	331b      	adds	r3, #27
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	4413      	add	r3, r2
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0202 	and.w	r2, r3, #2
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	331b      	adds	r3, #27
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	4413      	add	r3, r2
 80015cc:	3304      	adds	r3, #4
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 020f 	and.w	r2, r3, #15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	331b      	adds	r3, #27
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	4413      	add	r3, r2
 80015e4:	3304      	adds	r3, #4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	331b      	adds	r3, #27
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	4413      	add	r3, r2
 80015fc:	3304      	adds	r3, #4
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	0c1b      	lsrs	r3, r3, #16
 8001602:	b29a      	uxth	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	4413      	add	r3, r2
 8001612:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	4413      	add	r3, r2
 8001628:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	0a1a      	lsrs	r2, r3, #8
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	4413      	add	r3, r2
 8001642:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	0c1a      	lsrs	r2, r3, #16
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3302      	adds	r3, #2
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	4413      	add	r3, r2
 800165c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	0e1a      	lsrs	r2, r3, #24
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	3303      	adds	r3, #3
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	4413      	add	r3, r2
 8001676:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	3304      	adds	r3, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4413      	add	r3, r2
 800168e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0a1a      	lsrs	r2, r3, #8
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	3305      	adds	r3, #5
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	4413      	add	r3, r2
 80016a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	0c1a      	lsrs	r2, r3, #16
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	3306      	adds	r3, #6
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	4413      	add	r3, r2
 80016c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0e1a      	lsrs	r2, r3, #24
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	3307      	adds	r3, #7
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d108      	bne.n	80016ea <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0220 	orr.w	r2, r2, #32
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	e007      	b.n	80016fa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0220 	orr.w	r2, r2, #32
 80016f8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e006      	b.n	800170c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
  }
}
 800170c:	4618      	mov	r0, r3
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001716:	b480      	push	{r7}
 8001718:	b085      	sub	sp, #20
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800172c:	7afb      	ldrb	r3, [r7, #11]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d002      	beq.n	8001738 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001732:	7afb      	ldrb	r3, [r7, #11]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d10f      	bne.n	8001758 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d106      	bne.n	800174c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	e005      	b.n	8001758 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001758:	68fb      	ldr	r3, [r7, #12]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d07c      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d023      	beq.n	80017fc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2201      	movs	r2, #1
 80017ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f983 	bl	8001ad2 <HAL_CAN_TxMailbox0CompleteCallback>
 80017cc:	e016      	b.n	80017fc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
 80017e0:	e00c      	b.n	80017fc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
 80017f4:	e002      	b.n	80017fc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f986 	bl	8001b08 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d024      	beq.n	8001850 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f962 	bl	8001ae4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001820:	e016      	b.n	8001850 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
 8001834:	e00c      	b.n	8001850 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
 8001848:	e002      	b.n	8001850 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f965 	bl	8001b1a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d024      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001862:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f941 	bl	8001af6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001874:	e016      	b.n	80018a4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d004      	beq.n	800188a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	e00c      	b.n	80018a4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
 800189c:	e002      	b.n	80018a4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f944 	bl	8001b2c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00c      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0310 	and.w	r3, r3, #16
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d007      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2210      	movs	r2, #16
 80018c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00b      	beq.n	80018ea <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2208      	movs	r2, #8
 80018e2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f92a 	bl	8001b3e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d009      	beq.n	8001908 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fa52 	bl	8000dac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00c      	beq.n	800192c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001922:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2210      	movs	r2, #16
 800192a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	f003 0320 	and.w	r3, r3, #32
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2208      	movs	r2, #8
 8001946:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f90a 	bl	8001b62 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f8f2 	bl	8001b50 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2210      	movs	r2, #16
 8001986:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f8f3 	bl	8001b74 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00b      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2208      	movs	r2, #8
 80019a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f8eb 	bl	8001b86 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d07b      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d072      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d008      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d043      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d03e      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a32:	2b60      	cmp	r3, #96	; 0x60
 8001a34:	d02b      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x32a>
 8001a36:	2b60      	cmp	r3, #96	; 0x60
 8001a38:	d82e      	bhi.n	8001a98 <HAL_CAN_IRQHandler+0x334>
 8001a3a:	2b50      	cmp	r3, #80	; 0x50
 8001a3c:	d022      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x320>
 8001a3e:	2b50      	cmp	r3, #80	; 0x50
 8001a40:	d82a      	bhi.n	8001a98 <HAL_CAN_IRQHandler+0x334>
 8001a42:	2b40      	cmp	r3, #64	; 0x40
 8001a44:	d019      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x316>
 8001a46:	2b40      	cmp	r3, #64	; 0x40
 8001a48:	d826      	bhi.n	8001a98 <HAL_CAN_IRQHandler+0x334>
 8001a4a:	2b30      	cmp	r3, #48	; 0x30
 8001a4c:	d010      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x30c>
 8001a4e:	2b30      	cmp	r3, #48	; 0x30
 8001a50:	d822      	bhi.n	8001a98 <HAL_CAN_IRQHandler+0x334>
 8001a52:	2b10      	cmp	r3, #16
 8001a54:	d002      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x2f8>
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	d005      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a5a:	e01d      	b.n	8001a98 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	f043 0308 	orr.w	r3, r3, #8
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a64:	e019      	b.n	8001a9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	f043 0310 	orr.w	r3, r3, #16
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a6e:	e014      	b.n	8001a9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	f043 0320 	orr.w	r3, r3, #32
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a78:	e00f      	b.n	8001a9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a82:	e00a      	b.n	8001a9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a8c:	e005      	b.n	8001a9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a96:	e000      	b.n	8001a9a <HAL_CAN_IRQHandler+0x336>
            break;
 8001a98:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001aa8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f867 	bl	8001b98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001aca:	bf00      	nop
 8001acc:	3728      	adds	r7, #40	; 0x28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
	...

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4906      	ldr	r1, [pc, #24]	; (8001c44 <__NVIC_EnableIRQ+0x34>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff4f 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d28:	f7ff ff64 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	6978      	ldr	r0, [r7, #20]
 8001d34:	f7ff ffb2 	bl	8001c9c <NVIC_EncodePriority>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff81 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff57 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b08b      	sub	sp, #44	; 0x2c
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7e:	e179      	b.n	8002074 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d80:	2201      	movs	r2, #1
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f040 8168 	bne.w	800206e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4aa0      	ldr	r2, [pc, #640]	; (8002024 <HAL_GPIO_Init+0x2b8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d05e      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001da8:	4a9e      	ldr	r2, [pc, #632]	; (8002024 <HAL_GPIO_Init+0x2b8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d875      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dae:	4a9e      	ldr	r2, [pc, #632]	; (8002028 <HAL_GPIO_Init+0x2bc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d058      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001db4:	4a9c      	ldr	r2, [pc, #624]	; (8002028 <HAL_GPIO_Init+0x2bc>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d86f      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dba:	4a9c      	ldr	r2, [pc, #624]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d052      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001dc0:	4a9a      	ldr	r2, [pc, #616]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d869      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dc6:	4a9a      	ldr	r2, [pc, #616]	; (8002030 <HAL_GPIO_Init+0x2c4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d04c      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001dcc:	4a98      	ldr	r2, [pc, #608]	; (8002030 <HAL_GPIO_Init+0x2c4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d863      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dd2:	4a98      	ldr	r2, [pc, #608]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d046      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001dd8:	4a96      	ldr	r2, [pc, #600]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d85d      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dde:	2b12      	cmp	r3, #18
 8001de0:	d82a      	bhi.n	8001e38 <HAL_GPIO_Init+0xcc>
 8001de2:	2b12      	cmp	r3, #18
 8001de4:	d859      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <HAL_GPIO_Init+0x80>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001e67 	.word	0x08001e67
 8001df0:	08001e41 	.word	0x08001e41
 8001df4:	08001e53 	.word	0x08001e53
 8001df8:	08001e95 	.word	0x08001e95
 8001dfc:	08001e9b 	.word	0x08001e9b
 8001e00:	08001e9b 	.word	0x08001e9b
 8001e04:	08001e9b 	.word	0x08001e9b
 8001e08:	08001e9b 	.word	0x08001e9b
 8001e0c:	08001e9b 	.word	0x08001e9b
 8001e10:	08001e9b 	.word	0x08001e9b
 8001e14:	08001e9b 	.word	0x08001e9b
 8001e18:	08001e9b 	.word	0x08001e9b
 8001e1c:	08001e9b 	.word	0x08001e9b
 8001e20:	08001e9b 	.word	0x08001e9b
 8001e24:	08001e9b 	.word	0x08001e9b
 8001e28:	08001e9b 	.word	0x08001e9b
 8001e2c:	08001e9b 	.word	0x08001e9b
 8001e30:	08001e49 	.word	0x08001e49
 8001e34:	08001e5d 	.word	0x08001e5d
 8001e38:	4a7f      	ldr	r2, [pc, #508]	; (8002038 <HAL_GPIO_Init+0x2cc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e3e:	e02c      	b.n	8001e9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	623b      	str	r3, [r7, #32]
          break;
 8001e46:	e029      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	623b      	str	r3, [r7, #32]
          break;
 8001e50:	e024      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	3308      	adds	r3, #8
 8001e58:	623b      	str	r3, [r7, #32]
          break;
 8001e5a:	e01f      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	330c      	adds	r3, #12
 8001e62:	623b      	str	r3, [r7, #32]
          break;
 8001e64:	e01a      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d102      	bne.n	8001e74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	623b      	str	r3, [r7, #32]
          break;
 8001e72:	e013      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	611a      	str	r2, [r3, #16]
          break;
 8001e86:	e009      	b.n	8001e9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	615a      	str	r2, [r3, #20]
          break;
 8001e92:	e003      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
          break;
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          break;
 8001e9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2bff      	cmp	r3, #255	; 0xff
 8001ea0:	d801      	bhi.n	8001ea6 <HAL_GPIO_Init+0x13a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	e001      	b.n	8001eaa <HAL_GPIO_Init+0x13e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2bff      	cmp	r3, #255	; 0xff
 8001eb0:	d802      	bhi.n	8001eb8 <HAL_GPIO_Init+0x14c>
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	e002      	b.n	8001ebe <HAL_GPIO_Init+0x152>
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	3b08      	subs	r3, #8
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	210f      	movs	r1, #15
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	6a39      	ldr	r1, [r7, #32]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 80c1 	beq.w	800206e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eec:	4b53      	ldr	r3, [pc, #332]	; (800203c <HAL_GPIO_Init+0x2d0>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	; (800203c <HAL_GPIO_Init+0x2d0>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_GPIO_Init+0x2d0>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f04:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <HAL_GPIO_Init+0x2d4>)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4013      	ands	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a46      	ldr	r2, [pc, #280]	; (8002044 <HAL_GPIO_Init+0x2d8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d01f      	beq.n	8001f70 <HAL_GPIO_Init+0x204>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a45      	ldr	r2, [pc, #276]	; (8002048 <HAL_GPIO_Init+0x2dc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d019      	beq.n	8001f6c <HAL_GPIO_Init+0x200>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a44      	ldr	r2, [pc, #272]	; (800204c <HAL_GPIO_Init+0x2e0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_GPIO_Init+0x1fc>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a43      	ldr	r2, [pc, #268]	; (8002050 <HAL_GPIO_Init+0x2e4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00d      	beq.n	8001f64 <HAL_GPIO_Init+0x1f8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a42      	ldr	r2, [pc, #264]	; (8002054 <HAL_GPIO_Init+0x2e8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <HAL_GPIO_Init+0x1f4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a41      	ldr	r2, [pc, #260]	; (8002058 <HAL_GPIO_Init+0x2ec>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_GPIO_Init+0x1f0>
 8001f58:	2305      	movs	r3, #5
 8001f5a:	e00a      	b.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f5c:	2306      	movs	r3, #6
 8001f5e:	e008      	b.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f60:	2304      	movs	r3, #4
 8001f62:	e006      	b.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f64:	2303      	movs	r3, #3
 8001f66:	e004      	b.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e002      	b.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f70:	2300      	movs	r3, #0
 8001f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f74:	f002 0203 	and.w	r2, r2, #3
 8001f78:	0092      	lsls	r2, r2, #2
 8001f7a:	4093      	lsls	r3, r2
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f82:	492f      	ldr	r1, [pc, #188]	; (8002040 <HAL_GPIO_Init+0x2d4>)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f9c:	4b2f      	ldr	r3, [pc, #188]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	492e      	ldr	r1, [pc, #184]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001faa:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	492a      	ldr	r1, [pc, #168]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fc4:	4b25      	ldr	r3, [pc, #148]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4924      	ldr	r1, [pc, #144]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	4920      	ldr	r1, [pc, #128]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	491a      	ldr	r1, [pc, #104]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	43db      	mvns	r3, r3
 8002002:	4916      	ldr	r1, [pc, #88]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8002004:	4013      	ands	r3, r2
 8002006:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d025      	beq.n	8002060 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	4910      	ldr	r1, [pc, #64]	; (800205c <HAL_GPIO_Init+0x2f0>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	60cb      	str	r3, [r1, #12]
 8002020:	e025      	b.n	800206e <HAL_GPIO_Init+0x302>
 8002022:	bf00      	nop
 8002024:	10320000 	.word	0x10320000
 8002028:	10310000 	.word	0x10310000
 800202c:	10220000 	.word	0x10220000
 8002030:	10210000 	.word	0x10210000
 8002034:	10120000 	.word	0x10120000
 8002038:	10110000 	.word	0x10110000
 800203c:	40021000 	.word	0x40021000
 8002040:	40010000 	.word	0x40010000
 8002044:	40010800 	.word	0x40010800
 8002048:	40010c00 	.word	0x40010c00
 800204c:	40011000 	.word	0x40011000
 8002050:	40011400 	.word	0x40011400
 8002054:	40011800 	.word	0x40011800
 8002058:	40011c00 	.word	0x40011c00
 800205c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_GPIO_Init+0x324>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	43db      	mvns	r3, r3
 8002068:	4909      	ldr	r1, [pc, #36]	; (8002090 <HAL_GPIO_Init+0x324>)
 800206a:	4013      	ands	r3, r2
 800206c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	3301      	adds	r3, #1
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	fa22 f303 	lsr.w	r3, r2, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	f47f ae7e 	bne.w	8001d80 <HAL_GPIO_Init+0x14>
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	372c      	adds	r7, #44	; 0x2c
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020b0:	e003      	b.n	80020ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	041a      	lsls	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	611a      	str	r2, [r3, #16]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e26c      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8087 	beq.w	80021f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e4:	4b92      	ldr	r3, [pc, #584]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d00c      	beq.n	800210a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020f0:	4b8f      	ldr	r3, [pc, #572]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d112      	bne.n	8002122 <HAL_RCC_OscConfig+0x5e>
 80020fc:	4b8c      	ldr	r3, [pc, #560]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002108:	d10b      	bne.n	8002122 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210a:	4b89      	ldr	r3, [pc, #548]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d06c      	beq.n	80021f0 <HAL_RCC_OscConfig+0x12c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d168      	bne.n	80021f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e246      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x76>
 800212c:	4b80      	ldr	r3, [pc, #512]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a7f      	ldr	r2, [pc, #508]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	e02e      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x98>
 8002142:	4b7b      	ldr	r3, [pc, #492]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a7a      	ldr	r2, [pc, #488]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b78      	ldr	r3, [pc, #480]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a77      	ldr	r2, [pc, #476]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002154:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e01d      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0xbc>
 8002166:	4b72      	ldr	r3, [pc, #456]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a71      	ldr	r2, [pc, #452]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800216c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b6f      	ldr	r3, [pc, #444]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a6e      	ldr	r2, [pc, #440]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
 8002180:	4b6b      	ldr	r3, [pc, #428]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a6a      	ldr	r2, [pc, #424]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b68      	ldr	r3, [pc, #416]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a67      	ldr	r2, [pc, #412]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002196:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7fe ff96 	bl	80010d0 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe ff92 	bl	80010d0 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e1fa      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b5d      	ldr	r3, [pc, #372]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0xe4>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe ff82 	bl	80010d0 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe ff7e 	bl	80010d0 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1e6      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x10c>
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d063      	beq.n	80022c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021fe:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800220a:	4b49      	ldr	r3, [pc, #292]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b08      	cmp	r3, #8
 8002214:	d11c      	bne.n	8002250 <HAL_RCC_OscConfig+0x18c>
 8002216:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d116      	bne.n	8002250 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	4b43      	ldr	r3, [pc, #268]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_RCC_OscConfig+0x176>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e1ba      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4939      	ldr	r1, [pc, #228]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	e03a      	b.n	80022c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002258:	4b36      	ldr	r3, [pc, #216]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe ff37 	bl	80010d0 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002266:	f7fe ff33 	bl	80010d0 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e19b      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002278:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4927      	ldr	r1, [pc, #156]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]
 8002298:	e015      	b.n	80022c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229a:	4b26      	ldr	r3, [pc, #152]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7fe ff16 	bl	80010d0 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a8:	f7fe ff12 	bl	80010d0 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e17a      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d03a      	beq.n	8002348 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d019      	beq.n	800230e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_RCC_OscConfig+0x274>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7fe fef6 	bl	80010d0 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e8:	f7fe fef2 	bl	80010d0 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e15a      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002306:	2001      	movs	r0, #1
 8002308:	f000 faf4 	bl	80028f4 <RCC_Delay>
 800230c:	e01c      	b.n	8002348 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_RCC_OscConfig+0x274>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002314:	f7fe fedc 	bl	80010d0 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231a:	e00f      	b.n	800233c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231c:	f7fe fed8 	bl	80010d0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d908      	bls.n	800233c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e140      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	42420000 	.word	0x42420000
 8002338:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233c:	4b9e      	ldr	r3, [pc, #632]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1e9      	bne.n	800231c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a6 	beq.w	80024a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235a:	4b97      	ldr	r3, [pc, #604]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10d      	bne.n	8002382 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	4b94      	ldr	r3, [pc, #592]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	4a93      	ldr	r2, [pc, #588]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002370:	61d3      	str	r3, [r2, #28]
 8002372:	4b91      	ldr	r3, [pc, #580]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237e:	2301      	movs	r3, #1
 8002380:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002382:	4b8e      	ldr	r3, [pc, #568]	; (80025bc <HAL_RCC_OscConfig+0x4f8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238a:	2b00      	cmp	r3, #0
 800238c:	d118      	bne.n	80023c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238e:	4b8b      	ldr	r3, [pc, #556]	; (80025bc <HAL_RCC_OscConfig+0x4f8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a8a      	ldr	r2, [pc, #552]	; (80025bc <HAL_RCC_OscConfig+0x4f8>)
 8002394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239a:	f7fe fe99 	bl	80010d0 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a2:	f7fe fe95 	bl	80010d0 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b64      	cmp	r3, #100	; 0x64
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0fd      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	4b81      	ldr	r3, [pc, #516]	; (80025bc <HAL_RCC_OscConfig+0x4f8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d106      	bne.n	80023d6 <HAL_RCC_OscConfig+0x312>
 80023c8:	4b7b      	ldr	r3, [pc, #492]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a7a      	ldr	r2, [pc, #488]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	e02d      	b.n	8002432 <HAL_RCC_OscConfig+0x36e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x334>
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a75      	ldr	r2, [pc, #468]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	6213      	str	r3, [r2, #32]
 80023ea:	4b73      	ldr	r3, [pc, #460]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a72      	ldr	r2, [pc, #456]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	f023 0304 	bic.w	r3, r3, #4
 80023f4:	6213      	str	r3, [r2, #32]
 80023f6:	e01c      	b.n	8002432 <HAL_RCC_OscConfig+0x36e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b05      	cmp	r3, #5
 80023fe:	d10c      	bne.n	800241a <HAL_RCC_OscConfig+0x356>
 8002400:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a6c      	ldr	r2, [pc, #432]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a69      	ldr	r2, [pc, #420]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6213      	str	r3, [r2, #32]
 8002418:	e00b      	b.n	8002432 <HAL_RCC_OscConfig+0x36e>
 800241a:	4b67      	ldr	r3, [pc, #412]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a66      	ldr	r2, [pc, #408]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6213      	str	r3, [r2, #32]
 8002426:	4b64      	ldr	r3, [pc, #400]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a63      	ldr	r2, [pc, #396]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d015      	beq.n	8002466 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243a:	f7fe fe49 	bl	80010d0 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002440:	e00a      	b.n	8002458 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fe fe45 	bl	80010d0 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e0ab      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002458:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0ee      	beq.n	8002442 <HAL_RCC_OscConfig+0x37e>
 8002464:	e014      	b.n	8002490 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002466:	f7fe fe33 	bl	80010d0 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7fe fe2f 	bl	80010d0 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	; 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e095      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002484:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ee      	bne.n	800246e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d105      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002496:	4b48      	ldr	r3, [pc, #288]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4a47      	ldr	r2, [pc, #284]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8081 	beq.w	80025ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ac:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d061      	beq.n	800257c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d146      	bne.n	800254e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_RCC_OscConfig+0x4fc>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7fe fe03 	bl	80010d0 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ce:	f7fe fdff 	bl	80010d0 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e067      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e0:	4b35      	ldr	r3, [pc, #212]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f0      	bne.n	80024ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f4:	d108      	bne.n	8002508 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024f6:	4b30      	ldr	r3, [pc, #192]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	492d      	ldr	r1, [pc, #180]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a19      	ldr	r1, [r3, #32]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	430b      	orrs	r3, r1
 800251a:	4927      	ldr	r1, [pc, #156]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <HAL_RCC_OscConfig+0x4fc>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7fe fdd3 	bl	80010d0 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252e:	f7fe fdcf 	bl	80010d0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e037      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x46a>
 800254c:	e02f      	b.n	80025ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <HAL_RCC_OscConfig+0x4fc>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fe fdbc 	bl	80010d0 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255c:	f7fe fdb8 	bl	80010d0 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e020      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x498>
 800257a:	e018      	b.n	80025ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e013      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	429a      	cmp	r2, r3
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
 80025c0:	42420060 	.word	0x42420060

080025c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0d0      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b6a      	ldr	r3, [pc, #424]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d910      	bls.n	8002608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b67      	ldr	r3, [pc, #412]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 0207 	bic.w	r2, r3, #7
 80025ee:	4965      	ldr	r1, [pc, #404]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b63      	ldr	r3, [pc, #396]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0b8      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002620:	4b59      	ldr	r3, [pc, #356]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800262a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002638:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a52      	ldr	r2, [pc, #328]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002642:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002644:	4b50      	ldr	r3, [pc, #320]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	494d      	ldr	r1, [pc, #308]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d040      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d115      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e07f      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b41      	ldr	r3, [pc, #260]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e073      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e06b      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a2:	4b39      	ldr	r3, [pc, #228]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f023 0203 	bic.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4936      	ldr	r1, [pc, #216]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b4:	f7fe fd0c 	bl	80010d0 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026bc:	f7fe fd08 	bl	80010d0 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e053      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 020c 	and.w	r2, r3, #12
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1eb      	bne.n	80026bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d210      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 0207 	bic.w	r2, r3, #7
 80026fa:	4922      	ldr	r1, [pc, #136]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e032      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4916      	ldr	r1, [pc, #88]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	490e      	ldr	r1, [pc, #56]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002752:	f000 f821 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8002756:	4602      	mov	r2, r0
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	490a      	ldr	r1, [pc, #40]	; (800278c <HAL_RCC_ClockConfig+0x1c8>)
 8002764:	5ccb      	ldrb	r3, [r1, r3]
 8002766:	fa22 f303 	lsr.w	r3, r2, r3
 800276a:	4a09      	ldr	r2, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1cc>)
 800276c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1d0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fbd8 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40022000 	.word	0x40022000
 8002788:	40021000 	.word	0x40021000
 800278c:	08006488 	.word	0x08006488
 8002790:	20000144 	.word	0x20000144
 8002794:	20000148 	.word	0x20000148

08002798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002798:	b490      	push	{r4, r7}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800279e:	4b2a      	ldr	r3, [pc, #168]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027a0:	1d3c      	adds	r4, r7, #4
 80027a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027a8:	f240 2301 	movw	r3, #513	; 0x201
 80027ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x40>
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d003      	beq.n	80027de <HAL_RCC_GetSysClockFreq+0x46>
 80027d6:	e02d      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d8:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027da:	623b      	str	r3, [r7, #32]
      break;
 80027dc:	e02d      	b.n	800283a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	0c9b      	lsrs	r3, r3, #18
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027ea:	4413      	add	r3, r2
 80027ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	0c5b      	lsrs	r3, r3, #17
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800280a:	4413      	add	r3, r2
 800280c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002810:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002816:	fb02 f203 	mul.w	r2, r2, r3
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
 8002822:	e004      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	623b      	str	r3, [r7, #32]
      break;
 8002832:	e002      	b.n	800283a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002836:	623b      	str	r3, [r7, #32]
      break;
 8002838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283a:	6a3b      	ldr	r3, [r7, #32]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3728      	adds	r7, #40	; 0x28
 8002840:	46bd      	mov	sp, r7
 8002842:	bc90      	pop	{r4, r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	0800639c 	.word	0x0800639c
 800284c:	40021000 	.word	0x40021000
 8002850:	007a1200 	.word	0x007a1200
 8002854:	003d0900 	.word	0x003d0900

08002858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b02      	ldr	r3, [pc, #8]	; (8002868 <HAL_RCC_GetHCLKFreq+0x10>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000144 	.word	0x20000144

0800286c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002870:	f7ff fff2 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	0adb      	lsrs	r3, r3, #11
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4903      	ldr	r1, [pc, #12]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000
 8002890:	08006498 	.word	0x08006498

08002894 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	220f      	movs	r2, #15
 80028a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_RCC_GetClockConfig+0x58>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028b0:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <HAL_RCC_GetClockConfig+0x58>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_GetClockConfig+0x58>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_RCC_GetClockConfig+0x58>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	08db      	lsrs	r3, r3, #3
 80028ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_RCC_GetClockConfig+0x5c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0207 	and.w	r2, r3, #7
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40022000 	.word	0x40022000

080028f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <RCC_Delay+0x34>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <RCC_Delay+0x38>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0a5b      	lsrs	r3, r3, #9
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002910:	bf00      	nop
  }
  while (Delay --);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1e5a      	subs	r2, r3, #1
 8002916:	60fa      	str	r2, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f9      	bne.n	8002910 <RCC_Delay+0x1c>
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	20000144 	.word	0x20000144
 800292c:	10624dd3 	.word	0x10624dd3

08002930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e041      	b.n	80029c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f839 	bl	80029ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f000 f9c2 	bl	8002cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d001      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e044      	b.n	8002a82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <HAL_TIM_Base_Start_IT+0xac>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d018      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x6c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d013      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x6c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d00e      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x6c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_TIM_Base_Start_IT+0xb4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d009      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x6c>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a16      	ldr	r2, [pc, #88]	; (8002a98 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x6c>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a15      	ldr	r2, [pc, #84]	; (8002a9c <HAL_TIM_Base_Start_IT+0xbc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d111      	bne.n	8002a70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d010      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6e:	e007      	b.n	8002a80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40013400 	.word	0x40013400
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40000800 	.word	0x40000800
 8002a9c:	40000c00 	.word	0x40000c00

08002aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d122      	bne.n	8002afc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d11b      	bne.n	8002afc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0202 	mvn.w	r2, #2
 8002acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8ed 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 8002ae8:	e005      	b.n	8002af6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8e0 	bl	8002cb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f8ef 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d122      	bne.n	8002b50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d11b      	bne.n	8002b50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0204 	mvn.w	r2, #4
 8002b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2202      	movs	r2, #2
 8002b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f8c3 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 8002b3c:	e005      	b.n	8002b4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f8b6 	bl	8002cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f8c5 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d122      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d11b      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0208 	mvn.w	r2, #8
 8002b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2204      	movs	r2, #4
 8002b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f899 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 8002b90:	e005      	b.n	8002b9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f88c 	bl	8002cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f89b 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b10      	cmp	r3, #16
 8002bb0:	d122      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d11b      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0210 	mvn.w	r2, #16
 8002bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2208      	movs	r2, #8
 8002bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f86f 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 8002be4:	e005      	b.n	8002bf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f862 	bl	8002cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f871 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d10e      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d107      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0201 	mvn.w	r2, #1
 8002c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe f932 	bl	8000e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b80      	cmp	r3, #128	; 0x80
 8002c30:	d10e      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	2b80      	cmp	r3, #128	; 0x80
 8002c3e:	d107      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8d7 	bl	8002dfe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d10e      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c68:	2b40      	cmp	r3, #64	; 0x40
 8002c6a:	d107      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f835 	bl	8002ce6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d10e      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d107      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0220 	mvn.w	r2, #32
 8002ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8a2 	bl	8002dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a33      	ldr	r2, [pc, #204]	; (8002dd8 <TIM_Base_SetConfig+0xe0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d013      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a32      	ldr	r2, [pc, #200]	; (8002ddc <TIM_Base_SetConfig+0xe4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00f      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1e:	d00b      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <TIM_Base_SetConfig+0xe8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d007      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <TIM_Base_SetConfig+0xec>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d003      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a2d      	ldr	r2, [pc, #180]	; (8002de8 <TIM_Base_SetConfig+0xf0>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d108      	bne.n	8002d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a22      	ldr	r2, [pc, #136]	; (8002dd8 <TIM_Base_SetConfig+0xe0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <TIM_Base_SetConfig+0x82>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a21      	ldr	r2, [pc, #132]	; (8002ddc <TIM_Base_SetConfig+0xe4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00f      	beq.n	8002d7a <TIM_Base_SetConfig+0x82>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d00b      	beq.n	8002d7a <TIM_Base_SetConfig+0x82>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <TIM_Base_SetConfig+0xe8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <TIM_Base_SetConfig+0x82>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1d      	ldr	r2, [pc, #116]	; (8002de4 <TIM_Base_SetConfig+0xec>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d003      	beq.n	8002d7a <TIM_Base_SetConfig+0x82>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <TIM_Base_SetConfig+0xf0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d108      	bne.n	8002d8c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <TIM_Base_SetConfig+0xe0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d003      	beq.n	8002dc0 <TIM_Base_SetConfig+0xc8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <TIM_Base_SetConfig+0xe4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d103      	bne.n	8002dc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	615a      	str	r2, [r3, #20]
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	40012c00 	.word	0x40012c00
 8002ddc:	40013400 	.word	0x40013400
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40000800 	.word	0x40000800
 8002de8:	40000c00 	.word	0x40000c00

08002dec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e16:	f3ef 8305 	mrs	r3, IPSR
 8002e1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10f      	bne.n	8002e42 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e22:	f3ef 8310 	mrs	r3, PRIMASK
 8002e26:	607b      	str	r3, [r7, #4]
  return(result);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <osKernelInitialize+0x32>
 8002e2e:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <osKernelInitialize+0x60>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d109      	bne.n	8002e4a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e36:	f3ef 8311 	mrs	r3, BASEPRI
 8002e3a:	603b      	str	r3, [r7, #0]
  return(result);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002e42:	f06f 0305 	mvn.w	r3, #5
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e00c      	b.n	8002e64 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <osKernelInitialize+0x60>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <osKernelInitialize+0x60>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e002      	b.n	8002e64 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e64:	68fb      	ldr	r3, [r7, #12]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	200001d4 	.word	0x200001d4

08002e74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e7a:	f3ef 8305 	mrs	r3, IPSR
 8002e7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10f      	bne.n	8002ea6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e86:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8a:	607b      	str	r3, [r7, #4]
  return(result);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <osKernelStart+0x32>
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <osKernelStart+0x64>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d109      	bne.n	8002eae <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8002e9e:	603b      	str	r3, [r7, #0]
  return(result);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <osKernelStart+0x3a>
    stat = osErrorISR;
 8002ea6:	f06f 0305 	mvn.w	r3, #5
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e00e      	b.n	8002ecc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <osKernelStart+0x64>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d107      	bne.n	8002ec6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002eb6:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <osKernelStart+0x64>)
 8002eb8:	2202      	movs	r2, #2
 8002eba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002ebc:	f001 fb9e 	bl	80045fc <vTaskStartScheduler>
      stat = osOK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	e002      	b.n	8002ecc <osKernelStart+0x58>
    } else {
      stat = osError;
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200001d4 	.word	0x200001d4

08002edc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b092      	sub	sp, #72	; 0x48
 8002ee0:	af04      	add	r7, sp, #16
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eec:	f3ef 8305 	mrs	r3, IPSR
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f040 8094 	bne.w	8003022 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002efa:	f3ef 8310 	mrs	r3, PRIMASK
 8002efe:	623b      	str	r3, [r7, #32]
  return(result);
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 808d 	bne.w	8003022 <osThreadNew+0x146>
 8002f08:	4b48      	ldr	r3, [pc, #288]	; (800302c <osThreadNew+0x150>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d106      	bne.n	8002f1e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f10:	f3ef 8311 	mrs	r3, BASEPRI
 8002f14:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 8082 	bne.w	8003022 <osThreadNew+0x146>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d07e      	beq.n	8003022 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002f28:	2318      	movs	r3, #24
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002f30:	f107 031b 	add.w	r3, r7, #27
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d045      	beq.n	8002fce <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <osThreadNew+0x74>
        name = attr->name;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <osThreadNew+0x9a>
 8002f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f66:	2b38      	cmp	r3, #56	; 0x38
 8002f68:	d805      	bhi.n	8002f76 <osThreadNew+0x9a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <osThreadNew+0x9e>
        return (NULL);
 8002f76:	2300      	movs	r3, #0
 8002f78:	e054      	b.n	8003024 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00e      	beq.n	8002fb0 <osThreadNew+0xd4>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2bbb      	cmp	r3, #187	; 0xbb
 8002f98:	d90a      	bls.n	8002fb0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d006      	beq.n	8002fb0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <osThreadNew+0xd4>
        mem = 1;
 8002faa:	2301      	movs	r3, #1
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fae:	e010      	b.n	8002fd2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10c      	bne.n	8002fd2 <osThreadNew+0xf6>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d108      	bne.n	8002fd2 <osThreadNew+0xf6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d104      	bne.n	8002fd2 <osThreadNew+0xf6>
          mem = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fcc:	e001      	b.n	8002fd2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d110      	bne.n	8002ffa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fe0:	9202      	str	r2, [sp, #8]
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f001 f920 	bl	8004234 <xTaskCreateStatic>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	e013      	b.n	8003022 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d110      	bne.n	8003022 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	b29a      	uxth	r2, r3
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f001 f96a 	bl	80042ec <xTaskCreate>
 8003018:	4603      	mov	r3, r0
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <osThreadNew+0x146>
          hTask = NULL;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003022:	697b      	ldr	r3, [r7, #20]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3738      	adds	r7, #56	; 0x38
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	200001d4 	.word	0x200001d4

08003030 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003038:	f3ef 8305 	mrs	r3, IPSR
 800303c:	613b      	str	r3, [r7, #16]
  return(result);
 800303e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10f      	bne.n	8003064 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003044:	f3ef 8310 	mrs	r3, PRIMASK
 8003048:	60fb      	str	r3, [r7, #12]
  return(result);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d109      	bne.n	8003064 <osDelay+0x34>
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <osDelay+0x58>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d109      	bne.n	800306c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003058:	f3ef 8311 	mrs	r3, BASEPRI
 800305c:	60bb      	str	r3, [r7, #8]
  return(result);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <osDelay+0x3c>
    stat = osErrorISR;
 8003064:	f06f 0305 	mvn.w	r3, #5
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	e007      	b.n	800307c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f001 fa8c 	bl	8004594 <vTaskDelay>
    }
  }

  return (stat);
 800307c:	697b      	ldr	r3, [r7, #20]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	200001d4 	.word	0x200001d4

0800308c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003094:	2300      	movs	r3, #0
 8003096:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003098:	f3ef 8305 	mrs	r3, IPSR
 800309c:	617b      	str	r3, [r7, #20]
  return(result);
 800309e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d13d      	bne.n	8003120 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a4:	f3ef 8310 	mrs	r3, PRIMASK
 80030a8:	613b      	str	r3, [r7, #16]
  return(result);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d137      	bne.n	8003120 <osEventFlagsNew+0x94>
 80030b0:	4b1e      	ldr	r3, [pc, #120]	; (800312c <osEventFlagsNew+0xa0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d105      	bne.n	80030c4 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030b8:	f3ef 8311 	mrs	r3, BASEPRI
 80030bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d12d      	bne.n	8003120 <osEventFlagsNew+0x94>
    mem = -1;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
 80030c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d015      	beq.n	80030fc <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <osEventFlagsNew+0x5a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2b1f      	cmp	r3, #31
 80030de:	d902      	bls.n	80030e6 <osEventFlagsNew+0x5a>
        mem = 1;
 80030e0:	2301      	movs	r3, #1
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	e00c      	b.n	8003100 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <osEventFlagsNew+0x74>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <osEventFlagsNew+0x74>
          mem = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	e001      	b.n	8003100 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d106      	bne.n	8003114 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f910 	bl	8003330 <xEventGroupCreateStatic>
 8003110:	61f8      	str	r0, [r7, #28]
 8003112:	e005      	b.n	8003120 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d102      	bne.n	8003120 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800311a:	f000 f940 	bl	800339e <xEventGroupCreate>
 800311e:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003120:	69fb      	ldr	r3, [r7, #28]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	200001d4 	.word	0x200001d4

08003130 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d004      	beq.n	800314e <osEventFlagsSet+0x1e>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800314e:	f06f 0303 	mvn.w	r3, #3
 8003152:	61fb      	str	r3, [r7, #28]
 8003154:	e03a      	b.n	80031cc <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003156:	f3ef 8305 	mrs	r3, IPSR
 800315a:	617b      	str	r3, [r7, #20]
  return(result);
 800315c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10f      	bne.n	8003182 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003162:	f3ef 8310 	mrs	r3, PRIMASK
 8003166:	613b      	str	r3, [r7, #16]
  return(result);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <osEventFlagsSet+0x52>
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <osEventFlagsSet+0xa8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d123      	bne.n	80031be <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003176:	f3ef 8311 	mrs	r3, BASEPRI
 800317a:	60fb      	str	r3, [r7, #12]
  return(result);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01d      	beq.n	80031be <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	461a      	mov	r2, r3
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	69b8      	ldr	r0, [r7, #24]
 8003190:	f000 faa8 	bl	80036e4 <xEventGroupSetBitsFromISR>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800319a:	f06f 0302 	mvn.w	r3, #2
 800319e:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80031a0:	e013      	b.n	80031ca <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00e      	beq.n	80031ca <osEventFlagsSet+0x9a>
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <osEventFlagsSet+0xac>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80031bc:	e005      	b.n	80031ca <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80031be:	6839      	ldr	r1, [r7, #0]
 80031c0:	69b8      	ldr	r0, [r7, #24]
 80031c2:	f000 f9d5 	bl	8003570 <xEventGroupSetBits>
 80031c6:	61f8      	str	r0, [r7, #28]
 80031c8:	e000      	b.n	80031cc <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80031ca:	bf00      	nop
  }

  return (rflags);
 80031cc:	69fb      	ldr	r3, [r7, #28]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	200001d4 	.word	0x200001d4
 80031dc:	e000ed04 	.word	0xe000ed04

080031e0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08e      	sub	sp, #56	; 0x38
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d004      	beq.n	8003202 <osEventFlagsWait+0x22>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8003202:	f06f 0303 	mvn.w	r3, #3
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
 8003208:	e059      	b.n	80032be <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800320a:	f3ef 8305 	mrs	r3, IPSR
 800320e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003210:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003216:	f3ef 8310 	mrs	r3, PRIMASK
 800321a:	61bb      	str	r3, [r7, #24]
  return(result);
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <osEventFlagsWait+0x56>
 8003222:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <osEventFlagsWait+0xe8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d109      	bne.n	800323e <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800322a:	f3ef 8311 	mrs	r3, BASEPRI
 800322e:	617b      	str	r3, [r7, #20]
  return(result);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8003236:	f06f 0305 	mvn.w	r3, #5
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
 800323c:	e03f      	b.n	80032be <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8003248:	2301      	movs	r3, #1
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324c:	e001      	b.n	8003252 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 800324e:	2300      	movs	r3, #0
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 800325c:	2300      	movs	r3, #0
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003260:	e001      	b.n	8003266 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8003262:	2301      	movs	r3, #1
 8003264:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	6a38      	ldr	r0, [r7, #32]
 8003272:	f000 f8af 	bl	80033d4 <xEventGroupWaitBits>
 8003276:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00e      	beq.n	80032a0 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	429a      	cmp	r2, r3
 8003288:	d019      	beq.n	80032be <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8003290:	f06f 0301 	mvn.w	r3, #1
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	e012      	b.n	80032be <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003298:	f06f 0302 	mvn.w	r3, #2
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
 800329e:	e00e      	b.n	80032be <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80032b0:	f06f 0301 	mvn.w	r3, #1
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
 80032b6:	e002      	b.n	80032be <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80032b8:	f06f 0302 	mvn.w	r3, #2
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3730      	adds	r7, #48	; 0x30
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	200001d4 	.word	0x200001d4

080032cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <vApplicationGetIdleTaskMemory+0x28>)
 80032dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4a05      	ldr	r2, [pc, #20]	; (80032f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80032e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2280      	movs	r2, #128	; 0x80
 80032e8:	601a      	str	r2, [r3, #0]
}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	200001d8 	.word	0x200001d8
 80032f8:	20000294 	.word	0x20000294

080032fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a07      	ldr	r2, [pc, #28]	; (8003328 <vApplicationGetTimerTaskMemory+0x2c>)
 800330c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4a06      	ldr	r2, [pc, #24]	; (800332c <vApplicationGetTimerTaskMemory+0x30>)
 8003312:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800331a:	601a      	str	r2, [r3, #0]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000494 	.word	0x20000494
 800332c:	20000550 	.word	0x20000550

08003330 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003350:	bf00      	nop
 8003352:	e7fe      	b.n	8003352 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003354:	2320      	movs	r3, #32
 8003356:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b20      	cmp	r3, #32
 800335c:	d00a      	beq.n	8003374 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	60fb      	str	r3, [r7, #12]
}
 8003370:	bf00      	nop
 8003372:	e7fe      	b.n	8003372 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	3304      	adds	r3, #4
 8003388:	4618      	mov	r0, r3
 800338a:	f000 f9bf 	bl	800370c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2201      	movs	r2, #1
 8003392:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8003394:	697b      	ldr	r3, [r7, #20]
	}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80033a4:	2020      	movs	r0, #32
 80033a6:	f002 fc41 	bl	8005c2c <pvPortMalloc>
 80033aa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 f9a5 	bl	800370c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80033c8:	687b      	ldr	r3, [r7, #4]
	}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b090      	sub	sp, #64	; 0x40
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <xEventGroupWaitBits+0x36>
	__asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	623b      	str	r3, [r7, #32]
}
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <xEventGroupWaitBits+0x56>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	61fb      	str	r3, [r7, #28]
}
 8003426:	bf00      	nop
 8003428:	e7fe      	b.n	8003428 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <xEventGroupWaitBits+0x72>
	__asm volatile
 8003430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003434:	f383 8811 	msr	BASEPRI, r3
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	61bb      	str	r3, [r7, #24]
}
 8003442:	bf00      	nop
 8003444:	e7fe      	b.n	8003444 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003446:	f001 fdd9 	bl	8004ffc <xTaskGetSchedulerState>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d102      	bne.n	8003456 <xEventGroupWaitBits+0x82>
 8003450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <xEventGroupWaitBits+0x86>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <xEventGroupWaitBits+0x88>
 800345a:	2300      	movs	r3, #0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	617b      	str	r3, [r7, #20]
}
 8003472:	bf00      	nop
 8003474:	e7fe      	b.n	8003474 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8003476:	f001 f931 	bl	80046dc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003486:	f000 f90b 	bl	80036a0 <prvTestWaitCondition>
 800348a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00e      	beq.n	80034b0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003496:	2300      	movs	r3, #0
 8003498:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d028      	beq.n	80034f2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80034a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	401a      	ands	r2, r3
 80034aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e020      	b.n	80034f2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80034b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d104      	bne.n	80034c0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80034ba:	2301      	movs	r3, #1
 80034bc:	633b      	str	r3, [r7, #48]	; 0x30
 80034be:	e018      	b.n	80034f2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034cc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034da:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80034dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034de:	1d18      	adds	r0, r3, #4
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	4313      	orrs	r3, r2
 80034e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034e8:	4619      	mov	r1, r3
 80034ea:	f001 faf7 	bl	8004adc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80034f2:	f001 f901 	bl	80046f8 <xTaskResumeAll>
 80034f6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80034f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d031      	beq.n	8003562 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	2b00      	cmp	r3, #0
 8003502:	d107      	bne.n	8003514 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <xEventGroupWaitBits+0x198>)
 8003506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003514:	f001 fdfe 	bl	8005114 <uxTaskResetEventItemValue>
 8003518:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800351a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d11a      	bne.n	800355a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8003524:	f002 fa82 	bl	8005a2c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003534:	f000 f8b4 	bl	80036a0 <prvTestWaitCondition>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	43db      	mvns	r3, r3
 800354c:	401a      	ands	r2, r3
 800354e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003550:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003552:	2301      	movs	r3, #1
 8003554:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8003556:	f002 fa99 	bl	8005a8c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003560:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003564:	4618      	mov	r0, r3
 8003566:	3740      	adds	r7, #64	; 0x40
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	e000ed04 	.word	0xe000ed04

08003570 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08e      	sub	sp, #56	; 0x38
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800357a:	2300      	movs	r3, #0
 800357c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8003582:	2300      	movs	r3, #0
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <xEventGroupSetBits+0x32>
	__asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	613b      	str	r3, [r7, #16]
}
 800359e:	bf00      	nop
 80035a0:	e7fe      	b.n	80035a0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <xEventGroupSetBits+0x52>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	60fb      	str	r3, [r7, #12]
}
 80035be:	bf00      	nop
 80035c0:	e7fe      	b.n	80035c0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	3304      	adds	r3, #4
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	3308      	adds	r3, #8
 80035cc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80035ce:	f001 f885 	bl	80046dc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80035d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	431a      	orrs	r2, r3
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80035e4:	e03c      	b.n	8003660 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80035e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80035fc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003604:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d108      	bne.n	8003622 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00b      	beq.n	8003634 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800361c:	2301      	movs	r3, #1
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003620:	e008      	b.n	8003634 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	429a      	cmp	r2, r3
 800362e:	d101      	bne.n	8003634 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003630:	2301      	movs	r3, #1
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d010      	beq.n	800365c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003654:	4619      	mov	r1, r3
 8003656:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003658:	f001 fb0c 	bl	8004c74 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8003660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	429a      	cmp	r2, r3
 8003666:	d1be      	bne.n	80035e6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	43db      	mvns	r3, r3
 8003670:	401a      	ands	r2, r3
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8003676:	f001 f83f 	bl	80046f8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	681b      	ldr	r3, [r3, #0]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3738      	adds	r7, #56	; 0x38
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8003690:	6839      	ldr	r1, [r7, #0]
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ff6c 	bl	8003570 <xEventGroupSetBits>
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d107      	bne.n	80036c6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e007      	b.n	80036d6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d101      	bne.n	80036d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80036d2:	2301      	movs	r3, #1
 80036d4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80036d6:	697b      	ldr	r3, [r7, #20]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
	...

080036e4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	68f9      	ldr	r1, [r7, #12]
 80036f6:	4804      	ldr	r0, [pc, #16]	; (8003708 <xEventGroupSetBitsFromISR+0x24>)
 80036f8:	f002 f88a 	bl	8005810 <xTimerPendFunctionCallFromISR>
 80036fc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80036fe:	697b      	ldr	r3, [r7, #20]
	}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	08003687 	.word	0x08003687

0800370c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f103 0208 	add.w	r2, r3, #8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f04f 32ff 	mov.w	r2, #4294967295
 8003724:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f103 0208 	add.w	r2, r3, #8
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f103 0208 	add.w	r2, r3, #8
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr

0800374a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr

08003762 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d103      	bne.n	80037c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e00c      	b.n	80037e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3308      	adds	r3, #8
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e002      	b.n	80037d6 <vListInsert+0x2e>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d2f6      	bcs.n	80037d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	601a      	str	r2, [r3, #0]
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6892      	ldr	r2, [r2, #8]
 800382e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6852      	ldr	r2, [r2, #4]
 8003838:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	d103      	bne.n	800384c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	1e5a      	subs	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr
	...

0800386c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <xQueueGenericReset+0x2a>
	__asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	60bb      	str	r3, [r7, #8]
}
 8003892:	bf00      	nop
 8003894:	e7fe      	b.n	8003894 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003896:	f002 f8c9 	bl	8005a2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	68f9      	ldr	r1, [r7, #12]
 80038a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	441a      	add	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	3b01      	subs	r3, #1
 80038c8:	68f9      	ldr	r1, [r7, #12]
 80038ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	441a      	add	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	22ff      	movs	r2, #255	; 0xff
 80038da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	22ff      	movs	r2, #255	; 0xff
 80038e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d114      	bne.n	8003916 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01a      	beq.n	800392a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3310      	adds	r3, #16
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 f957 	bl	8004bac <xTaskRemoveFromEventList>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d012      	beq.n	800392a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <xQueueGenericReset+0xcc>)
 8003906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	e009      	b.n	800392a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3310      	adds	r3, #16
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff fef6 	bl	800370c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3324      	adds	r3, #36	; 0x24
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fef1 	bl	800370c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800392a:	f002 f8af 	bl	8005a8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800392e:	2301      	movs	r3, #1
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	e000ed04 	.word	0xe000ed04

0800393c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08e      	sub	sp, #56	; 0x38
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800397e:	bf00      	nop
 8003980:	e7fe      	b.n	8003980 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <xQueueGenericCreateStatic+0x52>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <xQueueGenericCreateStatic+0x56>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <xQueueGenericCreateStatic+0x58>
 8003992:	2300      	movs	r3, #0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	623b      	str	r3, [r7, #32]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <xQueueGenericCreateStatic+0x7e>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <xQueueGenericCreateStatic+0x82>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <xQueueGenericCreateStatic+0x84>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	61fb      	str	r3, [r7, #28]
}
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039da:	2350      	movs	r3, #80	; 0x50
 80039dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b50      	cmp	r3, #80	; 0x50
 80039e2:	d00a      	beq.n	80039fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	61bb      	str	r3, [r7, #24]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00d      	beq.n	8003a20 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a0c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f805 	bl	8003a2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3730      	adds	r7, #48	; 0x30
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	e002      	b.n	8003a4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a58:	2101      	movs	r1, #1
 8003a5a:	69b8      	ldr	r0, [r7, #24]
 8003a5c:	f7ff ff06 	bl	800386c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08e      	sub	sp, #56	; 0x38
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <xQueueGenericSend+0x32>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <xQueueGenericSend+0x40>
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <xQueueGenericSend+0x44>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <xQueueGenericSend+0x46>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <xQueueGenericSend+0x60>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003acc:	bf00      	nop
 8003ace:	e7fe      	b.n	8003ace <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d103      	bne.n	8003ade <xQueueGenericSend+0x6e>
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <xQueueGenericSend+0x72>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <xQueueGenericSend+0x74>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <xQueueGenericSend+0x8e>
	__asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	623b      	str	r3, [r7, #32]
}
 8003afa:	bf00      	nop
 8003afc:	e7fe      	b.n	8003afc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003afe:	f001 fa7d 	bl	8004ffc <xTaskGetSchedulerState>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <xQueueGenericSend+0x9e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <xQueueGenericSend+0xa2>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <xQueueGenericSend+0xa4>
 8003b12:	2300      	movs	r3, #0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <xQueueGenericSend+0xbe>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	61fb      	str	r3, [r7, #28]
}
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b2e:	f001 ff7d 	bl	8005a2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d302      	bcc.n	8003b44 <xQueueGenericSend+0xd4>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d129      	bne.n	8003b98 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b4a:	f000 fa07 	bl	8003f5c <prvCopyDataToQueue>
 8003b4e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	3324      	adds	r3, #36	; 0x24
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 f825 	bl	8004bac <xTaskRemoveFromEventList>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d013      	beq.n	8003b90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b68:	4b3f      	ldr	r3, [pc, #252]	; (8003c68 <xQueueGenericSend+0x1f8>)
 8003b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	e00a      	b.n	8003b90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d007      	beq.n	8003b90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b80:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <xQueueGenericSend+0x1f8>)
 8003b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b90:	f001 ff7c 	bl	8005a8c <vPortExitCritical>
				return pdPASS;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e063      	b.n	8003c60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b9e:	f001 ff75 	bl	8005a8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e05c      	b.n	8003c60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 f8c1 	bl	8004d38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bba:	f001 ff67 	bl	8005a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bbe:	f000 fd8d 	bl	80046dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bc2:	f001 ff33 	bl	8005a2c <vPortEnterCritical>
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bcc:	b25b      	sxtb	r3, r3
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d103      	bne.n	8003bdc <xQueueGenericSend+0x16c>
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003be2:	b25b      	sxtb	r3, r3
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d103      	bne.n	8003bf2 <xQueueGenericSend+0x182>
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf2:	f001 ff4b 	bl	8005a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bf6:	1d3a      	adds	r2, r7, #4
 8003bf8:	f107 0314 	add.w	r3, r7, #20
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 f8b0 	bl	8004d64 <xTaskCheckForTimeOut>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d124      	bne.n	8003c54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c0c:	f000 fa9e 	bl	800414c <prvIsQueueFull>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d018      	beq.n	8003c48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	3310      	adds	r3, #16
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 ff38 	bl	8004a94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c26:	f000 fa29 	bl	800407c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c2a:	f000 fd65 	bl	80046f8 <xTaskResumeAll>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f47f af7c 	bne.w	8003b2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c36:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <xQueueGenericSend+0x1f8>)
 8003c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	e772      	b.n	8003b2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c4a:	f000 fa17 	bl	800407c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c4e:	f000 fd53 	bl	80046f8 <xTaskResumeAll>
 8003c52:	e76c      	b.n	8003b2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c56:	f000 fa11 	bl	800407c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c5a:	f000 fd4d 	bl	80046f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c5e:	2300      	movs	r3, #0
		}
	}
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3738      	adds	r7, #56	; 0x38
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	e000ed04 	.word	0xe000ed04

08003c6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08e      	sub	sp, #56	; 0x38
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <xQueueGenericSendFromISR+0x3c>
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <xQueueGenericSendFromISR+0x40>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <xQueueGenericSendFromISR+0x42>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	623b      	str	r3, [r7, #32]
}
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d103      	bne.n	8003cd6 <xQueueGenericSendFromISR+0x6a>
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <xQueueGenericSendFromISR+0x6e>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <xQueueGenericSendFromISR+0x70>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	61fb      	str	r3, [r7, #28]
}
 8003cf2:	bf00      	nop
 8003cf4:	e7fe      	b.n	8003cf4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cf6:	f001 ff5b 	bl	8005bb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cfa:	f3ef 8211 	mrs	r2, BASEPRI
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	61ba      	str	r2, [r7, #24]
 8003d10:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d12:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d302      	bcc.n	8003d28 <xQueueGenericSendFromISR+0xbc>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d12c      	bne.n	8003d82 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d38:	f000 f910 	bl	8003f5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d3c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d112      	bne.n	8003d6c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	3324      	adds	r3, #36	; 0x24
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 ff2a 	bl	8004bac <xTaskRemoveFromEventList>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00e      	beq.n	8003d7c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e007      	b.n	8003d7c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d70:	3301      	adds	r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	b25a      	sxtb	r2, r3
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003d80:	e001      	b.n	8003d86 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3738      	adds	r7, #56	; 0x38
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08c      	sub	sp, #48	; 0x30
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <xQueueReceive+0x30>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	623b      	str	r3, [r7, #32]
}
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <xQueueReceive+0x3e>
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <xQueueReceive+0x42>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <xQueueReceive+0x44>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <xQueueReceive+0x5e>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	61fb      	str	r3, [r7, #28]
}
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dfa:	f001 f8ff 	bl	8004ffc <xTaskGetSchedulerState>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <xQueueReceive+0x6e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <xQueueReceive+0x72>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <xQueueReceive+0x74>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <xQueueReceive+0x8e>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	61bb      	str	r3, [r7, #24]
}
 8003e26:	bf00      	nop
 8003e28:	e7fe      	b.n	8003e28 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e2a:	f001 fdff 	bl	8005a2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01f      	beq.n	8003e7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e3e:	f000 f8f7 	bl	8004030 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	1e5a      	subs	r2, r3, #1
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00f      	beq.n	8003e72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	3310      	adds	r3, #16
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fea8 	bl	8004bac <xTaskRemoveFromEventList>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e62:	4b3d      	ldr	r3, [pc, #244]	; (8003f58 <xQueueReceive+0x1bc>)
 8003e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e72:	f001 fe0b 	bl	8005a8c <vPortExitCritical>
				return pdPASS;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e069      	b.n	8003f4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e80:	f001 fe04 	bl	8005a8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e062      	b.n	8003f4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e8e:	f107 0310 	add.w	r3, r7, #16
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 ff50 	bl	8004d38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e9c:	f001 fdf6 	bl	8005a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ea0:	f000 fc1c 	bl	80046dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ea4:	f001 fdc2 	bl	8005a2c <vPortEnterCritical>
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eae:	b25b      	sxtb	r3, r3
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d103      	bne.n	8003ebe <xQueueReceive+0x122>
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ec4:	b25b      	sxtb	r3, r3
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d103      	bne.n	8003ed4 <xQueueReceive+0x138>
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ed4:	f001 fdda 	bl	8005a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ed8:	1d3a      	adds	r2, r7, #4
 8003eda:	f107 0310 	add.w	r3, r7, #16
 8003ede:	4611      	mov	r1, r2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 ff3f 	bl	8004d64 <xTaskCheckForTimeOut>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d123      	bne.n	8003f34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eee:	f000 f917 	bl	8004120 <prvIsQueueEmpty>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d017      	beq.n	8003f28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	3324      	adds	r3, #36	; 0x24
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fdc7 	bl	8004a94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f08:	f000 f8b8 	bl	800407c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f0c:	f000 fbf4 	bl	80046f8 <xTaskResumeAll>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d189      	bne.n	8003e2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <xQueueReceive+0x1bc>)
 8003f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	e780      	b.n	8003e2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f2a:	f000 f8a7 	bl	800407c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f2e:	f000 fbe3 	bl	80046f8 <xTaskResumeAll>
 8003f32:	e77a      	b.n	8003e2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f36:	f000 f8a1 	bl	800407c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f3a:	f000 fbdd 	bl	80046f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f40:	f000 f8ee 	bl	8004120 <prvIsQueueEmpty>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f43f af6f 	beq.w	8003e2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3730      	adds	r7, #48	; 0x30
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10d      	bne.n	8003f96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d14d      	bne.n	800401e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 f856 	bl	8005038 <xTaskPriorityDisinherit>
 8003f8c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	605a      	str	r2, [r3, #4]
 8003f94:	e043      	b.n	800401e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d119      	bne.n	8003fd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6898      	ldr	r0, [r3, #8]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	f002 f83e 	bl	8006028 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	441a      	add	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d32b      	bcc.n	800401e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	609a      	str	r2, [r3, #8]
 8003fce:	e026      	b.n	800401e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68d8      	ldr	r0, [r3, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	f002 f824 	bl	8006028 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	425b      	negs	r3, r3
 8003fea:	441a      	add	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d207      	bcs.n	800400c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	425b      	negs	r3, r3
 8004006:	441a      	add	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d105      	bne.n	800401e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	3b01      	subs	r3, #1
 800401c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004026:	697b      	ldr	r3, [r7, #20]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d018      	beq.n	8004074 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	441a      	add	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	429a      	cmp	r2, r3
 800405a:	d303      	bcc.n	8004064 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68d9      	ldr	r1, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	461a      	mov	r2, r3
 800406e:	6838      	ldr	r0, [r7, #0]
 8004070:	f001 ffda 	bl	8006028 <memcpy>
	}
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004084:	f001 fcd2 	bl	8005a2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800408e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004090:	e011      	b.n	80040b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	d012      	beq.n	80040c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3324      	adds	r3, #36	; 0x24
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fd84 	bl	8004bac <xTaskRemoveFromEventList>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040aa:	f000 febd 	bl	8004e28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	dce9      	bgt.n	8004092 <prvUnlockQueue+0x16>
 80040be:	e000      	b.n	80040c2 <prvUnlockQueue+0x46>
					break;
 80040c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	22ff      	movs	r2, #255	; 0xff
 80040c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040ca:	f001 fcdf 	bl	8005a8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040ce:	f001 fcad 	bl	8005a2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040da:	e011      	b.n	8004100 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d012      	beq.n	800410a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3310      	adds	r3, #16
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fd5f 	bl	8004bac <xTaskRemoveFromEventList>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040f4:	f000 fe98 	bl	8004e28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040f8:	7bbb      	ldrb	r3, [r7, #14]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004104:	2b00      	cmp	r3, #0
 8004106:	dce9      	bgt.n	80040dc <prvUnlockQueue+0x60>
 8004108:	e000      	b.n	800410c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800410a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	22ff      	movs	r2, #255	; 0xff
 8004110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004114:	f001 fcba 	bl	8005a8c <vPortExitCritical>
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004128:	f001 fc80 	bl	8005a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e001      	b.n	800413e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800413e:	f001 fca5 	bl	8005a8c <vPortExitCritical>

	return xReturn;
 8004142:	68fb      	ldr	r3, [r7, #12]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004154:	f001 fc6a 	bl	8005a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004160:	429a      	cmp	r2, r3
 8004162:	d102      	bne.n	800416a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004164:	2301      	movs	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e001      	b.n	800416e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800416e:	f001 fc8d 	bl	8005a8c <vPortExitCritical>

	return xReturn;
 8004172:	68fb      	ldr	r3, [r7, #12]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	e014      	b.n	80041b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800418c:	4a0e      	ldr	r2, [pc, #56]	; (80041c8 <vQueueAddToRegistry+0x4c>)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10b      	bne.n	80041b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004198:	490b      	ldr	r1, [pc, #44]	; (80041c8 <vQueueAddToRegistry+0x4c>)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041a2:	4a09      	ldr	r2, [pc, #36]	; (80041c8 <vQueueAddToRegistry+0x4c>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041ae:	e006      	b.n	80041be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3301      	adds	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b07      	cmp	r3, #7
 80041ba:	d9e7      	bls.n	800418c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	20001ca0 	.word	0x20001ca0

080041cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041dc:	f001 fc26 	bl	8005a2c <vPortEnterCritical>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041e6:	b25b      	sxtb	r3, r3
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d103      	bne.n	80041f6 <vQueueWaitForMessageRestricted+0x2a>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041fc:	b25b      	sxtb	r3, r3
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004202:	d103      	bne.n	800420c <vQueueWaitForMessageRestricted+0x40>
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800420c:	f001 fc3e 	bl	8005a8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	2b00      	cmp	r3, #0
 8004216:	d106      	bne.n	8004226 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	3324      	adds	r3, #36	; 0x24
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fc97 	bl	8004b54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004226:	6978      	ldr	r0, [r7, #20]
 8004228:	f7ff ff28 	bl	800407c <prvUnlockQueue>
	}
 800422c:	bf00      	nop
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08e      	sub	sp, #56	; 0x38
 8004238:	af04      	add	r7, sp, #16
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	623b      	str	r3, [r7, #32]
}
 800425a:	bf00      	nop
 800425c:	e7fe      	b.n	800425c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <xTaskCreateStatic+0x46>
	__asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	61fb      	str	r3, [r7, #28]
}
 8004276:	bf00      	nop
 8004278:	e7fe      	b.n	8004278 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800427a:	23bc      	movs	r3, #188	; 0xbc
 800427c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2bbc      	cmp	r3, #188	; 0xbc
 8004282:	d00a      	beq.n	800429a <xTaskCreateStatic+0x66>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	61bb      	str	r3, [r7, #24]
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01e      	beq.n	80042de <xTaskCreateStatic+0xaa>
 80042a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01b      	beq.n	80042de <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042b8:	2300      	movs	r3, #0
 80042ba:	9303      	str	r3, [sp, #12]
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	9302      	str	r3, [sp, #8]
 80042c0:	f107 0314 	add.w	r3, r7, #20
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f851 	bl	8004378 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042d8:	f000 f8ec 	bl	80044b4 <prvAddNewTaskToReadyList>
 80042dc:	e001      	b.n	80042e2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042e2:	697b      	ldr	r3, [r7, #20]
	}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3728      	adds	r7, #40	; 0x28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08c      	sub	sp, #48	; 0x30
 80042f0:	af04      	add	r7, sp, #16
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4618      	mov	r0, r3
 8004302:	f001 fc93 	bl	8005c2c <pvPortMalloc>
 8004306:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00e      	beq.n	800432c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800430e:	20bc      	movs	r0, #188	; 0xbc
 8004310:	f001 fc8c 	bl	8005c2c <pvPortMalloc>
 8004314:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
 8004322:	e005      	b.n	8004330 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004324:	6978      	ldr	r0, [r7, #20]
 8004326:	f001 fd45 	bl	8005db4 <vPortFree>
 800432a:	e001      	b.n	8004330 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d017      	beq.n	8004366 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800433e:	88fa      	ldrh	r2, [r7, #6]
 8004340:	2300      	movs	r3, #0
 8004342:	9303      	str	r3, [sp, #12]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	9302      	str	r3, [sp, #8]
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	9301      	str	r3, [sp, #4]
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f80f 	bl	8004378 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800435a:	69f8      	ldr	r0, [r7, #28]
 800435c:	f000 f8aa 	bl	80044b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004360:	2301      	movs	r3, #1
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	e002      	b.n	800436c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004366:	f04f 33ff 	mov.w	r3, #4294967295
 800436a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800436c:	69bb      	ldr	r3, [r7, #24]
	}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	461a      	mov	r2, r3
 8004390:	21a5      	movs	r1, #165	; 0xa5
 8004392:	f001 fe57 	bl	8006044 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043a0:	3b01      	subs	r3, #1
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f023 0307 	bic.w	r3, r3, #7
 80043ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	617b      	str	r3, [r7, #20]
}
 80043cc:	bf00      	nop
 80043ce:	e7fe      	b.n	80043ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	e012      	b.n	80043fc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	4413      	add	r3, r2
 80043dc:	7819      	ldrb	r1, [r3, #0]
 80043de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	4413      	add	r3, r2
 80043e4:	3334      	adds	r3, #52	; 0x34
 80043e6:	460a      	mov	r2, r1
 80043e8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d006      	beq.n	8004404 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3301      	adds	r3, #1
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	2b0f      	cmp	r3, #15
 8004400:	d9e9      	bls.n	80043d6 <prvInitialiseNewTask+0x5e>
 8004402:	e000      	b.n	8004406 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004404:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	2b37      	cmp	r3, #55	; 0x37
 8004412:	d901      	bls.n	8004418 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004414:	2337      	movs	r3, #55	; 0x37
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800441c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004422:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	2200      	movs	r2, #0
 8004428:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	3304      	adds	r3, #4
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff f98b 	bl	800374a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	3318      	adds	r3, #24
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff f986 	bl	800374a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004442:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004452:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	2200      	movs	r2, #0
 8004458:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	2200      	movs	r2, #0
 8004460:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	3354      	adds	r3, #84	; 0x54
 8004468:	2260      	movs	r2, #96	; 0x60
 800446a:	2100      	movs	r1, #0
 800446c:	4618      	mov	r0, r3
 800446e:	f001 fde9 	bl	8006044 <memset>
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	4a0c      	ldr	r2, [pc, #48]	; (80044a8 <prvInitialiseNewTask+0x130>)
 8004476:	659a      	str	r2, [r3, #88]	; 0x58
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	4a0c      	ldr	r2, [pc, #48]	; (80044ac <prvInitialiseNewTask+0x134>)
 800447c:	65da      	str	r2, [r3, #92]	; 0x5c
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	4a0b      	ldr	r2, [pc, #44]	; (80044b0 <prvInitialiseNewTask+0x138>)
 8004482:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	69b8      	ldr	r0, [r7, #24]
 800448a:	f001 f9e1 	bl	8005850 <pxPortInitialiseStack>
 800448e:	4602      	mov	r2, r0
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044a0:	bf00      	nop
 80044a2:	3720      	adds	r7, #32
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	080064c0 	.word	0x080064c0
 80044ac:	080064e0 	.word	0x080064e0
 80044b0:	080064a0 	.word	0x080064a0

080044b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044bc:	f001 fab6 	bl	8005a2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044c0:	4b2d      	ldr	r3, [pc, #180]	; (8004578 <prvAddNewTaskToReadyList+0xc4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3301      	adds	r3, #1
 80044c6:	4a2c      	ldr	r2, [pc, #176]	; (8004578 <prvAddNewTaskToReadyList+0xc4>)
 80044c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044ca:	4b2c      	ldr	r3, [pc, #176]	; (800457c <prvAddNewTaskToReadyList+0xc8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044d2:	4a2a      	ldr	r2, [pc, #168]	; (800457c <prvAddNewTaskToReadyList+0xc8>)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044d8:	4b27      	ldr	r3, [pc, #156]	; (8004578 <prvAddNewTaskToReadyList+0xc4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d110      	bne.n	8004502 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044e0:	f000 fcc6 	bl	8004e70 <prvInitialiseTaskLists>
 80044e4:	e00d      	b.n	8004502 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044e6:	4b26      	ldr	r3, [pc, #152]	; (8004580 <prvAddNewTaskToReadyList+0xcc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044ee:	4b23      	ldr	r3, [pc, #140]	; (800457c <prvAddNewTaskToReadyList+0xc8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d802      	bhi.n	8004502 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044fc:	4a1f      	ldr	r2, [pc, #124]	; (800457c <prvAddNewTaskToReadyList+0xc8>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004502:	4b20      	ldr	r3, [pc, #128]	; (8004584 <prvAddNewTaskToReadyList+0xd0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3301      	adds	r3, #1
 8004508:	4a1e      	ldr	r2, [pc, #120]	; (8004584 <prvAddNewTaskToReadyList+0xd0>)
 800450a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800450c:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <prvAddNewTaskToReadyList+0xd0>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004518:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <prvAddNewTaskToReadyList+0xd4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d903      	bls.n	8004528 <prvAddNewTaskToReadyList+0x74>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	4a18      	ldr	r2, [pc, #96]	; (8004588 <prvAddNewTaskToReadyList+0xd4>)
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4a15      	ldr	r2, [pc, #84]	; (800458c <prvAddNewTaskToReadyList+0xd8>)
 8004536:	441a      	add	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3304      	adds	r3, #4
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f7ff f90f 	bl	8003762 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004544:	f001 faa2 	bl	8005a8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004548:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <prvAddNewTaskToReadyList+0xcc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00e      	beq.n	800456e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004550:	4b0a      	ldr	r3, [pc, #40]	; (800457c <prvAddNewTaskToReadyList+0xc8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	429a      	cmp	r2, r3
 800455c:	d207      	bcs.n	800456e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800455e:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <prvAddNewTaskToReadyList+0xdc>)
 8004560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20000e24 	.word	0x20000e24
 800457c:	20000950 	.word	0x20000950
 8004580:	20000e30 	.word	0x20000e30
 8004584:	20000e40 	.word	0x20000e40
 8004588:	20000e2c 	.word	0x20000e2c
 800458c:	20000954 	.word	0x20000954
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d017      	beq.n	80045d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045a6:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <vTaskDelay+0x60>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <vTaskDelay+0x30>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	60bb      	str	r3, [r7, #8]
}
 80045c0:	bf00      	nop
 80045c2:	e7fe      	b.n	80045c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045c4:	f000 f88a 	bl	80046dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045c8:	2100      	movs	r1, #0
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fdba 	bl	8005144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045d0:	f000 f892 	bl	80046f8 <xTaskResumeAll>
 80045d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d107      	bne.n	80045ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <vTaskDelay+0x64>)
 80045de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20000e4c 	.word	0x20000e4c
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004606:	2300      	movs	r3, #0
 8004608:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800460a:	463a      	mov	r2, r7
 800460c:	1d39      	adds	r1, r7, #4
 800460e:	f107 0308 	add.w	r3, r7, #8
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe fe5a 	bl	80032cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004618:	6839      	ldr	r1, [r7, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	9202      	str	r2, [sp, #8]
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	2300      	movs	r3, #0
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	2300      	movs	r3, #0
 8004628:	460a      	mov	r2, r1
 800462a:	4924      	ldr	r1, [pc, #144]	; (80046bc <vTaskStartScheduler+0xc0>)
 800462c:	4824      	ldr	r0, [pc, #144]	; (80046c0 <vTaskStartScheduler+0xc4>)
 800462e:	f7ff fe01 	bl	8004234 <xTaskCreateStatic>
 8004632:	4603      	mov	r3, r0
 8004634:	4a23      	ldr	r2, [pc, #140]	; (80046c4 <vTaskStartScheduler+0xc8>)
 8004636:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004638:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <vTaskStartScheduler+0xc8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004640:	2301      	movs	r3, #1
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	e001      	b.n	800464a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d102      	bne.n	8004656 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004650:	f000 fdcc 	bl	80051ec <xTimerCreateTimerTask>
 8004654:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d11b      	bne.n	8004694 <vTaskStartScheduler+0x98>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	613b      	str	r3, [r7, #16]
}
 800466e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004670:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <vTaskStartScheduler+0xcc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3354      	adds	r3, #84	; 0x54
 8004676:	4a15      	ldr	r2, [pc, #84]	; (80046cc <vTaskStartScheduler+0xd0>)
 8004678:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <vTaskStartScheduler+0xd4>)
 800467c:	f04f 32ff 	mov.w	r2, #4294967295
 8004680:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004682:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <vTaskStartScheduler+0xd8>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004688:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <vTaskStartScheduler+0xdc>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800468e:	f001 f95b 	bl	8005948 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004692:	e00e      	b.n	80046b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469a:	d10a      	bne.n	80046b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60fb      	str	r3, [r7, #12]
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <vTaskStartScheduler+0xb4>
}
 80046b2:	bf00      	nop
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	080063ac 	.word	0x080063ac
 80046c0:	08004e41 	.word	0x08004e41
 80046c4:	20000e48 	.word	0x20000e48
 80046c8:	20000950 	.word	0x20000950
 80046cc:	20000154 	.word	0x20000154
 80046d0:	20000e44 	.word	0x20000e44
 80046d4:	20000e30 	.word	0x20000e30
 80046d8:	20000e28 	.word	0x20000e28

080046dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80046e0:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <vTaskSuspendAll+0x18>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3301      	adds	r3, #1
 80046e6:	4a03      	ldr	r2, [pc, #12]	; (80046f4 <vTaskSuspendAll+0x18>)
 80046e8:	6013      	str	r3, [r2, #0]
}
 80046ea:	bf00      	nop
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000e4c 	.word	0x20000e4c

080046f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004706:	4b42      	ldr	r3, [pc, #264]	; (8004810 <xTaskResumeAll+0x118>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <xTaskResumeAll+0x2c>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	603b      	str	r3, [r7, #0]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004724:	f001 f982 	bl	8005a2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004728:	4b39      	ldr	r3, [pc, #228]	; (8004810 <xTaskResumeAll+0x118>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3b01      	subs	r3, #1
 800472e:	4a38      	ldr	r2, [pc, #224]	; (8004810 <xTaskResumeAll+0x118>)
 8004730:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004732:	4b37      	ldr	r3, [pc, #220]	; (8004810 <xTaskResumeAll+0x118>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d162      	bne.n	8004800 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800473a:	4b36      	ldr	r3, [pc, #216]	; (8004814 <xTaskResumeAll+0x11c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d05e      	beq.n	8004800 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004742:	e02f      	b.n	80047a4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004744:	4b34      	ldr	r3, [pc, #208]	; (8004818 <xTaskResumeAll+0x120>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3318      	adds	r3, #24
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff f861 	bl	8003818 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3304      	adds	r3, #4
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff f85c 	bl	8003818 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004764:	4b2d      	ldr	r3, [pc, #180]	; (800481c <xTaskResumeAll+0x124>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d903      	bls.n	8004774 <xTaskResumeAll+0x7c>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	4a2a      	ldr	r2, [pc, #168]	; (800481c <xTaskResumeAll+0x124>)
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4a27      	ldr	r2, [pc, #156]	; (8004820 <xTaskResumeAll+0x128>)
 8004782:	441a      	add	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f7fe ffe9 	bl	8003762 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	4b23      	ldr	r3, [pc, #140]	; (8004824 <xTaskResumeAll+0x12c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	429a      	cmp	r2, r3
 800479c:	d302      	bcc.n	80047a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800479e:	4b22      	ldr	r3, [pc, #136]	; (8004828 <xTaskResumeAll+0x130>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047a4:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <xTaskResumeAll+0x120>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1cb      	bne.n	8004744 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047b2:	f000 fbff 	bl	8004fb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047b6:	4b1d      	ldr	r3, [pc, #116]	; (800482c <xTaskResumeAll+0x134>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d010      	beq.n	80047e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047c2:	f000 f845 	bl	8004850 <xTaskIncrementTick>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80047cc:	4b16      	ldr	r3, [pc, #88]	; (8004828 <xTaskResumeAll+0x130>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f1      	bne.n	80047c2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <xTaskResumeAll+0x134>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047e4:	4b10      	ldr	r3, [pc, #64]	; (8004828 <xTaskResumeAll+0x130>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047ec:	2301      	movs	r3, #1
 80047ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <xTaskResumeAll+0x138>)
 80047f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004800:	f001 f944 	bl	8005a8c <vPortExitCritical>

	return xAlreadyYielded;
 8004804:	68bb      	ldr	r3, [r7, #8]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000e4c 	.word	0x20000e4c
 8004814:	20000e24 	.word	0x20000e24
 8004818:	20000de4 	.word	0x20000de4
 800481c:	20000e2c 	.word	0x20000e2c
 8004820:	20000954 	.word	0x20000954
 8004824:	20000950 	.word	0x20000950
 8004828:	20000e38 	.word	0x20000e38
 800482c:	20000e34 	.word	0x20000e34
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800483a:	4b04      	ldr	r3, [pc, #16]	; (800484c <xTaskGetTickCount+0x18>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004840:	687b      	ldr	r3, [r7, #4]
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr
 800484c:	20000e28 	.word	0x20000e28

08004850 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800485a:	4b51      	ldr	r3, [pc, #324]	; (80049a0 <xTaskIncrementTick+0x150>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	f040 808e 	bne.w	8004980 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004864:	4b4f      	ldr	r3, [pc, #316]	; (80049a4 <xTaskIncrementTick+0x154>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3301      	adds	r3, #1
 800486a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800486c:	4a4d      	ldr	r2, [pc, #308]	; (80049a4 <xTaskIncrementTick+0x154>)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d120      	bne.n	80048ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004878:	4b4b      	ldr	r3, [pc, #300]	; (80049a8 <xTaskIncrementTick+0x158>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <xTaskIncrementTick+0x48>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	603b      	str	r3, [r7, #0]
}
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <xTaskIncrementTick+0x46>
 8004898:	4b43      	ldr	r3, [pc, #268]	; (80049a8 <xTaskIncrementTick+0x158>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	4b43      	ldr	r3, [pc, #268]	; (80049ac <xTaskIncrementTick+0x15c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a41      	ldr	r2, [pc, #260]	; (80049a8 <xTaskIncrementTick+0x158>)
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4a41      	ldr	r2, [pc, #260]	; (80049ac <xTaskIncrementTick+0x15c>)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	4b40      	ldr	r3, [pc, #256]	; (80049b0 <xTaskIncrementTick+0x160>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	4a3f      	ldr	r2, [pc, #252]	; (80049b0 <xTaskIncrementTick+0x160>)
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	f000 fb7d 	bl	8004fb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048ba:	4b3e      	ldr	r3, [pc, #248]	; (80049b4 <xTaskIncrementTick+0x164>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d34e      	bcc.n	8004962 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048c4:	4b38      	ldr	r3, [pc, #224]	; (80049a8 <xTaskIncrementTick+0x158>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <xTaskIncrementTick+0x82>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <xTaskIncrementTick+0x84>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d004      	beq.n	80048e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d8:	4b36      	ldr	r3, [pc, #216]	; (80049b4 <xTaskIncrementTick+0x164>)
 80048da:	f04f 32ff 	mov.w	r2, #4294967295
 80048de:	601a      	str	r2, [r3, #0]
					break;
 80048e0:	e03f      	b.n	8004962 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048e2:	4b31      	ldr	r3, [pc, #196]	; (80049a8 <xTaskIncrementTick+0x158>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d203      	bcs.n	8004902 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048fa:	4a2e      	ldr	r2, [pc, #184]	; (80049b4 <xTaskIncrementTick+0x164>)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6013      	str	r3, [r2, #0]
						break;
 8004900:	e02f      	b.n	8004962 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	3304      	adds	r3, #4
 8004906:	4618      	mov	r0, r3
 8004908:	f7fe ff86 	bl	8003818 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	2b00      	cmp	r3, #0
 8004912:	d004      	beq.n	800491e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	3318      	adds	r3, #24
 8004918:	4618      	mov	r0, r3
 800491a:	f7fe ff7d 	bl	8003818 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004922:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <xTaskIncrementTick+0x168>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d903      	bls.n	8004932 <xTaskIncrementTick+0xe2>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	4a22      	ldr	r2, [pc, #136]	; (80049b8 <xTaskIncrementTick+0x168>)
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <xTaskIncrementTick+0x16c>)
 8004940:	441a      	add	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	3304      	adds	r3, #4
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f7fe ff0a 	bl	8003762 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004952:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <xTaskIncrementTick+0x170>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	429a      	cmp	r2, r3
 800495a:	d3b3      	bcc.n	80048c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004960:	e7b0      	b.n	80048c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004962:	4b17      	ldr	r3, [pc, #92]	; (80049c0 <xTaskIncrementTick+0x170>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	4914      	ldr	r1, [pc, #80]	; (80049bc <xTaskIncrementTick+0x16c>)
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d907      	bls.n	800498a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800497a:	2301      	movs	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	e004      	b.n	800498a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004980:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <xTaskIncrementTick+0x174>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3301      	adds	r3, #1
 8004986:	4a0f      	ldr	r2, [pc, #60]	; (80049c4 <xTaskIncrementTick+0x174>)
 8004988:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800498a:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <xTaskIncrementTick+0x178>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004992:	2301      	movs	r3, #1
 8004994:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004996:	697b      	ldr	r3, [r7, #20]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20000e4c 	.word	0x20000e4c
 80049a4:	20000e28 	.word	0x20000e28
 80049a8:	20000ddc 	.word	0x20000ddc
 80049ac:	20000de0 	.word	0x20000de0
 80049b0:	20000e3c 	.word	0x20000e3c
 80049b4:	20000e44 	.word	0x20000e44
 80049b8:	20000e2c 	.word	0x20000e2c
 80049bc:	20000954 	.word	0x20000954
 80049c0:	20000950 	.word	0x20000950
 80049c4:	20000e34 	.word	0x20000e34
 80049c8:	20000e38 	.word	0x20000e38

080049cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049d2:	4b2a      	ldr	r3, [pc, #168]	; (8004a7c <vTaskSwitchContext+0xb0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049da:	4b29      	ldr	r3, [pc, #164]	; (8004a80 <vTaskSwitchContext+0xb4>)
 80049dc:	2201      	movs	r2, #1
 80049de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049e0:	e046      	b.n	8004a70 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80049e2:	4b27      	ldr	r3, [pc, #156]	; (8004a80 <vTaskSwitchContext+0xb4>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80049e8:	4b26      	ldr	r3, [pc, #152]	; (8004a84 <vTaskSwitchContext+0xb8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e010      	b.n	8004a12 <vTaskSwitchContext+0x46>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <vTaskSwitchContext+0x40>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	607b      	str	r3, [r7, #4]
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <vTaskSwitchContext+0x3e>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	491d      	ldr	r1, [pc, #116]	; (8004a88 <vTaskSwitchContext+0xbc>)
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0e4      	beq.n	80049f0 <vTaskSwitchContext+0x24>
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <vTaskSwitchContext+0xbc>)
 8004a32:	4413      	add	r3, r2
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	605a      	str	r2, [r3, #4]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	3308      	adds	r3, #8
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d104      	bne.n	8004a56 <vTaskSwitchContext+0x8a>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	605a      	str	r2, [r3, #4]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	4a0b      	ldr	r2, [pc, #44]	; (8004a8c <vTaskSwitchContext+0xc0>)
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <vTaskSwitchContext+0xb8>)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <vTaskSwitchContext+0xc0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3354      	adds	r3, #84	; 0x54
 8004a6c:	4a08      	ldr	r2, [pc, #32]	; (8004a90 <vTaskSwitchContext+0xc4>)
 8004a6e:	6013      	str	r3, [r2, #0]
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000e4c 	.word	0x20000e4c
 8004a80:	20000e38 	.word	0x20000e38
 8004a84:	20000e2c 	.word	0x20000e2c
 8004a88:	20000954 	.word	0x20000954
 8004a8c:	20000950 	.word	0x20000950
 8004a90:	20000154 	.word	0x20000154

08004a94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	60fb      	str	r3, [r7, #12]
}
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004aba:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <vTaskPlaceOnEventList+0x44>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3318      	adds	r3, #24
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fe fe70 	bl	80037a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ac8:	2101      	movs	r1, #1
 8004aca:	6838      	ldr	r0, [r7, #0]
 8004acc:	f000 fb3a 	bl	8005144 <prvAddCurrentTaskToDelayedList>
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20000950 	.word	0x20000950

08004adc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	617b      	str	r3, [r7, #20]
}
 8004b00:	bf00      	nop
 8004b02:	e7fe      	b.n	8004b02 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004b04:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <vTaskPlaceOnUnorderedEventList+0x70>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	613b      	str	r3, [r7, #16]
}
 8004b1e:	bf00      	nop
 8004b20:	e7fe      	b.n	8004b20 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004b2c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3318      	adds	r3, #24
 8004b34:	4619      	mov	r1, r3
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7fe fe13 	bl	8003762 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fb00 	bl	8005144 <prvAddCurrentTaskToDelayedList>
}
 8004b44:	bf00      	nop
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20000e4c 	.word	0x20000e4c
 8004b50:	20000950 	.word	0x20000950

08004b54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	617b      	str	r3, [r7, #20]
}
 8004b78:	bf00      	nop
 8004b7a:	e7fe      	b.n	8004b7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3318      	adds	r3, #24
 8004b82:	4619      	mov	r1, r3
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7fe fdec 	bl	8003762 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004b90:	f04f 33ff 	mov.w	r3, #4294967295
 8004b94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	68b8      	ldr	r0, [r7, #8]
 8004b9a:	f000 fad3 	bl	8005144 <prvAddCurrentTaskToDelayedList>
	}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000950 	.word	0x20000950

08004bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	60fb      	str	r3, [r7, #12]
}
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	3318      	adds	r3, #24
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fe fe1b 	bl	8003818 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004be2:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <xTaskRemoveFromEventList+0xb0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d11d      	bne.n	8004c26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe fe12 	bl	8003818 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <xTaskRemoveFromEventList+0xb4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d903      	bls.n	8004c08 <xTaskRemoveFromEventList+0x5c>
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <xTaskRemoveFromEventList+0xb4>)
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <xTaskRemoveFromEventList+0xb8>)
 8004c16:	441a      	add	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f7fe fd9f 	bl	8003762 <vListInsertEnd>
 8004c24:	e005      	b.n	8004c32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	3318      	adds	r3, #24
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	480e      	ldr	r0, [pc, #56]	; (8004c68 <xTaskRemoveFromEventList+0xbc>)
 8004c2e:	f7fe fd98 	bl	8003762 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c36:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <xTaskRemoveFromEventList+0xc0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d905      	bls.n	8004c4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c40:	2301      	movs	r3, #1
 8004c42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <xTaskRemoveFromEventList+0xc4>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e001      	b.n	8004c50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004c50:	697b      	ldr	r3, [r7, #20]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000e4c 	.word	0x20000e4c
 8004c60:	20000e2c 	.word	0x20000e2c
 8004c64:	20000954 	.word	0x20000954
 8004c68:	20000de4 	.word	0x20000de4
 8004c6c:	20000950 	.word	0x20000950
 8004c70:	20000e38 	.word	0x20000e38

08004c74 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004c7e:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10a      	bne.n	8004c9c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	613b      	str	r3, [r7, #16]
}
 8004c98:	bf00      	nop
 8004c9a:	e7fe      	b.n	8004c9a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	60fb      	str	r3, [r7, #12]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7fe fda5 	bl	8003818 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe fda0 	bl	8003818 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cdc:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d903      	bls.n	8004cec <vTaskRemoveFromUnorderedEventList+0x78>
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	4a0f      	ldr	r2, [pc, #60]	; (8004d28 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004cfa:	441a      	add	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f7fe fd2d 	bl	8003762 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0c:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d902      	bls.n	8004d1c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004d16:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
	}
}
 8004d1c:	bf00      	nop
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000e4c 	.word	0x20000e4c
 8004d28:	20000e2c 	.word	0x20000e2c
 8004d2c:	20000954 	.word	0x20000954
 8004d30:	20000950 	.word	0x20000950
 8004d34:	20000e38 	.word	0x20000e38

08004d38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <vTaskInternalSetTimeOutState+0x24>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <vTaskInternalSetTimeOutState+0x28>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	605a      	str	r2, [r3, #4]
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000e3c 	.word	0x20000e3c
 8004d60:	20000e28 	.word	0x20000e28

08004d64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	613b      	str	r3, [r7, #16]
}
 8004d86:	bf00      	nop
 8004d88:	e7fe      	b.n	8004d88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10a      	bne.n	8004da6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	60fb      	str	r3, [r7, #12]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004da6:	f000 fe41 	bl	8005a2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004daa:	4b1d      	ldr	r3, [pc, #116]	; (8004e20 <xTaskCheckForTimeOut+0xbc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc2:	d102      	bne.n	8004dca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	e023      	b.n	8004e12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b15      	ldr	r3, [pc, #84]	; (8004e24 <xTaskCheckForTimeOut+0xc0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d007      	beq.n	8004de6 <xTaskCheckForTimeOut+0x82>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d302      	bcc.n	8004de6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	e015      	b.n	8004e12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d20b      	bcs.n	8004e08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1ad2      	subs	r2, r2, r3
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff ff9b 	bl	8004d38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	e004      	b.n	8004e12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e12:	f000 fe3b 	bl	8005a8c <vPortExitCritical>

	return xReturn;
 8004e16:	69fb      	ldr	r3, [r7, #28]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3720      	adds	r7, #32
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20000e28 	.word	0x20000e28
 8004e24:	20000e3c 	.word	0x20000e3c

08004e28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <vTaskMissedYield+0x14>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
}
 8004e32:	bf00      	nop
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000e38 	.word	0x20000e38

08004e40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e48:	f000 f852 	bl	8004ef0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e4c:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <prvIdleTask+0x28>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d9f9      	bls.n	8004e48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <prvIdleTask+0x2c>)
 8004e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e64:	e7f0      	b.n	8004e48 <prvIdleTask+0x8>
 8004e66:	bf00      	nop
 8004e68:	20000954 	.word	0x20000954
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e76:	2300      	movs	r3, #0
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	e00c      	b.n	8004e96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4a12      	ldr	r2, [pc, #72]	; (8004ed0 <prvInitialiseTaskLists+0x60>)
 8004e88:	4413      	add	r3, r2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fc3e 	bl	800370c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3301      	adds	r3, #1
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b37      	cmp	r3, #55	; 0x37
 8004e9a:	d9ef      	bls.n	8004e7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e9c:	480d      	ldr	r0, [pc, #52]	; (8004ed4 <prvInitialiseTaskLists+0x64>)
 8004e9e:	f7fe fc35 	bl	800370c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ea2:	480d      	ldr	r0, [pc, #52]	; (8004ed8 <prvInitialiseTaskLists+0x68>)
 8004ea4:	f7fe fc32 	bl	800370c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ea8:	480c      	ldr	r0, [pc, #48]	; (8004edc <prvInitialiseTaskLists+0x6c>)
 8004eaa:	f7fe fc2f 	bl	800370c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004eae:	480c      	ldr	r0, [pc, #48]	; (8004ee0 <prvInitialiseTaskLists+0x70>)
 8004eb0:	f7fe fc2c 	bl	800370c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004eb4:	480b      	ldr	r0, [pc, #44]	; (8004ee4 <prvInitialiseTaskLists+0x74>)
 8004eb6:	f7fe fc29 	bl	800370c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004eba:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <prvInitialiseTaskLists+0x78>)
 8004ebc:	4a05      	ldr	r2, [pc, #20]	; (8004ed4 <prvInitialiseTaskLists+0x64>)
 8004ebe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <prvInitialiseTaskLists+0x7c>)
 8004ec2:	4a05      	ldr	r2, [pc, #20]	; (8004ed8 <prvInitialiseTaskLists+0x68>)
 8004ec4:	601a      	str	r2, [r3, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000954 	.word	0x20000954
 8004ed4:	20000db4 	.word	0x20000db4
 8004ed8:	20000dc8 	.word	0x20000dc8
 8004edc:	20000de4 	.word	0x20000de4
 8004ee0:	20000df8 	.word	0x20000df8
 8004ee4:	20000e10 	.word	0x20000e10
 8004ee8:	20000ddc 	.word	0x20000ddc
 8004eec:	20000de0 	.word	0x20000de0

08004ef0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ef6:	e019      	b.n	8004f2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ef8:	f000 fd98 	bl	8005a2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <prvCheckTasksWaitingTermination+0x50>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fe fc85 	bl	8003818 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <prvCheckTasksWaitingTermination+0x54>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	4a0b      	ldr	r2, [pc, #44]	; (8004f44 <prvCheckTasksWaitingTermination+0x54>)
 8004f16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <prvCheckTasksWaitingTermination+0x58>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <prvCheckTasksWaitingTermination+0x58>)
 8004f20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f22:	f000 fdb3 	bl	8005a8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f810 	bl	8004f4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <prvCheckTasksWaitingTermination+0x58>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e1      	bne.n	8004ef8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000df8 	.word	0x20000df8
 8004f44:	20000e24 	.word	0x20000e24
 8004f48:	20000e0c 	.word	0x20000e0c

08004f4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3354      	adds	r3, #84	; 0x54
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 f889 	bl	8006070 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d108      	bne.n	8004f7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 ff21 	bl	8005db4 <vPortFree>
				vPortFree( pxTCB );
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 ff1e 	bl	8005db4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f78:	e018      	b.n	8004fac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d103      	bne.n	8004f8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 ff15 	bl	8005db4 <vPortFree>
	}
 8004f8a:	e00f      	b.n	8004fac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d00a      	beq.n	8004fac <prvDeleteTCB+0x60>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60fb      	str	r3, [r7, #12]
}
 8004fa8:	bf00      	nop
 8004faa:	e7fe      	b.n	8004faa <prvDeleteTCB+0x5e>
	}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fba:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <prvResetNextTaskUnblockTime+0x40>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <prvResetNextTaskUnblockTime+0x14>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <prvResetNextTaskUnblockTime+0x16>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d004      	beq.n	8004fd8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fce:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <prvResetNextTaskUnblockTime+0x44>)
 8004fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fd6:	e008      	b.n	8004fea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <prvResetNextTaskUnblockTime+0x40>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4a04      	ldr	r2, [pc, #16]	; (8004ff8 <prvResetNextTaskUnblockTime+0x44>)
 8004fe8:	6013      	str	r3, [r2, #0]
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr
 8004ff4:	20000ddc 	.word	0x20000ddc
 8004ff8:	20000e44 	.word	0x20000e44

08004ffc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005002:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <xTaskGetSchedulerState+0x34>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d102      	bne.n	8005010 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800500a:	2301      	movs	r3, #1
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	e008      	b.n	8005022 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005010:	4b08      	ldr	r3, [pc, #32]	; (8005034 <xTaskGetSchedulerState+0x38>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d102      	bne.n	800501e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005018:	2302      	movs	r3, #2
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	e001      	b.n	8005022 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800501e:	2300      	movs	r3, #0
 8005020:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005022:	687b      	ldr	r3, [r7, #4]
	}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000e30 	.word	0x20000e30
 8005034:	20000e4c 	.word	0x20000e4c

08005038 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d056      	beq.n	80050fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800504e:	4b2e      	ldr	r3, [pc, #184]	; (8005108 <xTaskPriorityDisinherit+0xd0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	429a      	cmp	r2, r3
 8005056:	d00a      	beq.n	800506e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	60fb      	str	r3, [r7, #12]
}
 800506a:	bf00      	nop
 800506c:	e7fe      	b.n	800506c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10a      	bne.n	800508c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	60bb      	str	r3, [r7, #8]
}
 8005088:	bf00      	nop
 800508a:	e7fe      	b.n	800508a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005090:	1e5a      	subs	r2, r3, #1
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509e:	429a      	cmp	r2, r3
 80050a0:	d02c      	beq.n	80050fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d128      	bne.n	80050fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe fbb2 	bl	8003818 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050cc:	4b0f      	ldr	r3, [pc, #60]	; (800510c <xTaskPriorityDisinherit+0xd4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d903      	bls.n	80050dc <xTaskPriorityDisinherit+0xa4>
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	4a0c      	ldr	r2, [pc, #48]	; (800510c <xTaskPriorityDisinherit+0xd4>)
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4a09      	ldr	r2, [pc, #36]	; (8005110 <xTaskPriorityDisinherit+0xd8>)
 80050ea:	441a      	add	r2, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f7fe fb35 	bl	8003762 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050f8:	2301      	movs	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050fc:	697b      	ldr	r3, [r7, #20]
	}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000950 	.word	0x20000950
 800510c:	20000e2c 	.word	0x20000e2c
 8005110:	20000954 	.word	0x20000954

08005114 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800511a:	4b09      	ldr	r3, [pc, #36]	; (8005140 <uxTaskResetEventItemValue+0x2c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005122:	4b07      	ldr	r3, [pc, #28]	; (8005140 <uxTaskResetEventItemValue+0x2c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <uxTaskResetEventItemValue+0x2c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8005130:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005132:	687b      	ldr	r3, [r7, #4]
}
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000950 	.word	0x20000950

08005144 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800514e:	4b21      	ldr	r3, [pc, #132]	; (80051d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005154:	4b20      	ldr	r3, [pc, #128]	; (80051d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3304      	adds	r3, #4
 800515a:	4618      	mov	r0, r3
 800515c:	f7fe fb5c 	bl	8003818 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d10a      	bne.n	800517e <prvAddCurrentTaskToDelayedList+0x3a>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800516e:	4b1a      	ldr	r3, [pc, #104]	; (80051d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3304      	adds	r3, #4
 8005174:	4619      	mov	r1, r3
 8005176:	4819      	ldr	r0, [pc, #100]	; (80051dc <prvAddCurrentTaskToDelayedList+0x98>)
 8005178:	f7fe faf3 	bl	8003762 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800517c:	e026      	b.n	80051cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4413      	add	r3, r2
 8005184:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005186:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	429a      	cmp	r2, r3
 8005194:	d209      	bcs.n	80051aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005196:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f7fe fb00 	bl	80037a8 <vListInsert>
}
 80051a8:	e010      	b.n	80051cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051aa:	4b0e      	ldr	r3, [pc, #56]	; (80051e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f7fe faf6 	bl	80037a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d202      	bcs.n	80051cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051c6:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6013      	str	r3, [r2, #0]
}
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000e28 	.word	0x20000e28
 80051d8:	20000950 	.word	0x20000950
 80051dc:	20000e10 	.word	0x20000e10
 80051e0:	20000de0 	.word	0x20000de0
 80051e4:	20000ddc 	.word	0x20000ddc
 80051e8:	20000e44 	.word	0x20000e44

080051ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	; 0x28
 80051f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051f6:	f000 facb 	bl	8005790 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051fa:	4b1c      	ldr	r3, [pc, #112]	; (800526c <xTimerCreateTimerTask+0x80>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d021      	beq.n	8005246 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005206:	2300      	movs	r3, #0
 8005208:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800520a:	1d3a      	adds	r2, r7, #4
 800520c:	f107 0108 	add.w	r1, r7, #8
 8005210:	f107 030c 	add.w	r3, r7, #12
 8005214:	4618      	mov	r0, r3
 8005216:	f7fe f871 	bl	80032fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	9202      	str	r2, [sp, #8]
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	2302      	movs	r3, #2
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	2300      	movs	r3, #0
 800522a:	460a      	mov	r2, r1
 800522c:	4910      	ldr	r1, [pc, #64]	; (8005270 <xTimerCreateTimerTask+0x84>)
 800522e:	4811      	ldr	r0, [pc, #68]	; (8005274 <xTimerCreateTimerTask+0x88>)
 8005230:	f7ff f800 	bl	8004234 <xTaskCreateStatic>
 8005234:	4603      	mov	r3, r0
 8005236:	4a10      	ldr	r2, [pc, #64]	; (8005278 <xTimerCreateTimerTask+0x8c>)
 8005238:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800523a:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <xTimerCreateTimerTask+0x8c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005242:	2301      	movs	r3, #1
 8005244:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	613b      	str	r3, [r7, #16]
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005262:	697b      	ldr	r3, [r7, #20]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000e80 	.word	0x20000e80
 8005270:	080063b4 	.word	0x080063b4
 8005274:	08005399 	.word	0x08005399
 8005278:	20000e84 	.word	0x20000e84

0800527c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	; 0x28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800528a:	2300      	movs	r3, #0
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10a      	bne.n	80052aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	623b      	str	r3, [r7, #32]
}
 80052a6:	bf00      	nop
 80052a8:	e7fe      	b.n	80052a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80052aa:	4b1a      	ldr	r3, [pc, #104]	; (8005314 <xTimerGenericCommand+0x98>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d02a      	beq.n	8005308 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b05      	cmp	r3, #5
 80052c2:	dc18      	bgt.n	80052f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052c4:	f7ff fe9a 	bl	8004ffc <xTaskGetSchedulerState>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d109      	bne.n	80052e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052ce:	4b11      	ldr	r3, [pc, #68]	; (8005314 <xTimerGenericCommand+0x98>)
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	f107 0110 	add.w	r1, r7, #16
 80052d6:	2300      	movs	r3, #0
 80052d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052da:	f7fe fbc9 	bl	8003a70 <xQueueGenericSend>
 80052de:	6278      	str	r0, [r7, #36]	; 0x24
 80052e0:	e012      	b.n	8005308 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052e2:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <xTimerGenericCommand+0x98>)
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	f107 0110 	add.w	r1, r7, #16
 80052ea:	2300      	movs	r3, #0
 80052ec:	2200      	movs	r2, #0
 80052ee:	f7fe fbbf 	bl	8003a70 <xQueueGenericSend>
 80052f2:	6278      	str	r0, [r7, #36]	; 0x24
 80052f4:	e008      	b.n	8005308 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052f6:	4b07      	ldr	r3, [pc, #28]	; (8005314 <xTimerGenericCommand+0x98>)
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	f107 0110 	add.w	r1, r7, #16
 80052fe:	2300      	movs	r3, #0
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	f7fe fcb3 	bl	8003c6c <xQueueGenericSendFromISR>
 8005306:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800530a:	4618      	mov	r0, r3
 800530c:	3728      	adds	r7, #40	; 0x28
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000e80 	.word	0x20000e80

08005318 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af02      	add	r7, sp, #8
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005322:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <prvProcessExpiredTimer+0x7c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	3304      	adds	r3, #4
 8005330:	4618      	mov	r0, r3
 8005332:	f7fe fa71 	bl	8003818 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d122      	bne.n	8005384 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	18d1      	adds	r1, r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	6978      	ldr	r0, [r7, #20]
 800534c:	f000 f8c8 	bl	80054e0 <prvInsertTimerInActiveList>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d016      	beq.n	8005384 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005356:	2300      	movs	r3, #0
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	2300      	movs	r3, #0
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	2100      	movs	r1, #0
 8005360:	6978      	ldr	r0, [r7, #20]
 8005362:	f7ff ff8b 	bl	800527c <xTimerGenericCommand>
 8005366:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	60fb      	str	r3, [r7, #12]
}
 8005380:	bf00      	nop
 8005382:	e7fe      	b.n	8005382 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	6978      	ldr	r0, [r7, #20]
 800538a:	4798      	blx	r3
}
 800538c:	bf00      	nop
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20000e78 	.word	0x20000e78

08005398 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053a0:	f107 0308 	add.w	r3, r7, #8
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 f857 	bl	8005458 <prvGetNextExpireTime>
 80053aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4619      	mov	r1, r3
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f803 	bl	80053bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80053b6:	f000 f8d5 	bl	8005564 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053ba:	e7f1      	b.n	80053a0 <prvTimerTask+0x8>

080053bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053c6:	f7ff f989 	bl	80046dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053ca:	f107 0308 	add.w	r3, r7, #8
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f866 	bl	80054a0 <prvSampleTimeNow>
 80053d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d130      	bne.n	800543e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <prvProcessTimerOrBlockTask+0x3c>
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d806      	bhi.n	80053f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053ea:	f7ff f985 	bl	80046f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053ee:	68f9      	ldr	r1, [r7, #12]
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff ff91 	bl	8005318 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053f6:	e024      	b.n	8005442 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d008      	beq.n	8005410 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053fe:	4b13      	ldr	r3, [pc, #76]	; (800544c <prvProcessTimerOrBlockTask+0x90>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf0c      	ite	eq
 8005408:	2301      	moveq	r3, #1
 800540a:	2300      	movne	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <prvProcessTimerOrBlockTask+0x94>)
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	4619      	mov	r1, r3
 800541e:	f7fe fed5 	bl	80041cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005422:	f7ff f969 	bl	80046f8 <xTaskResumeAll>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <prvProcessTimerOrBlockTask+0x98>)
 800542e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	f3bf 8f6f 	isb	sy
}
 800543c:	e001      	b.n	8005442 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800543e:	f7ff f95b 	bl	80046f8 <xTaskResumeAll>
}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000e7c 	.word	0x20000e7c
 8005450:	20000e80 	.word	0x20000e80
 8005454:	e000ed04 	.word	0xe000ed04

08005458 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005460:	4b0e      	ldr	r3, [pc, #56]	; (800549c <prvGetNextExpireTime+0x44>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	bf0c      	ite	eq
 800546a:	2301      	moveq	r3, #1
 800546c:	2300      	movne	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d105      	bne.n	800548a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800547e:	4b07      	ldr	r3, [pc, #28]	; (800549c <prvGetNextExpireTime+0x44>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	e001      	b.n	800548e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800548e:	68fb      	ldr	r3, [r7, #12]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20000e78 	.word	0x20000e78

080054a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80054a8:	f7ff f9c4 	bl	8004834 <xTaskGetTickCount>
 80054ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80054ae:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <prvSampleTimeNow+0x3c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d205      	bcs.n	80054c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054b8:	f000 f908 	bl	80056cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	e002      	b.n	80054ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054ca:	4a04      	ldr	r2, [pc, #16]	; (80054dc <prvSampleTimeNow+0x3c>)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054d0:	68fb      	ldr	r3, [r7, #12]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000e88 	.word	0x20000e88

080054e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d812      	bhi.n	800552c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	1ad2      	subs	r2, r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	429a      	cmp	r2, r3
 8005512:	d302      	bcc.n	800551a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e01b      	b.n	8005552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800551a:	4b10      	ldr	r3, [pc, #64]	; (800555c <prvInsertTimerInActiveList+0x7c>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3304      	adds	r3, #4
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f7fe f93f 	bl	80037a8 <vListInsert>
 800552a:	e012      	b.n	8005552 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d206      	bcs.n	8005542 <prvInsertTimerInActiveList+0x62>
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d302      	bcc.n	8005542 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800553c:	2301      	movs	r3, #1
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	e007      	b.n	8005552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005542:	4b07      	ldr	r3, [pc, #28]	; (8005560 <prvInsertTimerInActiveList+0x80>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3304      	adds	r3, #4
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f7fe f92b 	bl	80037a8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005552:	697b      	ldr	r3, [r7, #20]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20000e7c 	.word	0x20000e7c
 8005560:	20000e78 	.word	0x20000e78

08005564 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08e      	sub	sp, #56	; 0x38
 8005568:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800556a:	e09d      	b.n	80056a8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	da18      	bge.n	80055a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005572:	1d3b      	adds	r3, r7, #4
 8005574:	3304      	adds	r3, #4
 8005576:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10a      	bne.n	8005594 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	61fb      	str	r3, [r7, #28]
}
 8005590:	bf00      	nop
 8005592:	e7fe      	b.n	8005592 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800559a:	6850      	ldr	r0, [r2, #4]
 800559c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800559e:	6892      	ldr	r2, [r2, #8]
 80055a0:	4611      	mov	r1, r2
 80055a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	db7d      	blt.n	80056a6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d004      	beq.n	80055c0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	3304      	adds	r3, #4
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe f92c 	bl	8003818 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055c0:	463b      	mov	r3, r7
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff ff6c 	bl	80054a0 <prvSampleTimeNow>
 80055c8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b09      	cmp	r3, #9
 80055ce:	d86b      	bhi.n	80056a8 <prvProcessReceivedCommands+0x144>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <prvProcessReceivedCommands+0x74>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	08005601 	.word	0x08005601
 80055dc:	08005601 	.word	0x08005601
 80055e0:	08005601 	.word	0x08005601
 80055e4:	080056a9 	.word	0x080056a9
 80055e8:	0800565d 	.word	0x0800565d
 80055ec:	08005695 	.word	0x08005695
 80055f0:	08005601 	.word	0x08005601
 80055f4:	08005601 	.word	0x08005601
 80055f8:	080056a9 	.word	0x080056a9
 80055fc:	0800565d 	.word	0x0800565d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	18d1      	adds	r1, r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800560e:	f7ff ff67 	bl	80054e0 <prvInsertTimerInActiveList>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d047      	beq.n	80056a8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800561e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d13f      	bne.n	80056a8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	441a      	add	r2, r3
 8005630:	2300      	movs	r3, #0
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	2300      	movs	r3, #0
 8005636:	2100      	movs	r1, #0
 8005638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800563a:	f7ff fe1f 	bl	800527c <xTimerGenericCommand>
 800563e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d130      	bne.n	80056a8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	61bb      	str	r3, [r7, #24]
}
 8005658:	bf00      	nop
 800565a:	e7fe      	b.n	800565a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10a      	bne.n	8005680 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	617b      	str	r3, [r7, #20]
}
 800567c:	bf00      	nop
 800567e:	e7fe      	b.n	800567e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	699a      	ldr	r2, [r3, #24]
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	18d1      	adds	r1, r2, r3
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800568e:	f7ff ff27 	bl	80054e0 <prvInsertTimerInActiveList>
					break;
 8005692:	e009      	b.n	80056a8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800569a:	2b00      	cmp	r3, #0
 800569c:	d104      	bne.n	80056a8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800569e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a0:	f000 fb88 	bl	8005db4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80056a4:	e000      	b.n	80056a8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80056a6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056a8:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <prvProcessReceivedCommands+0x164>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	1d39      	adds	r1, r7, #4
 80056ae:	2200      	movs	r2, #0
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fe fb73 	bl	8003d9c <xQueueReceive>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f47f af57 	bne.w	800556c <prvProcessReceivedCommands+0x8>
	}
}
 80056be:	bf00      	nop
 80056c0:	bf00      	nop
 80056c2:	3730      	adds	r7, #48	; 0x30
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	20000e80 	.word	0x20000e80

080056cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056d2:	e045      	b.n	8005760 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056d4:	4b2c      	ldr	r3, [pc, #176]	; (8005788 <prvSwitchTimerLists+0xbc>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056de:	4b2a      	ldr	r3, [pc, #168]	; (8005788 <prvSwitchTimerLists+0xbc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fe f893 	bl	8003818 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d12e      	bne.n	8005760 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4413      	add	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	429a      	cmp	r2, r3
 8005712:	d90e      	bls.n	8005732 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005720:	4b19      	ldr	r3, [pc, #100]	; (8005788 <prvSwitchTimerLists+0xbc>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3304      	adds	r3, #4
 8005728:	4619      	mov	r1, r3
 800572a:	4610      	mov	r0, r2
 800572c:	f7fe f83c 	bl	80037a8 <vListInsert>
 8005730:	e016      	b.n	8005760 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005732:	2300      	movs	r3, #0
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	2300      	movs	r3, #0
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	2100      	movs	r1, #0
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f7ff fd9d 	bl	800527c <xTimerGenericCommand>
 8005742:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <prvSwitchTimerLists+0x94>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	603b      	str	r3, [r7, #0]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <prvSwitchTimerLists+0xbc>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1b4      	bne.n	80056d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800576a:	4b07      	ldr	r3, [pc, #28]	; (8005788 <prvSwitchTimerLists+0xbc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <prvSwitchTimerLists+0xc0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a04      	ldr	r2, [pc, #16]	; (8005788 <prvSwitchTimerLists+0xbc>)
 8005776:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005778:	4a04      	ldr	r2, [pc, #16]	; (800578c <prvSwitchTimerLists+0xc0>)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	6013      	str	r3, [r2, #0]
}
 800577e:	bf00      	nop
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000e78 	.word	0x20000e78
 800578c:	20000e7c 	.word	0x20000e7c

08005790 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005796:	f000 f949 	bl	8005a2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800579a:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <prvCheckForValidListAndQueue+0x60>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d120      	bne.n	80057e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80057a2:	4814      	ldr	r0, [pc, #80]	; (80057f4 <prvCheckForValidListAndQueue+0x64>)
 80057a4:	f7fd ffb2 	bl	800370c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80057a8:	4813      	ldr	r0, [pc, #76]	; (80057f8 <prvCheckForValidListAndQueue+0x68>)
 80057aa:	f7fd ffaf 	bl	800370c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80057ae:	4b13      	ldr	r3, [pc, #76]	; (80057fc <prvCheckForValidListAndQueue+0x6c>)
 80057b0:	4a10      	ldr	r2, [pc, #64]	; (80057f4 <prvCheckForValidListAndQueue+0x64>)
 80057b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80057b4:	4b12      	ldr	r3, [pc, #72]	; (8005800 <prvCheckForValidListAndQueue+0x70>)
 80057b6:	4a10      	ldr	r2, [pc, #64]	; (80057f8 <prvCheckForValidListAndQueue+0x68>)
 80057b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80057ba:	2300      	movs	r3, #0
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	4b11      	ldr	r3, [pc, #68]	; (8005804 <prvCheckForValidListAndQueue+0x74>)
 80057c0:	4a11      	ldr	r2, [pc, #68]	; (8005808 <prvCheckForValidListAndQueue+0x78>)
 80057c2:	2110      	movs	r1, #16
 80057c4:	200a      	movs	r0, #10
 80057c6:	f7fe f8b9 	bl	800393c <xQueueGenericCreateStatic>
 80057ca:	4603      	mov	r3, r0
 80057cc:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <prvCheckForValidListAndQueue+0x60>)
 80057ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057d0:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <prvCheckForValidListAndQueue+0x60>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <prvCheckForValidListAndQueue+0x60>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	490b      	ldr	r1, [pc, #44]	; (800580c <prvCheckForValidListAndQueue+0x7c>)
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fe fccc 	bl	800417c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057e4:	f000 f952 	bl	8005a8c <vPortExitCritical>
}
 80057e8:	bf00      	nop
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000e80 	.word	0x20000e80
 80057f4:	20000e50 	.word	0x20000e50
 80057f8:	20000e64 	.word	0x20000e64
 80057fc:	20000e78 	.word	0x20000e78
 8005800:	20000e7c 	.word	0x20000e7c
 8005804:	20000f2c 	.word	0x20000f2c
 8005808:	20000e8c 	.word	0x20000e8c
 800580c:	080063bc 	.word	0x080063bc

08005810 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800581e:	f06f 0301 	mvn.w	r3, #1
 8005822:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005830:	4b06      	ldr	r3, [pc, #24]	; (800584c <xTimerPendFunctionCallFromISR+0x3c>)
 8005832:	6818      	ldr	r0, [r3, #0]
 8005834:	f107 0114 	add.w	r1, r7, #20
 8005838:	2300      	movs	r3, #0
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	f7fe fa16 	bl	8003c6c <xQueueGenericSendFromISR>
 8005840:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005844:	4618      	mov	r0, r3
 8005846:	3728      	adds	r7, #40	; 0x28
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000e80 	.word	0x20000e80

08005850 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3b04      	subs	r3, #4
 8005860:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3b04      	subs	r3, #4
 800586e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f023 0201 	bic.w	r2, r3, #1
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3b04      	subs	r3, #4
 800587e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005880:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <pxPortInitialiseStack+0x54>)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3b14      	subs	r3, #20
 800588a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3b20      	subs	r3, #32
 8005896:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005898:	68fb      	ldr	r3, [r7, #12]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr
 80058a4:	080058a9 	.word	0x080058a9

080058a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058b2:	4b12      	ldr	r3, [pc, #72]	; (80058fc <prvTaskExitError+0x54>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d00a      	beq.n	80058d2 <prvTaskExitError+0x2a>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	60fb      	str	r3, [r7, #12]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <prvTaskExitError+0x28>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	60bb      	str	r3, [r7, #8]
}
 80058e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058e6:	bf00      	nop
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0fc      	beq.n	80058e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000150 	.word	0x20000150

08005900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005900:	4b07      	ldr	r3, [pc, #28]	; (8005920 <pxCurrentTCBConst2>)
 8005902:	6819      	ldr	r1, [r3, #0]
 8005904:	6808      	ldr	r0, [r1, #0]
 8005906:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800590a:	f380 8809 	msr	PSP, r0
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f04f 0000 	mov.w	r0, #0
 8005916:	f380 8811 	msr	BASEPRI, r0
 800591a:	f04e 0e0d 	orr.w	lr, lr, #13
 800591e:	4770      	bx	lr

08005920 <pxCurrentTCBConst2>:
 8005920:	20000950 	.word	0x20000950
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop

08005928 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005928:	4806      	ldr	r0, [pc, #24]	; (8005944 <prvPortStartFirstTask+0x1c>)
 800592a:	6800      	ldr	r0, [r0, #0]
 800592c:	6800      	ldr	r0, [r0, #0]
 800592e:	f380 8808 	msr	MSP, r0
 8005932:	b662      	cpsie	i
 8005934:	b661      	cpsie	f
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	df00      	svc	0
 8005940:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005942:	bf00      	nop
 8005944:	e000ed08 	.word	0xe000ed08

08005948 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800594e:	4b32      	ldr	r3, [pc, #200]	; (8005a18 <xPortStartScheduler+0xd0>)
 8005950:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	22ff      	movs	r2, #255	; 0xff
 800595e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005970:	b2da      	uxtb	r2, r3
 8005972:	4b2a      	ldr	r3, [pc, #168]	; (8005a1c <xPortStartScheduler+0xd4>)
 8005974:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005976:	4b2a      	ldr	r3, [pc, #168]	; (8005a20 <xPortStartScheduler+0xd8>)
 8005978:	2207      	movs	r2, #7
 800597a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800597c:	e009      	b.n	8005992 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800597e:	4b28      	ldr	r3, [pc, #160]	; (8005a20 <xPortStartScheduler+0xd8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3b01      	subs	r3, #1
 8005984:	4a26      	ldr	r2, [pc, #152]	; (8005a20 <xPortStartScheduler+0xd8>)
 8005986:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	b2db      	uxtb	r3, r3
 8005990:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d0ef      	beq.n	800597e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800599e:	4b20      	ldr	r3, [pc, #128]	; (8005a20 <xPortStartScheduler+0xd8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f1c3 0307 	rsb	r3, r3, #7
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d00a      	beq.n	80059c0 <xPortStartScheduler+0x78>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	60bb      	str	r3, [r7, #8]
}
 80059bc:	bf00      	nop
 80059be:	e7fe      	b.n	80059be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059c0:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <xPortStartScheduler+0xd8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	4a16      	ldr	r2, [pc, #88]	; (8005a20 <xPortStartScheduler+0xd8>)
 80059c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059ca:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <xPortStartScheduler+0xd8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059d2:	4a13      	ldr	r2, [pc, #76]	; (8005a20 <xPortStartScheduler+0xd8>)
 80059d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059de:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <xPortStartScheduler+0xdc>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a10      	ldr	r2, [pc, #64]	; (8005a24 <xPortStartScheduler+0xdc>)
 80059e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059ea:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <xPortStartScheduler+0xdc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a0d      	ldr	r2, [pc, #52]	; (8005a24 <xPortStartScheduler+0xdc>)
 80059f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059f6:	f000 f8b9 	bl	8005b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <xPortStartScheduler+0xe0>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a00:	f7ff ff92 	bl	8005928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a04:	f7fe ffe2 	bl	80049cc <vTaskSwitchContext>
	prvTaskExitError();
 8005a08:	f7ff ff4e 	bl	80058a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	e000e400 	.word	0xe000e400
 8005a1c:	20000f7c 	.word	0x20000f7c
 8005a20:	20000f80 	.word	0x20000f80
 8005a24:	e000ed20 	.word	0xe000ed20
 8005a28:	20000150 	.word	0x20000150

08005a2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	607b      	str	r3, [r7, #4]
}
 8005a44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a46:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <vPortEnterCritical+0x58>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	; (8005a84 <vPortEnterCritical+0x58>)
 8005a4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a50:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <vPortEnterCritical+0x58>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d10f      	bne.n	8005a78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <vPortEnterCritical+0x5c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	603b      	str	r3, [r7, #0]
}
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <vPortEnterCritical+0x4a>
	}
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20000150 	.word	0x20000150
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a92:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <vPortExitCritical+0x4c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <vPortExitCritical+0x24>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	607b      	str	r3, [r7, #4]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ab0:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <vPortExitCritical+0x4c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	4a08      	ldr	r2, [pc, #32]	; (8005ad8 <vPortExitCritical+0x4c>)
 8005ab8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005aba:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <vPortExitCritical+0x4c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d105      	bne.n	8005ace <vPortExitCritical+0x42>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	f383 8811 	msr	BASEPRI, r3
}
 8005acc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr
 8005ad8:	20000150 	.word	0x20000150
 8005adc:	00000000 	.word	0x00000000

08005ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ae0:	f3ef 8009 	mrs	r0, PSP
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4b0d      	ldr	r3, [pc, #52]	; (8005b20 <pxCurrentTCBConst>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005af0:	6010      	str	r0, [r2, #0]
 8005af2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005af6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005afa:	f380 8811 	msr	BASEPRI, r0
 8005afe:	f7fe ff65 	bl	80049cc <vTaskSwitchContext>
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8811 	msr	BASEPRI, r0
 8005b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005b0e:	6819      	ldr	r1, [r3, #0]
 8005b10:	6808      	ldr	r0, [r1, #0]
 8005b12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b16:	f380 8809 	msr	PSP, r0
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	4770      	bx	lr

08005b20 <pxCurrentTCBConst>:
 8005b20:	20000950 	.word	0x20000950
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop

08005b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	607b      	str	r3, [r7, #4]
}
 8005b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b42:	f7fe fe85 	bl	8004850 <xTaskIncrementTick>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b4c:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <SysTick_Handler+0x40>)
 8005b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	2300      	movs	r3, #0
 8005b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f383 8811 	msr	BASEPRI, r3
}
 8005b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <vPortSetupTimerInterrupt+0x30>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b76:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <vPortSetupTimerInterrupt+0x34>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b7c:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <vPortSetupTimerInterrupt+0x38>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a09      	ldr	r2, [pc, #36]	; (8005ba8 <vPortSetupTimerInterrupt+0x3c>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	4a08      	ldr	r2, [pc, #32]	; (8005bac <vPortSetupTimerInterrupt+0x40>)
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b8e:	4b03      	ldr	r3, [pc, #12]	; (8005b9c <vPortSetupTimerInterrupt+0x30>)
 8005b90:	2207      	movs	r2, #7
 8005b92:	601a      	str	r2, [r3, #0]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr
 8005b9c:	e000e010 	.word	0xe000e010
 8005ba0:	e000e018 	.word	0xe000e018
 8005ba4:	20000144 	.word	0x20000144
 8005ba8:	10624dd3 	.word	0x10624dd3
 8005bac:	e000e014 	.word	0xe000e014

08005bb0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bb6:	f3ef 8305 	mrs	r3, IPSR
 8005bba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b0f      	cmp	r3, #15
 8005bc0:	d914      	bls.n	8005bec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bc2:	4a16      	ldr	r2, [pc, #88]	; (8005c1c <vPortValidateInterruptPriority+0x6c>)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bcc:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <vPortValidateInterruptPriority+0x70>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	7afa      	ldrb	r2, [r7, #11]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d20a      	bcs.n	8005bec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	607b      	str	r3, [r7, #4]
}
 8005be8:	bf00      	nop
 8005bea:	e7fe      	b.n	8005bea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bec:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <vPortValidateInterruptPriority+0x74>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <vPortValidateInterruptPriority+0x78>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d90a      	bls.n	8005c12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	603b      	str	r3, [r7, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <vPortValidateInterruptPriority+0x60>
	}
 8005c12:	bf00      	nop
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr
 8005c1c:	e000e3f0 	.word	0xe000e3f0
 8005c20:	20000f7c 	.word	0x20000f7c
 8005c24:	e000ed0c 	.word	0xe000ed0c
 8005c28:	20000f80 	.word	0x20000f80

08005c2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08a      	sub	sp, #40	; 0x28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c38:	f7fe fd50 	bl	80046dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c3c:	4b58      	ldr	r3, [pc, #352]	; (8005da0 <pvPortMalloc+0x174>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c44:	f000 f910 	bl	8005e68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c48:	4b56      	ldr	r3, [pc, #344]	; (8005da4 <pvPortMalloc+0x178>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f040 808e 	bne.w	8005d72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01d      	beq.n	8005c98 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c5c:	2208      	movs	r2, #8
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4413      	add	r3, r2
 8005c62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d014      	beq.n	8005c98 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f023 0307 	bic.w	r3, r3, #7
 8005c74:	3308      	adds	r3, #8
 8005c76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <pvPortMalloc+0x6c>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	617b      	str	r3, [r7, #20]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d069      	beq.n	8005d72 <pvPortMalloc+0x146>
 8005c9e:	4b42      	ldr	r3, [pc, #264]	; (8005da8 <pvPortMalloc+0x17c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d864      	bhi.n	8005d72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ca8:	4b40      	ldr	r3, [pc, #256]	; (8005dac <pvPortMalloc+0x180>)
 8005caa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cac:	4b3f      	ldr	r3, [pc, #252]	; (8005dac <pvPortMalloc+0x180>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cb2:	e004      	b.n	8005cbe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d903      	bls.n	8005cd0 <pvPortMalloc+0xa4>
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1f1      	bne.n	8005cb4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cd0:	4b33      	ldr	r3, [pc, #204]	; (8005da0 <pvPortMalloc+0x174>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d04b      	beq.n	8005d72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2208      	movs	r2, #8
 8005ce0:	4413      	add	r3, r2
 8005ce2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	1ad2      	subs	r2, r2, r3
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d91f      	bls.n	8005d3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4413      	add	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <pvPortMalloc+0xf8>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	613b      	str	r3, [r7, #16]
}
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	1ad2      	subs	r2, r2, r3
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d36:	69b8      	ldr	r0, [r7, #24]
 8005d38:	f000 f8f8 	bl	8005f2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d3c:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <pvPortMalloc+0x17c>)
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	4a18      	ldr	r2, [pc, #96]	; (8005da8 <pvPortMalloc+0x17c>)
 8005d48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d4a:	4b17      	ldr	r3, [pc, #92]	; (8005da8 <pvPortMalloc+0x17c>)
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	4b18      	ldr	r3, [pc, #96]	; (8005db0 <pvPortMalloc+0x184>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d203      	bcs.n	8005d5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d56:	4b14      	ldr	r3, [pc, #80]	; (8005da8 <pvPortMalloc+0x17c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <pvPortMalloc+0x184>)
 8005d5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <pvPortMalloc+0x178>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d72:	f7fe fcc1 	bl	80046f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <pvPortMalloc+0x16a>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	60fb      	str	r3, [r7, #12]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <pvPortMalloc+0x168>
	return pvReturn;
 8005d96:	69fb      	ldr	r3, [r7, #28]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3728      	adds	r7, #40	; 0x28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20001b8c 	.word	0x20001b8c
 8005da4:	20001b98 	.word	0x20001b98
 8005da8:	20001b90 	.word	0x20001b90
 8005dac:	20001b84 	.word	0x20001b84
 8005db0:	20001b94 	.word	0x20001b94

08005db4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d048      	beq.n	8005e58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	425b      	negs	r3, r3
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4413      	add	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	4b21      	ldr	r3, [pc, #132]	; (8005e60 <vPortFree+0xac>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <vPortFree+0x44>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	60fb      	str	r3, [r7, #12]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <vPortFree+0x62>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60bb      	str	r3, [r7, #8]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	4b11      	ldr	r3, [pc, #68]	; (8005e60 <vPortFree+0xac>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d019      	beq.n	8005e58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d115      	bne.n	8005e58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <vPortFree+0xac>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	401a      	ands	r2, r3
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e3c:	f7fe fc4e 	bl	80046dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <vPortFree+0xb0>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4413      	add	r3, r2
 8005e4a:	4a06      	ldr	r2, [pc, #24]	; (8005e64 <vPortFree+0xb0>)
 8005e4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e4e:	6938      	ldr	r0, [r7, #16]
 8005e50:	f000 f86c 	bl	8005f2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e54:	f7fe fc50 	bl	80046f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e58:	bf00      	nop
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20001b98 	.word	0x20001b98
 8005e64:	20001b90 	.word	0x20001b90

08005e68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005e72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e74:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <prvHeapInit+0xac>)
 8005e76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00c      	beq.n	8005e9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3307      	adds	r3, #7
 8005e86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0307 	bic.w	r3, r3, #7
 8005e8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	4a1f      	ldr	r2, [pc, #124]	; (8005f14 <prvHeapInit+0xac>)
 8005e98:	4413      	add	r3, r2
 8005e9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ea0:	4a1d      	ldr	r2, [pc, #116]	; (8005f18 <prvHeapInit+0xb0>)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ea6:	4b1c      	ldr	r3, [pc, #112]	; (8005f18 <prvHeapInit+0xb0>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0307 	bic.w	r3, r3, #7
 8005ec2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4a15      	ldr	r2, [pc, #84]	; (8005f1c <prvHeapInit+0xb4>)
 8005ec8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005eca:	4b14      	ldr	r3, [pc, #80]	; (8005f1c <prvHeapInit+0xb4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <prvHeapInit+0xb4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	1ad2      	subs	r2, r2, r3
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <prvHeapInit+0xb4>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	4a0a      	ldr	r2, [pc, #40]	; (8005f20 <prvHeapInit+0xb8>)
 8005ef6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	4a09      	ldr	r2, [pc, #36]	; (8005f24 <prvHeapInit+0xbc>)
 8005efe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f00:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <prvHeapInit+0xc0>)
 8005f02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f06:	601a      	str	r2, [r3, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20000f84 	.word	0x20000f84
 8005f18:	20001b84 	.word	0x20001b84
 8005f1c:	20001b8c 	.word	0x20001b8c
 8005f20:	20001b94 	.word	0x20001b94
 8005f24:	20001b90 	.word	0x20001b90
 8005f28:	20001b98 	.word	0x20001b98

08005f2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f34:	4b27      	ldr	r3, [pc, #156]	; (8005fd4 <prvInsertBlockIntoFreeList+0xa8>)
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e002      	b.n	8005f40 <prvInsertBlockIntoFreeList+0x14>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d8f7      	bhi.n	8005f3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4413      	add	r3, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d108      	bne.n	8005f6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	441a      	add	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	441a      	add	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d118      	bne.n	8005fb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <prvInsertBlockIntoFreeList+0xac>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d00d      	beq.n	8005faa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	441a      	add	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	e008      	b.n	8005fbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005faa:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <prvInsertBlockIntoFreeList+0xac>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	e003      	b.n	8005fbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d002      	beq.n	8005fca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr
 8005fd4:	20001b84 	.word	0x20001b84
 8005fd8:	20001b8c 	.word	0x20001b8c

08005fdc <__libc_init_array>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	2600      	movs	r6, #0
 8005fe0:	4d0c      	ldr	r5, [pc, #48]	; (8006014 <__libc_init_array+0x38>)
 8005fe2:	4c0d      	ldr	r4, [pc, #52]	; (8006018 <__libc_init_array+0x3c>)
 8005fe4:	1b64      	subs	r4, r4, r5
 8005fe6:	10a4      	asrs	r4, r4, #2
 8005fe8:	42a6      	cmp	r6, r4
 8005fea:	d109      	bne.n	8006000 <__libc_init_array+0x24>
 8005fec:	f000 f8f4 	bl	80061d8 <_init>
 8005ff0:	2600      	movs	r6, #0
 8005ff2:	4d0a      	ldr	r5, [pc, #40]	; (800601c <__libc_init_array+0x40>)
 8005ff4:	4c0a      	ldr	r4, [pc, #40]	; (8006020 <__libc_init_array+0x44>)
 8005ff6:	1b64      	subs	r4, r4, r5
 8005ff8:	10a4      	asrs	r4, r4, #2
 8005ffa:	42a6      	cmp	r6, r4
 8005ffc:	d105      	bne.n	800600a <__libc_init_array+0x2e>
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	f855 3b04 	ldr.w	r3, [r5], #4
 8006004:	4798      	blx	r3
 8006006:	3601      	adds	r6, #1
 8006008:	e7ee      	b.n	8005fe8 <__libc_init_array+0xc>
 800600a:	f855 3b04 	ldr.w	r3, [r5], #4
 800600e:	4798      	blx	r3
 8006010:	3601      	adds	r6, #1
 8006012:	e7f2      	b.n	8005ffa <__libc_init_array+0x1e>
 8006014:	08006500 	.word	0x08006500
 8006018:	08006500 	.word	0x08006500
 800601c:	08006500 	.word	0x08006500
 8006020:	08006504 	.word	0x08006504

08006024 <__retarget_lock_acquire_recursive>:
 8006024:	4770      	bx	lr

08006026 <__retarget_lock_release_recursive>:
 8006026:	4770      	bx	lr

08006028 <memcpy>:
 8006028:	440a      	add	r2, r1
 800602a:	4291      	cmp	r1, r2
 800602c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006030:	d100      	bne.n	8006034 <memcpy+0xc>
 8006032:	4770      	bx	lr
 8006034:	b510      	push	{r4, lr}
 8006036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800603a:	4291      	cmp	r1, r2
 800603c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006040:	d1f9      	bne.n	8006036 <memcpy+0xe>
 8006042:	bd10      	pop	{r4, pc}

08006044 <memset>:
 8006044:	4603      	mov	r3, r0
 8006046:	4402      	add	r2, r0
 8006048:	4293      	cmp	r3, r2
 800604a:	d100      	bne.n	800604e <memset+0xa>
 800604c:	4770      	bx	lr
 800604e:	f803 1b01 	strb.w	r1, [r3], #1
 8006052:	e7f9      	b.n	8006048 <memset+0x4>

08006054 <cleanup_glue>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	460c      	mov	r4, r1
 8006058:	6809      	ldr	r1, [r1, #0]
 800605a:	4605      	mov	r5, r0
 800605c:	b109      	cbz	r1, 8006062 <cleanup_glue+0xe>
 800605e:	f7ff fff9 	bl	8006054 <cleanup_glue>
 8006062:	4621      	mov	r1, r4
 8006064:	4628      	mov	r0, r5
 8006066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800606a:	f000 b869 	b.w	8006140 <_free_r>
	...

08006070 <_reclaim_reent>:
 8006070:	4b2c      	ldr	r3, [pc, #176]	; (8006124 <_reclaim_reent+0xb4>)
 8006072:	b570      	push	{r4, r5, r6, lr}
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4604      	mov	r4, r0
 8006078:	4283      	cmp	r3, r0
 800607a:	d051      	beq.n	8006120 <_reclaim_reent+0xb0>
 800607c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800607e:	b143      	cbz	r3, 8006092 <_reclaim_reent+0x22>
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d14a      	bne.n	800611c <_reclaim_reent+0xac>
 8006086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006088:	6819      	ldr	r1, [r3, #0]
 800608a:	b111      	cbz	r1, 8006092 <_reclaim_reent+0x22>
 800608c:	4620      	mov	r0, r4
 800608e:	f000 f857 	bl	8006140 <_free_r>
 8006092:	6961      	ldr	r1, [r4, #20]
 8006094:	b111      	cbz	r1, 800609c <_reclaim_reent+0x2c>
 8006096:	4620      	mov	r0, r4
 8006098:	f000 f852 	bl	8006140 <_free_r>
 800609c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800609e:	b111      	cbz	r1, 80060a6 <_reclaim_reent+0x36>
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 f84d 	bl	8006140 <_free_r>
 80060a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80060a8:	b111      	cbz	r1, 80060b0 <_reclaim_reent+0x40>
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 f848 	bl	8006140 <_free_r>
 80060b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80060b2:	b111      	cbz	r1, 80060ba <_reclaim_reent+0x4a>
 80060b4:	4620      	mov	r0, r4
 80060b6:	f000 f843 	bl	8006140 <_free_r>
 80060ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80060bc:	b111      	cbz	r1, 80060c4 <_reclaim_reent+0x54>
 80060be:	4620      	mov	r0, r4
 80060c0:	f000 f83e 	bl	8006140 <_free_r>
 80060c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80060c6:	b111      	cbz	r1, 80060ce <_reclaim_reent+0x5e>
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 f839 	bl	8006140 <_free_r>
 80060ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80060d0:	b111      	cbz	r1, 80060d8 <_reclaim_reent+0x68>
 80060d2:	4620      	mov	r0, r4
 80060d4:	f000 f834 	bl	8006140 <_free_r>
 80060d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060da:	b111      	cbz	r1, 80060e2 <_reclaim_reent+0x72>
 80060dc:	4620      	mov	r0, r4
 80060de:	f000 f82f 	bl	8006140 <_free_r>
 80060e2:	69a3      	ldr	r3, [r4, #24]
 80060e4:	b1e3      	cbz	r3, 8006120 <_reclaim_reent+0xb0>
 80060e6:	4620      	mov	r0, r4
 80060e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80060ea:	4798      	blx	r3
 80060ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80060ee:	b1b9      	cbz	r1, 8006120 <_reclaim_reent+0xb0>
 80060f0:	4620      	mov	r0, r4
 80060f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060f6:	f7ff bfad 	b.w	8006054 <cleanup_glue>
 80060fa:	5949      	ldr	r1, [r1, r5]
 80060fc:	b941      	cbnz	r1, 8006110 <_reclaim_reent+0xa0>
 80060fe:	3504      	adds	r5, #4
 8006100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006102:	2d80      	cmp	r5, #128	; 0x80
 8006104:	68d9      	ldr	r1, [r3, #12]
 8006106:	d1f8      	bne.n	80060fa <_reclaim_reent+0x8a>
 8006108:	4620      	mov	r0, r4
 800610a:	f000 f819 	bl	8006140 <_free_r>
 800610e:	e7ba      	b.n	8006086 <_reclaim_reent+0x16>
 8006110:	680e      	ldr	r6, [r1, #0]
 8006112:	4620      	mov	r0, r4
 8006114:	f000 f814 	bl	8006140 <_free_r>
 8006118:	4631      	mov	r1, r6
 800611a:	e7ef      	b.n	80060fc <_reclaim_reent+0x8c>
 800611c:	2500      	movs	r5, #0
 800611e:	e7ef      	b.n	8006100 <_reclaim_reent+0x90>
 8006120:	bd70      	pop	{r4, r5, r6, pc}
 8006122:	bf00      	nop
 8006124:	20000154 	.word	0x20000154

08006128 <__malloc_lock>:
 8006128:	4801      	ldr	r0, [pc, #4]	; (8006130 <__malloc_lock+0x8>)
 800612a:	f7ff bf7b 	b.w	8006024 <__retarget_lock_acquire_recursive>
 800612e:	bf00      	nop
 8006130:	20001ce4 	.word	0x20001ce4

08006134 <__malloc_unlock>:
 8006134:	4801      	ldr	r0, [pc, #4]	; (800613c <__malloc_unlock+0x8>)
 8006136:	f7ff bf76 	b.w	8006026 <__retarget_lock_release_recursive>
 800613a:	bf00      	nop
 800613c:	20001ce4 	.word	0x20001ce4

08006140 <_free_r>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	4605      	mov	r5, r0
 8006144:	2900      	cmp	r1, #0
 8006146:	d043      	beq.n	80061d0 <_free_r+0x90>
 8006148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800614c:	1f0c      	subs	r4, r1, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	bfb8      	it	lt
 8006152:	18e4      	addlt	r4, r4, r3
 8006154:	f7ff ffe8 	bl	8006128 <__malloc_lock>
 8006158:	4a1e      	ldr	r2, [pc, #120]	; (80061d4 <_free_r+0x94>)
 800615a:	6813      	ldr	r3, [r2, #0]
 800615c:	4610      	mov	r0, r2
 800615e:	b933      	cbnz	r3, 800616e <_free_r+0x2e>
 8006160:	6063      	str	r3, [r4, #4]
 8006162:	6014      	str	r4, [r2, #0]
 8006164:	4628      	mov	r0, r5
 8006166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800616a:	f7ff bfe3 	b.w	8006134 <__malloc_unlock>
 800616e:	42a3      	cmp	r3, r4
 8006170:	d90a      	bls.n	8006188 <_free_r+0x48>
 8006172:	6821      	ldr	r1, [r4, #0]
 8006174:	1862      	adds	r2, r4, r1
 8006176:	4293      	cmp	r3, r2
 8006178:	bf01      	itttt	eq
 800617a:	681a      	ldreq	r2, [r3, #0]
 800617c:	685b      	ldreq	r3, [r3, #4]
 800617e:	1852      	addeq	r2, r2, r1
 8006180:	6022      	streq	r2, [r4, #0]
 8006182:	6063      	str	r3, [r4, #4]
 8006184:	6004      	str	r4, [r0, #0]
 8006186:	e7ed      	b.n	8006164 <_free_r+0x24>
 8006188:	461a      	mov	r2, r3
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	b10b      	cbz	r3, 8006192 <_free_r+0x52>
 800618e:	42a3      	cmp	r3, r4
 8006190:	d9fa      	bls.n	8006188 <_free_r+0x48>
 8006192:	6811      	ldr	r1, [r2, #0]
 8006194:	1850      	adds	r0, r2, r1
 8006196:	42a0      	cmp	r0, r4
 8006198:	d10b      	bne.n	80061b2 <_free_r+0x72>
 800619a:	6820      	ldr	r0, [r4, #0]
 800619c:	4401      	add	r1, r0
 800619e:	1850      	adds	r0, r2, r1
 80061a0:	4283      	cmp	r3, r0
 80061a2:	6011      	str	r1, [r2, #0]
 80061a4:	d1de      	bne.n	8006164 <_free_r+0x24>
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	4401      	add	r1, r0
 80061ac:	6011      	str	r1, [r2, #0]
 80061ae:	6053      	str	r3, [r2, #4]
 80061b0:	e7d8      	b.n	8006164 <_free_r+0x24>
 80061b2:	d902      	bls.n	80061ba <_free_r+0x7a>
 80061b4:	230c      	movs	r3, #12
 80061b6:	602b      	str	r3, [r5, #0]
 80061b8:	e7d4      	b.n	8006164 <_free_r+0x24>
 80061ba:	6820      	ldr	r0, [r4, #0]
 80061bc:	1821      	adds	r1, r4, r0
 80061be:	428b      	cmp	r3, r1
 80061c0:	bf01      	itttt	eq
 80061c2:	6819      	ldreq	r1, [r3, #0]
 80061c4:	685b      	ldreq	r3, [r3, #4]
 80061c6:	1809      	addeq	r1, r1, r0
 80061c8:	6021      	streq	r1, [r4, #0]
 80061ca:	6063      	str	r3, [r4, #4]
 80061cc:	6054      	str	r4, [r2, #4]
 80061ce:	e7c9      	b.n	8006164 <_free_r+0x24>
 80061d0:	bd38      	pop	{r3, r4, r5, pc}
 80061d2:	bf00      	nop
 80061d4:	20001b9c 	.word	0x20001b9c

080061d8 <_init>:
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061da:	bf00      	nop
 80061dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061de:	bc08      	pop	{r3}
 80061e0:	469e      	mov	lr, r3
 80061e2:	4770      	bx	lr

080061e4 <_fini>:
 80061e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e6:	bf00      	nop
 80061e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ea:	bc08      	pop	{r3}
 80061ec:	469e      	mov	lr, r3
 80061ee:	4770      	bx	lr
